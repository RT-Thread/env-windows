.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "QEMU-QMP-REF" "7" "Dec 30, 2022" "7.2.0" "QEMU"
.SH NAME
qemu-qmp-ref \- QEMU QMP Reference Manual
.SS Contents
.INDENT 0.0
.IP \(bu 2
\fI\%QEMU QMP Reference Manual\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Introduction\fP
.INDENT 2.0
.IP \(bu 2
\fI\%This document describes all commands currently supported by QMP.\fP
.UNINDENT
.IP \(bu 2
\fI\%Stability Considerations\fP
.INDENT 2.0
.IP \(bu 2
\fI\%The current QMP command set (described in this file) may be useful for a
number of use cases, however it\(aqs limited and several commands have bad
defined semantics, specially with regard to command completion.\fP
.UNINDENT
.IP \(bu 2
\fI\%QMP errors\fP
.INDENT 2.0
.IP \(bu 2
\fI\%QapiErrorClass (Enum)\fP
.UNINDENT
.IP \(bu 2
\fI\%Common data types\fP
.INDENT 2.0
.IP \(bu 2
\fI\%IoOperationType (Enum)\fP
.IP \(bu 2
\fI\%OnOffAuto (Enum)\fP
.IP \(bu 2
\fI\%OnOffSplit (Enum)\fP
.IP \(bu 2
\fI\%String (Object)\fP
.IP \(bu 2
\fI\%StrOrNull (Alternate)\fP
.IP \(bu 2
\fI\%OffAutoPCIBAR (Enum)\fP
.IP \(bu 2
\fI\%PCIELinkSpeed (Enum)\fP
.IP \(bu 2
\fI\%PCIELinkWidth (Enum)\fP
.IP \(bu 2
\fI\%HostMemPolicy (Enum)\fP
.IP \(bu 2
\fI\%NetFilterDirection (Enum)\fP
.IP \(bu 2
\fI\%GrabToggleKeys (Enum)\fP
.IP \(bu 2
\fI\%HumanReadableText (Object)\fP
.UNINDENT
.IP \(bu 2
\fI\%Socket data types\fP
.INDENT 2.0
.IP \(bu 2
\fI\%NetworkAddressFamily (Enum)\fP
.IP \(bu 2
\fI\%InetSocketAddressBase (Object)\fP
.IP \(bu 2
\fI\%InetSocketAddress (Object)\fP
.IP \(bu 2
\fI\%UnixSocketAddress (Object)\fP
.IP \(bu 2
\fI\%VsockSocketAddress (Object)\fP
.IP \(bu 2
\fI\%InetSocketAddressWrapper (Object)\fP
.IP \(bu 2
\fI\%UnixSocketAddressWrapper (Object)\fP
.IP \(bu 2
\fI\%VsockSocketAddressWrapper (Object)\fP
.IP \(bu 2
\fI\%StringWrapper (Object)\fP
.IP \(bu 2
\fI\%SocketAddressLegacy (Object)\fP
.IP \(bu 2
\fI\%SocketAddressType (Enum)\fP
.IP \(bu 2
\fI\%SocketAddress (Object)\fP
.UNINDENT
.IP \(bu 2
\fI\%VM run state\fP
.INDENT 2.0
.IP \(bu 2
\fI\%RunState (Enum)\fP
.IP \(bu 2
\fI\%ShutdownCause (Enum)\fP
.IP \(bu 2
\fI\%StatusInfo (Object)\fP
.IP \(bu 2
\fI\%query\-status (Command)\fP
.IP \(bu 2
\fI\%SHUTDOWN (Event)\fP
.IP \(bu 2
\fI\%POWERDOWN (Event)\fP
.IP \(bu 2
\fI\%RESET (Event)\fP
.IP \(bu 2
\fI\%STOP (Event)\fP
.IP \(bu 2
\fI\%RESUME (Event)\fP
.IP \(bu 2
\fI\%SUSPEND (Event)\fP
.IP \(bu 2
\fI\%SUSPEND_DISK (Event)\fP
.IP \(bu 2
\fI\%WAKEUP (Event)\fP
.IP \(bu 2
\fI\%WATCHDOG (Event)\fP
.IP \(bu 2
\fI\%WatchdogAction (Enum)\fP
.IP \(bu 2
\fI\%RebootAction (Enum)\fP
.IP \(bu 2
\fI\%ShutdownAction (Enum)\fP
.IP \(bu 2
\fI\%PanicAction (Enum)\fP
.IP \(bu 2
\fI\%watchdog\-set\-action (Command)\fP
.IP \(bu 2
\fI\%set\-action (Command)\fP
.IP \(bu 2
\fI\%GUEST_PANICKED (Event)\fP
.IP \(bu 2
\fI\%GUEST_CRASHLOADED (Event)\fP
.IP \(bu 2
\fI\%GuestPanicAction (Enum)\fP
.IP \(bu 2
\fI\%GuestPanicInformationType (Enum)\fP
.IP \(bu 2
\fI\%GuestPanicInformation (Object)\fP
.IP \(bu 2
\fI\%GuestPanicInformationHyperV (Object)\fP
.IP \(bu 2
\fI\%S390CrashReason (Enum)\fP
.IP \(bu 2
\fI\%GuestPanicInformationS390 (Object)\fP
.IP \(bu 2
\fI\%MEMORY_FAILURE (Event)\fP
.IP \(bu 2
\fI\%MemoryFailureRecipient (Enum)\fP
.IP \(bu 2
\fI\%MemoryFailureAction (Enum)\fP
.IP \(bu 2
\fI\%MemoryFailureFlags (Object)\fP
.IP \(bu 2
\fI\%NotifyVmexitOption (Enum)\fP
.UNINDENT
.IP \(bu 2
\fI\%Cryptography\fP
.INDENT 2.0
.IP \(bu 2
\fI\%QCryptoTLSCredsEndpoint (Enum)\fP
.IP \(bu 2
\fI\%QCryptoSecretFormat (Enum)\fP
.IP \(bu 2
\fI\%QCryptoHashAlgorithm (Enum)\fP
.IP \(bu 2
\fI\%QCryptoCipherAlgorithm (Enum)\fP
.IP \(bu 2
\fI\%QCryptoCipherMode (Enum)\fP
.IP \(bu 2
\fI\%QCryptoIVGenAlgorithm (Enum)\fP
.IP \(bu 2
\fI\%QCryptoBlockFormat (Enum)\fP
.IP \(bu 2
\fI\%QCryptoBlockOptionsBase (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockOptionsQCow (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockOptionsLUKS (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockCreateOptionsLUKS (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockOpenOptions (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockCreateOptions (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockInfoBase (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockInfoLUKSSlot (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockInfoLUKS (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockInfo (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockLUKSKeyslotState (Enum)\fP
.IP \(bu 2
\fI\%QCryptoBlockAmendOptionsLUKS (Object)\fP
.IP \(bu 2
\fI\%QCryptoBlockAmendOptions (Object)\fP
.IP \(bu 2
\fI\%SecretCommonProperties (Object)\fP
.IP \(bu 2
\fI\%SecretProperties (Object)\fP
.IP \(bu 2
\fI\%SecretKeyringProperties (Object)\fP
.IP \(bu 2
\fI\%TlsCredsProperties (Object)\fP
.IP \(bu 2
\fI\%TlsCredsAnonProperties (Object)\fP
.IP \(bu 2
\fI\%TlsCredsPskProperties (Object)\fP
.IP \(bu 2
\fI\%TlsCredsX509Properties (Object)\fP
.IP \(bu 2
\fI\%QCryptoAkCipherAlgorithm (Enum)\fP
.IP \(bu 2
\fI\%QCryptoAkCipherKeyType (Enum)\fP
.IP \(bu 2
\fI\%QCryptoRSAPaddingAlgorithm (Enum)\fP
.IP \(bu 2
\fI\%QCryptoAkCipherOptionsRSA (Object)\fP
.IP \(bu 2
\fI\%QCryptoAkCipherOptions (Object)\fP
.UNINDENT
.IP \(bu 2
\fI\%Block devices\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Block core (VM unrelated)\fP
.IP \(bu 2
\fI\%Background jobs\fP
.IP \(bu 2
\fI\%Additional block stuff (VM related)\fP
.IP \(bu 2
\fI\%Block device exports\fP
.UNINDENT
.IP \(bu 2
\fI\%Character devices\fP
.INDENT 2.0
.IP \(bu 2
\fI\%ChardevInfo (Object)\fP
.IP \(bu 2
\fI\%query\-chardev (Command)\fP
.IP \(bu 2
\fI\%ChardevBackendInfo (Object)\fP
.IP \(bu 2
\fI\%query\-chardev\-backends (Command)\fP
.IP \(bu 2
\fI\%DataFormat (Enum)\fP
.IP \(bu 2
\fI\%ringbuf\-write (Command)\fP
.IP \(bu 2
\fI\%ringbuf\-read (Command)\fP
.IP \(bu 2
\fI\%ChardevCommon (Object)\fP
.IP \(bu 2
\fI\%ChardevFile (Object)\fP
.IP \(bu 2
\fI\%ChardevHostdev (Object)\fP
.IP \(bu 2
\fI\%ChardevSocket (Object)\fP
.IP \(bu 2
\fI\%ChardevUdp (Object)\fP
.IP \(bu 2
\fI\%ChardevMux (Object)\fP
.IP \(bu 2
\fI\%ChardevStdio (Object)\fP
.IP \(bu 2
\fI\%ChardevSpiceChannel (Object)\fP
.IP \(bu 2
\fI\%ChardevSpicePort (Object)\fP
.IP \(bu 2
\fI\%ChardevDBus (Object)\fP
.IP \(bu 2
\fI\%ChardevVC (Object)\fP
.IP \(bu 2
\fI\%ChardevRingbuf (Object)\fP
.IP \(bu 2
\fI\%ChardevQemuVDAgent (Object)\fP
.IP \(bu 2
\fI\%ChardevBackendKind (Enum)\fP
.IP \(bu 2
\fI\%ChardevFileWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevHostdevWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevSocketWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevUdpWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevCommonWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevMuxWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevStdioWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevSpiceChannelWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevSpicePortWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevQemuVDAgentWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevDBusWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevVCWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevRingbufWrapper (Object)\fP
.IP \(bu 2
\fI\%ChardevBackend (Object)\fP
.IP \(bu 2
\fI\%ChardevReturn (Object)\fP
.IP \(bu 2
\fI\%chardev\-add (Command)\fP
.IP \(bu 2
\fI\%chardev\-change (Command)\fP
.IP \(bu 2
\fI\%chardev\-remove (Command)\fP
.IP \(bu 2
\fI\%chardev\-send\-break (Command)\fP
.IP \(bu 2
\fI\%VSERPORT_CHANGE (Event)\fP
.UNINDENT
.IP \(bu 2
\fI\%Dump guest memory\fP
.INDENT 2.0
.IP \(bu 2
\fI\%DumpGuestMemoryFormat (Enum)\fP
.IP \(bu 2
\fI\%dump\-guest\-memory (Command)\fP
.IP \(bu 2
\fI\%DumpStatus (Enum)\fP
.IP \(bu 2
\fI\%DumpQueryResult (Object)\fP
.IP \(bu 2
\fI\%query\-dump (Command)\fP
.IP \(bu 2
\fI\%DUMP_COMPLETED (Event)\fP
.IP \(bu 2
\fI\%DumpGuestMemoryCapability (Object)\fP
.IP \(bu 2
\fI\%query\-dump\-guest\-memory\-capability (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Net devices\fP
.INDENT 2.0
.IP \(bu 2
\fI\%set_link (Command)\fP
.IP \(bu 2
\fI\%netdev_add (Command)\fP
.IP \(bu 2
\fI\%netdev_del (Command)\fP
.IP \(bu 2
\fI\%NetLegacyNicOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevUserOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevTapOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevSocketOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevL2TPv3Options (Object)\fP
.IP \(bu 2
\fI\%NetdevVdeOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevBridgeOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevHubPortOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevNetmapOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevVhostUserOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevVhostVDPAOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevVmnetHostOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevVmnetSharedOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevVmnetBridgedOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevStreamOptions (Object)\fP
.IP \(bu 2
\fI\%NetdevDgramOptions (Object)\fP
.IP \(bu 2
\fI\%NetClientDriver (Enum)\fP
.IP \(bu 2
\fI\%Netdev (Object)\fP
.IP \(bu 2
\fI\%RxState (Enum)\fP
.IP \(bu 2
\fI\%RxFilterInfo (Object)\fP
.IP \(bu 2
\fI\%query\-rx\-filter (Command)\fP
.IP \(bu 2
\fI\%NIC_RX_FILTER_CHANGED (Event)\fP
.IP \(bu 2
\fI\%AnnounceParameters (Object)\fP
.IP \(bu 2
\fI\%announce\-self (Command)\fP
.IP \(bu 2
\fI\%FAILOVER_NEGOTIATED (Event)\fP
.IP \(bu 2
\fI\%NETDEV_STREAM_CONNECTED (Event)\fP
.IP \(bu 2
\fI\%NETDEV_STREAM_DISCONNECTED (Event)\fP
.UNINDENT
.IP \(bu 2
\fI\%RDMA device\fP
.INDENT 2.0
.IP \(bu 2
\fI\%RDMA_GID_STATUS_CHANGED (Event)\fP
.UNINDENT
.IP \(bu 2
\fI\%Rocker switch device\fP
.INDENT 2.0
.IP \(bu 2
\fI\%RockerSwitch (Object)\fP
.IP \(bu 2
\fI\%query\-rocker (Command)\fP
.IP \(bu 2
\fI\%RockerPortDuplex (Enum)\fP
.IP \(bu 2
\fI\%RockerPortAutoneg (Enum)\fP
.IP \(bu 2
\fI\%RockerPort (Object)\fP
.IP \(bu 2
\fI\%query\-rocker\-ports (Command)\fP
.IP \(bu 2
\fI\%RockerOfDpaFlowKey (Object)\fP
.IP \(bu 2
\fI\%RockerOfDpaFlowMask (Object)\fP
.IP \(bu 2
\fI\%RockerOfDpaFlowAction (Object)\fP
.IP \(bu 2
\fI\%RockerOfDpaFlow (Object)\fP
.IP \(bu 2
\fI\%query\-rocker\-of\-dpa\-flows (Command)\fP
.IP \(bu 2
\fI\%RockerOfDpaGroup (Object)\fP
.IP \(bu 2
\fI\%query\-rocker\-of\-dpa\-groups (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%TPM (trusted platform module) devices\fP
.INDENT 2.0
.IP \(bu 2
\fI\%TpmModel (Enum)\fP
.IP \(bu 2
\fI\%query\-tpm\-models (Command)\fP
.IP \(bu 2
\fI\%TpmType (Enum)\fP
.IP \(bu 2
\fI\%query\-tpm\-types (Command)\fP
.IP \(bu 2
\fI\%TPMPassthroughOptions (Object)\fP
.IP \(bu 2
\fI\%TPMEmulatorOptions (Object)\fP
.IP \(bu 2
\fI\%TPMPassthroughOptionsWrapper (Object)\fP
.IP \(bu 2
\fI\%TPMEmulatorOptionsWrapper (Object)\fP
.IP \(bu 2
\fI\%TpmTypeOptions (Object)\fP
.IP \(bu 2
\fI\%TPMInfo (Object)\fP
.IP \(bu 2
\fI\%query\-tpm (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Remote desktop\fP
.INDENT 2.0
.IP \(bu 2
\fI\%DisplayProtocol (Enum)\fP
.IP \(bu 2
\fI\%SetPasswordAction (Enum)\fP
.IP \(bu 2
\fI\%SetPasswordOptions (Object)\fP
.IP \(bu 2
\fI\%SetPasswordOptionsVnc (Object)\fP
.IP \(bu 2
\fI\%set_password (Command)\fP
.IP \(bu 2
\fI\%ExpirePasswordOptions (Object)\fP
.IP \(bu 2
\fI\%ExpirePasswordOptionsVnc (Object)\fP
.IP \(bu 2
\fI\%expire_password (Command)\fP
.IP \(bu 2
\fI\%ImageFormat (Enum)\fP
.IP \(bu 2
\fI\%screendump (Command)\fP
.IP \(bu 2
\fI\%Spice\fP
.IP \(bu 2
\fI\%VNC\fP
.UNINDENT
.IP \(bu 2
\fI\%Input\fP
.INDENT 2.0
.IP \(bu 2
\fI\%MouseInfo (Object)\fP
.IP \(bu 2
\fI\%query\-mice (Command)\fP
.IP \(bu 2
\fI\%QKeyCode (Enum)\fP
.IP \(bu 2
\fI\%KeyValueKind (Enum)\fP
.IP \(bu 2
\fI\%IntWrapper (Object)\fP
.IP \(bu 2
\fI\%QKeyCodeWrapper (Object)\fP
.IP \(bu 2
\fI\%KeyValue (Object)\fP
.IP \(bu 2
\fI\%send\-key (Command)\fP
.IP \(bu 2
\fI\%InputButton (Enum)\fP
.IP \(bu 2
\fI\%InputAxis (Enum)\fP
.IP \(bu 2
\fI\%InputKeyEvent (Object)\fP
.IP \(bu 2
\fI\%InputBtnEvent (Object)\fP
.IP \(bu 2
\fI\%InputMoveEvent (Object)\fP
.IP \(bu 2
\fI\%InputEventKind (Enum)\fP
.IP \(bu 2
\fI\%InputKeyEventWrapper (Object)\fP
.IP \(bu 2
\fI\%InputBtnEventWrapper (Object)\fP
.IP \(bu 2
\fI\%InputMoveEventWrapper (Object)\fP
.IP \(bu 2
\fI\%InputEvent (Object)\fP
.IP \(bu 2
\fI\%input\-send\-event (Command)\fP
.IP \(bu 2
\fI\%DisplayGTK (Object)\fP
.IP \(bu 2
\fI\%DisplayEGLHeadless (Object)\fP
.IP \(bu 2
\fI\%DisplayDBus (Object)\fP
.IP \(bu 2
\fI\%DisplayGLMode (Enum)\fP
.IP \(bu 2
\fI\%DisplayCurses (Object)\fP
.IP \(bu 2
\fI\%DisplayCocoa (Object)\fP
.IP \(bu 2
\fI\%HotKeyMod (Enum)\fP
.IP \(bu 2
\fI\%DisplaySDL (Object)\fP
.IP \(bu 2
\fI\%DisplayType (Enum)\fP
.IP \(bu 2
\fI\%DisplayOptions (Object)\fP
.IP \(bu 2
\fI\%query\-display\-options (Command)\fP
.IP \(bu 2
\fI\%DisplayReloadType (Enum)\fP
.IP \(bu 2
\fI\%DisplayReloadOptionsVNC (Object)\fP
.IP \(bu 2
\fI\%DisplayReloadOptions (Object)\fP
.IP \(bu 2
\fI\%display\-reload (Command)\fP
.IP \(bu 2
\fI\%DisplayUpdateType (Enum)\fP
.IP \(bu 2
\fI\%DisplayUpdateOptionsVNC (Object)\fP
.IP \(bu 2
\fI\%DisplayUpdateOptions (Object)\fP
.IP \(bu 2
\fI\%display\-update (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%User authorization\fP
.INDENT 2.0
.IP \(bu 2
\fI\%QAuthZListPolicy (Enum)\fP
.IP \(bu 2
\fI\%QAuthZListFormat (Enum)\fP
.IP \(bu 2
\fI\%QAuthZListRule (Object)\fP
.IP \(bu 2
\fI\%AuthZListProperties (Object)\fP
.IP \(bu 2
\fI\%AuthZListFileProperties (Object)\fP
.IP \(bu 2
\fI\%AuthZPAMProperties (Object)\fP
.IP \(bu 2
\fI\%AuthZSimpleProperties (Object)\fP
.UNINDENT
.IP \(bu 2
\fI\%Migration\fP
.INDENT 2.0
.IP \(bu 2
\fI\%MigrationStats (Object)\fP
.IP \(bu 2
\fI\%XBZRLECacheStats (Object)\fP
.IP \(bu 2
\fI\%CompressionStats (Object)\fP
.IP \(bu 2
\fI\%MigrationStatus (Enum)\fP
.IP \(bu 2
\fI\%VfioStats (Object)\fP
.IP \(bu 2
\fI\%MigrationInfo (Object)\fP
.IP \(bu 2
\fI\%query\-migrate (Command)\fP
.IP \(bu 2
\fI\%MigrationCapability (Enum)\fP
.IP \(bu 2
\fI\%MigrationCapabilityStatus (Object)\fP
.IP \(bu 2
\fI\%migrate\-set\-capabilities (Command)\fP
.IP \(bu 2
\fI\%query\-migrate\-capabilities (Command)\fP
.IP \(bu 2
\fI\%MultiFDCompression (Enum)\fP
.IP \(bu 2
\fI\%BitmapMigrationBitmapAliasTransform (Object)\fP
.IP \(bu 2
\fI\%BitmapMigrationBitmapAlias (Object)\fP
.IP \(bu 2
\fI\%BitmapMigrationNodeAlias (Object)\fP
.IP \(bu 2
\fI\%MigrationParameter (Enum)\fP
.IP \(bu 2
\fI\%MigrateSetParameters (Object)\fP
.IP \(bu 2
\fI\%migrate\-set\-parameters (Command)\fP
.IP \(bu 2
\fI\%MigrationParameters (Object)\fP
.IP \(bu 2
\fI\%query\-migrate\-parameters (Command)\fP
.IP \(bu 2
\fI\%client_migrate_info (Command)\fP
.IP \(bu 2
\fI\%migrate\-start\-postcopy (Command)\fP
.IP \(bu 2
\fI\%MIGRATION (Event)\fP
.IP \(bu 2
\fI\%MIGRATION_PASS (Event)\fP
.IP \(bu 2
\fI\%COLOMessage (Enum)\fP
.IP \(bu 2
\fI\%COLOMode (Enum)\fP
.IP \(bu 2
\fI\%FailoverStatus (Enum)\fP
.IP \(bu 2
\fI\%COLO_EXIT (Event)\fP
.IP \(bu 2
\fI\%COLOExitReason (Enum)\fP
.IP \(bu 2
\fI\%x\-colo\-lost\-heartbeat (Command)\fP
.IP \(bu 2
\fI\%migrate_cancel (Command)\fP
.IP \(bu 2
\fI\%migrate\-continue (Command)\fP
.IP \(bu 2
\fI\%migrate (Command)\fP
.IP \(bu 2
\fI\%migrate\-incoming (Command)\fP
.IP \(bu 2
\fI\%xen\-save\-devices\-state (Command)\fP
.IP \(bu 2
\fI\%xen\-set\-global\-dirty\-log (Command)\fP
.IP \(bu 2
\fI\%xen\-load\-devices\-state (Command)\fP
.IP \(bu 2
\fI\%xen\-set\-replication (Command)\fP
.IP \(bu 2
\fI\%ReplicationStatus (Object)\fP
.IP \(bu 2
\fI\%query\-xen\-replication\-status (Command)\fP
.IP \(bu 2
\fI\%xen\-colo\-do\-checkpoint (Command)\fP
.IP \(bu 2
\fI\%COLOStatus (Object)\fP
.IP \(bu 2
\fI\%query\-colo\-status (Command)\fP
.IP \(bu 2
\fI\%migrate\-recover (Command)\fP
.IP \(bu 2
\fI\%migrate\-pause (Command)\fP
.IP \(bu 2
\fI\%UNPLUG_PRIMARY (Event)\fP
.IP \(bu 2
\fI\%DirtyRateVcpu (Object)\fP
.IP \(bu 2
\fI\%DirtyRateStatus (Enum)\fP
.IP \(bu 2
\fI\%DirtyRateMeasureMode (Enum)\fP
.IP \(bu 2
\fI\%DirtyRateInfo (Object)\fP
.IP \(bu 2
\fI\%calc\-dirty\-rate (Command)\fP
.IP \(bu 2
\fI\%query\-dirty\-rate (Command)\fP
.IP \(bu 2
\fI\%DirtyLimitInfo (Object)\fP
.IP \(bu 2
\fI\%set\-vcpu\-dirty\-limit (Command)\fP
.IP \(bu 2
\fI\%cancel\-vcpu\-dirty\-limit (Command)\fP
.IP \(bu 2
\fI\%query\-vcpu\-dirty\-limit (Command)\fP
.IP \(bu 2
\fI\%snapshot\-save (Command)\fP
.IP \(bu 2
\fI\%snapshot\-load (Command)\fP
.IP \(bu 2
\fI\%snapshot\-delete (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Transactions\fP
.INDENT 2.0
.IP \(bu 2
\fI\%Abort (Object)\fP
.IP \(bu 2
\fI\%ActionCompletionMode (Enum)\fP
.IP \(bu 2
\fI\%TransactionActionKind (Enum)\fP
.IP \(bu 2
\fI\%AbortWrapper (Object)\fP
.IP \(bu 2
\fI\%BlockDirtyBitmapAddWrapper (Object)\fP
.IP \(bu 2
\fI\%BlockDirtyBitmapWrapper (Object)\fP
.IP \(bu 2
\fI\%BlockDirtyBitmapMergeWrapper (Object)\fP
.IP \(bu 2
\fI\%BlockdevBackupWrapper (Object)\fP
.IP \(bu 2
\fI\%BlockdevSnapshotWrapper (Object)\fP
.IP \(bu 2
\fI\%BlockdevSnapshotInternalWrapper (Object)\fP
.IP \(bu 2
\fI\%BlockdevSnapshotSyncWrapper (Object)\fP
.IP \(bu 2
\fI\%DriveBackupWrapper (Object)\fP
.IP \(bu 2
\fI\%TransactionAction (Object)\fP
.IP \(bu 2
\fI\%TransactionProperties (Object)\fP
.IP \(bu 2
\fI\%transaction (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Tracing\fP
.INDENT 2.0
.IP \(bu 2
\fI\%TraceEventState (Enum)\fP
.IP \(bu 2
\fI\%TraceEventInfo (Object)\fP
.IP \(bu 2
\fI\%trace\-event\-get\-state (Command)\fP
.IP \(bu 2
\fI\%trace\-event\-set\-state (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Compatibility policy\fP
.INDENT 2.0
.IP \(bu 2
\fI\%CompatPolicyInput (Enum)\fP
.IP \(bu 2
\fI\%CompatPolicyOutput (Enum)\fP
.IP \(bu 2
\fI\%CompatPolicy (Object)\fP
.UNINDENT
.IP \(bu 2
\fI\%QMP monitor control\fP
.INDENT 2.0
.IP \(bu 2
\fI\%qmp_capabilities (Command)\fP
.IP \(bu 2
\fI\%QMPCapability (Enum)\fP
.IP \(bu 2
\fI\%VersionTriple (Object)\fP
.IP \(bu 2
\fI\%VersionInfo (Object)\fP
.IP \(bu 2
\fI\%query\-version (Command)\fP
.IP \(bu 2
\fI\%CommandInfo (Object)\fP
.IP \(bu 2
\fI\%query\-commands (Command)\fP
.IP \(bu 2
\fI\%quit (Command)\fP
.IP \(bu 2
\fI\%MonitorMode (Enum)\fP
.IP \(bu 2
\fI\%MonitorOptions (Object)\fP
.UNINDENT
.IP \(bu 2
\fI\%QMP introspection\fP
.INDENT 2.0
.IP \(bu 2
\fI\%query\-qmp\-schema (Command)\fP
.IP \(bu 2
\fI\%SchemaMetaType (Enum)\fP
.IP \(bu 2
\fI\%SchemaInfo (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoBuiltin (Object)\fP
.IP \(bu 2
\fI\%JSONType (Enum)\fP
.IP \(bu 2
\fI\%SchemaInfoEnum (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoEnumMember (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoArray (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoObject (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoObjectMember (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoObjectVariant (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoAlternate (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoAlternateMember (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoCommand (Object)\fP
.IP \(bu 2
\fI\%SchemaInfoEvent (Object)\fP
.UNINDENT
.IP \(bu 2
\fI\%QEMU Object Model (QOM)\fP
.INDENT 2.0
.IP \(bu 2
\fI\%ObjectPropertyInfo (Object)\fP
.IP \(bu 2
\fI\%qom\-list (Command)\fP
.IP \(bu 2
\fI\%qom\-get (Command)\fP
.IP \(bu 2
\fI\%qom\-set (Command)\fP
.IP \(bu 2
\fI\%ObjectTypeInfo (Object)\fP
.IP \(bu 2
\fI\%qom\-list\-types (Command)\fP
.IP \(bu 2
\fI\%qom\-list\-properties (Command)\fP
.IP \(bu 2
\fI\%CanHostSocketcanProperties (Object)\fP
.IP \(bu 2
\fI\%ColoCompareProperties (Object)\fP
.IP \(bu 2
\fI\%CryptodevBackendProperties (Object)\fP
.IP \(bu 2
\fI\%CryptodevVhostUserProperties (Object)\fP
.IP \(bu 2
\fI\%DBusVMStateProperties (Object)\fP
.IP \(bu 2
\fI\%NetfilterInsert (Enum)\fP
.IP \(bu 2
\fI\%NetfilterProperties (Object)\fP
.IP \(bu 2
\fI\%FilterBufferProperties (Object)\fP
.IP \(bu 2
\fI\%FilterDumpProperties (Object)\fP
.IP \(bu 2
\fI\%FilterMirrorProperties (Object)\fP
.IP \(bu 2
\fI\%FilterRedirectorProperties (Object)\fP
.IP \(bu 2
\fI\%FilterRewriterProperties (Object)\fP
.IP \(bu 2
\fI\%InputBarrierProperties (Object)\fP
.IP \(bu 2
\fI\%InputLinuxProperties (Object)\fP
.IP \(bu 2
\fI\%EventLoopBaseProperties (Object)\fP
.IP \(bu 2
\fI\%IothreadProperties (Object)\fP
.IP \(bu 2
\fI\%MainLoopProperties (Object)\fP
.IP \(bu 2
\fI\%MemoryBackendProperties (Object)\fP
.IP \(bu 2
\fI\%MemoryBackendFileProperties (Object)\fP
.IP \(bu 2
\fI\%MemoryBackendMemfdProperties (Object)\fP
.IP \(bu 2
\fI\%MemoryBackendEpcProperties (Object)\fP
.IP \(bu 2
\fI\%PrManagerHelperProperties (Object)\fP
.IP \(bu 2
\fI\%QtestProperties (Object)\fP
.IP \(bu 2
\fI\%RemoteObjectProperties (Object)\fP
.IP \(bu 2
\fI\%VfioUserServerProperties (Object)\fP
.IP \(bu 2
\fI\%RngProperties (Object)\fP
.IP \(bu 2
\fI\%RngEgdProperties (Object)\fP
.IP \(bu 2
\fI\%RngRandomProperties (Object)\fP
.IP \(bu 2
\fI\%SevGuestProperties (Object)\fP
.IP \(bu 2
\fI\%ThreadContextProperties (Object)\fP
.IP \(bu 2
\fI\%ObjectType (Enum)\fP
.IP \(bu 2
\fI\%ObjectOptions (Object)\fP
.IP \(bu 2
\fI\%object\-add (Command)\fP
.IP \(bu 2
\fI\%object\-del (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Device infrastructure (qdev)\fP
.INDENT 2.0
.IP \(bu 2
\fI\%device\-list\-properties (Command)\fP
.IP \(bu 2
\fI\%device_add (Command)\fP
.IP \(bu 2
\fI\%device_del (Command)\fP
.IP \(bu 2
\fI\%DEVICE_DELETED (Event)\fP
.IP \(bu 2
\fI\%DEVICE_UNPLUG_GUEST_ERROR (Event)\fP
.UNINDENT
.IP \(bu 2
\fI\%Machines\fP
.INDENT 2.0
.IP \(bu 2
\fI\%SysEmuTarget (Enum)\fP
.IP \(bu 2
\fI\%CpuS390State (Enum)\fP
.IP \(bu 2
\fI\%CpuInfoS390 (Object)\fP
.IP \(bu 2
\fI\%CpuInfoFast (Object)\fP
.IP \(bu 2
\fI\%query\-cpus\-fast (Command)\fP
.IP \(bu 2
\fI\%MachineInfo (Object)\fP
.IP \(bu 2
\fI\%query\-machines (Command)\fP
.IP \(bu 2
\fI\%CurrentMachineParams (Object)\fP
.IP \(bu 2
\fI\%query\-current\-machine (Command)\fP
.IP \(bu 2
\fI\%TargetInfo (Object)\fP
.IP \(bu 2
\fI\%query\-target (Command)\fP
.IP \(bu 2
\fI\%UuidInfo (Object)\fP
.IP \(bu 2
\fI\%query\-uuid (Command)\fP
.IP \(bu 2
\fI\%GuidInfo (Object)\fP
.IP \(bu 2
\fI\%query\-vm\-generation\-id (Command)\fP
.IP \(bu 2
\fI\%system_reset (Command)\fP
.IP \(bu 2
\fI\%system_powerdown (Command)\fP
.IP \(bu 2
\fI\%system_wakeup (Command)\fP
.IP \(bu 2
\fI\%LostTickPolicy (Enum)\fP
.IP \(bu 2
\fI\%inject\-nmi (Command)\fP
.IP \(bu 2
\fI\%KvmInfo (Object)\fP
.IP \(bu 2
\fI\%query\-kvm (Command)\fP
.IP \(bu 2
\fI\%NumaOptionsType (Enum)\fP
.IP \(bu 2
\fI\%NumaOptions (Object)\fP
.IP \(bu 2
\fI\%NumaNodeOptions (Object)\fP
.IP \(bu 2
\fI\%NumaDistOptions (Object)\fP
.IP \(bu 2
\fI\%CXLFixedMemoryWindowOptions (Object)\fP
.IP \(bu 2
\fI\%CXLFMWProperties (Object)\fP
.IP \(bu 2
\fI\%X86CPURegister32 (Enum)\fP
.IP \(bu 2
\fI\%X86CPUFeatureWordInfo (Object)\fP
.IP \(bu 2
\fI\%DummyForceArrays (Object)\fP
.IP \(bu 2
\fI\%NumaCpuOptions (Object)\fP
.IP \(bu 2
\fI\%HmatLBMemoryHierarchy (Enum)\fP
.IP \(bu 2
\fI\%HmatLBDataType (Enum)\fP
.IP \(bu 2
\fI\%NumaHmatLBOptions (Object)\fP
.IP \(bu 2
\fI\%HmatCacheAssociativity (Enum)\fP
.IP \(bu 2
\fI\%HmatCacheWritePolicy (Enum)\fP
.IP \(bu 2
\fI\%NumaHmatCacheOptions (Object)\fP
.IP \(bu 2
\fI\%memsave (Command)\fP
.IP \(bu 2
\fI\%pmemsave (Command)\fP
.IP \(bu 2
\fI\%Memdev (Object)\fP
.IP \(bu 2
\fI\%query\-memdev (Command)\fP
.IP \(bu 2
\fI\%CpuInstanceProperties (Object)\fP
.IP \(bu 2
\fI\%HotpluggableCPU (Object)\fP
.IP \(bu 2
\fI\%query\-hotpluggable\-cpus (Command)\fP
.IP \(bu 2
\fI\%set\-numa\-node (Command)\fP
.IP \(bu 2
\fI\%balloon (Command)\fP
.IP \(bu 2
\fI\%BalloonInfo (Object)\fP
.IP \(bu 2
\fI\%query\-balloon (Command)\fP
.IP \(bu 2
\fI\%BALLOON_CHANGE (Event)\fP
.IP \(bu 2
\fI\%MemoryInfo (Object)\fP
.IP \(bu 2
\fI\%query\-memory\-size\-summary (Command)\fP
.IP \(bu 2
\fI\%PCDIMMDeviceInfo (Object)\fP
.IP \(bu 2
\fI\%VirtioPMEMDeviceInfo (Object)\fP
.IP \(bu 2
\fI\%VirtioMEMDeviceInfo (Object)\fP
.IP \(bu 2
\fI\%SgxEPCDeviceInfo (Object)\fP
.IP \(bu 2
\fI\%MemoryDeviceInfoKind (Enum)\fP
.IP \(bu 2
\fI\%PCDIMMDeviceInfoWrapper (Object)\fP
.IP \(bu 2
\fI\%VirtioPMEMDeviceInfoWrapper (Object)\fP
.IP \(bu 2
\fI\%VirtioMEMDeviceInfoWrapper (Object)\fP
.IP \(bu 2
\fI\%SgxEPCDeviceInfoWrapper (Object)\fP
.IP \(bu 2
\fI\%MemoryDeviceInfo (Object)\fP
.IP \(bu 2
\fI\%SgxEPC (Object)\fP
.IP \(bu 2
\fI\%SgxEPCProperties (Object)\fP
.IP \(bu 2
\fI\%query\-memory\-devices (Command)\fP
.IP \(bu 2
\fI\%MEMORY_DEVICE_SIZE_CHANGE (Event)\fP
.IP \(bu 2
\fI\%MEM_UNPLUG_ERROR (Event)\fP
.IP \(bu 2
\fI\%BootConfiguration (Object)\fP
.IP \(bu 2
\fI\%SMPConfiguration (Object)\fP
.IP \(bu 2
\fI\%x\-query\-irq (Command)\fP
.IP \(bu 2
\fI\%x\-query\-jit (Command)\fP
.IP \(bu 2
\fI\%x\-query\-numa (Command)\fP
.IP \(bu 2
\fI\%x\-query\-opcount (Command)\fP
.IP \(bu 2
\fI\%x\-query\-profile (Command)\fP
.IP \(bu 2
\fI\%x\-query\-ramblock (Command)\fP
.IP \(bu 2
\fI\%x\-query\-rdma (Command)\fP
.IP \(bu 2
\fI\%x\-query\-roms (Command)\fP
.IP \(bu 2
\fI\%x\-query\-usb (Command)\fP
.IP \(bu 2
\fI\%SmbiosEntryPointType (Enum)\fP
.IP \(bu 2
\fI\%MemorySizeConfiguration (Object)\fP
.IP \(bu 2
\fI\%dumpdtb (Command)\fP
.IP \(bu 2
\fI\%CpuModelInfo (Object)\fP
.IP \(bu 2
\fI\%CpuModelExpansionType (Enum)\fP
.IP \(bu 2
\fI\%CpuModelCompareResult (Enum)\fP
.IP \(bu 2
\fI\%CpuModelBaselineInfo (Object)\fP
.IP \(bu 2
\fI\%CpuModelCompareInfo (Object)\fP
.IP \(bu 2
\fI\%query\-cpu\-model\-comparison (Command)\fP
.IP \(bu 2
\fI\%query\-cpu\-model\-baseline (Command)\fP
.IP \(bu 2
\fI\%CpuModelExpansionInfo (Object)\fP
.IP \(bu 2
\fI\%query\-cpu\-model\-expansion (Command)\fP
.IP \(bu 2
\fI\%CpuDefinitionInfo (Object)\fP
.IP \(bu 2
\fI\%query\-cpu\-definitions (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Record/replay\fP
.INDENT 2.0
.IP \(bu 2
\fI\%ReplayMode (Enum)\fP
.IP \(bu 2
\fI\%ReplayInfo (Object)\fP
.IP \(bu 2
\fI\%query\-replay (Command)\fP
.IP \(bu 2
\fI\%replay\-break (Command)\fP
.IP \(bu 2
\fI\%replay\-delete\-break (Command)\fP
.IP \(bu 2
\fI\%replay\-seek (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Yank feature\fP
.INDENT 2.0
.IP \(bu 2
\fI\%YankInstanceType (Enum)\fP
.IP \(bu 2
\fI\%YankInstanceBlockNode (Object)\fP
.IP \(bu 2
\fI\%YankInstanceChardev (Object)\fP
.IP \(bu 2
\fI\%YankInstance (Object)\fP
.IP \(bu 2
\fI\%yank (Command)\fP
.IP \(bu 2
\fI\%query\-yank (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Miscellanea\fP
.INDENT 2.0
.IP \(bu 2
\fI\%add_client (Command)\fP
.IP \(bu 2
\fI\%NameInfo (Object)\fP
.IP \(bu 2
\fI\%query\-name (Command)\fP
.IP \(bu 2
\fI\%IOThreadInfo (Object)\fP
.IP \(bu 2
\fI\%query\-iothreads (Command)\fP
.IP \(bu 2
\fI\%stop (Command)\fP
.IP \(bu 2
\fI\%cont (Command)\fP
.IP \(bu 2
\fI\%x\-exit\-preconfig (Command)\fP
.IP \(bu 2
\fI\%human\-monitor\-command (Command)\fP
.IP \(bu 2
\fI\%getfd (Command)\fP
.IP \(bu 2
\fI\%closefd (Command)\fP
.IP \(bu 2
\fI\%AddfdInfo (Object)\fP
.IP \(bu 2
\fI\%add\-fd (Command)\fP
.IP \(bu 2
\fI\%remove\-fd (Command)\fP
.IP \(bu 2
\fI\%FdsetFdInfo (Object)\fP
.IP \(bu 2
\fI\%FdsetInfo (Object)\fP
.IP \(bu 2
\fI\%query\-fdsets (Command)\fP
.IP \(bu 2
\fI\%CommandLineParameterType (Enum)\fP
.IP \(bu 2
\fI\%CommandLineParameterInfo (Object)\fP
.IP \(bu 2
\fI\%CommandLineOptionInfo (Object)\fP
.IP \(bu 2
\fI\%query\-command\-line\-options (Command)\fP
.IP \(bu 2
\fI\%RTC_CHANGE (Event)\fP
.IP \(bu 2
\fI\%VFU_CLIENT_HANGUP (Event)\fP
.IP \(bu 2
\fI\%rtc\-reset\-reinjection (Command)\fP
.IP \(bu 2
\fI\%SevState (Enum)\fP
.IP \(bu 2
\fI\%SevInfo (Object)\fP
.IP \(bu 2
\fI\%query\-sev (Command)\fP
.IP \(bu 2
\fI\%SevLaunchMeasureInfo (Object)\fP
.IP \(bu 2
\fI\%query\-sev\-launch\-measure (Command)\fP
.IP \(bu 2
\fI\%SevCapability (Object)\fP
.IP \(bu 2
\fI\%query\-sev\-capabilities (Command)\fP
.IP \(bu 2
\fI\%sev\-inject\-launch\-secret (Command)\fP
.IP \(bu 2
\fI\%SevAttestationReport (Object)\fP
.IP \(bu 2
\fI\%query\-sev\-attestation\-report (Command)\fP
.IP \(bu 2
\fI\%dump\-skeys (Command)\fP
.IP \(bu 2
\fI\%GICCapability (Object)\fP
.IP \(bu 2
\fI\%query\-gic\-capabilities (Command)\fP
.IP \(bu 2
\fI\%SGXEPCSection (Object)\fP
.IP \(bu 2
\fI\%SGXInfo (Object)\fP
.IP \(bu 2
\fI\%query\-sgx (Command)\fP
.IP \(bu 2
\fI\%query\-sgx\-capabilities (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Audio\fP
.INDENT 2.0
.IP \(bu 2
\fI\%AudiodevPerDirectionOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevGenericOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevAlsaPerDirectionOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevAlsaOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevSndioOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevCoreaudioPerDirectionOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevCoreaudioOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevDsoundOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevJackPerDirectionOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevJackOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevOssPerDirectionOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevOssOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevPaPerDirectionOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevPaOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevSdlPerDirectionOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevSdlOptions (Object)\fP
.IP \(bu 2
\fI\%AudiodevWavOptions (Object)\fP
.IP \(bu 2
\fI\%AudioFormat (Enum)\fP
.IP \(bu 2
\fI\%AudiodevDriver (Enum)\fP
.IP \(bu 2
\fI\%Audiodev (Object)\fP
.UNINDENT
.IP \(bu 2
\fI\%ACPI\fP
.INDENT 2.0
.IP \(bu 2
\fI\%AcpiTableOptions (Object)\fP
.IP \(bu 2
\fI\%ACPISlotType (Enum)\fP
.IP \(bu 2
\fI\%ACPIOSTInfo (Object)\fP
.IP \(bu 2
\fI\%query\-acpi\-ospm\-status (Command)\fP
.IP \(bu 2
\fI\%ACPI_DEVICE_OST (Event)\fP
.UNINDENT
.IP \(bu 2
\fI\%PCI\fP
.INDENT 2.0
.IP \(bu 2
\fI\%PciMemoryRange (Object)\fP
.IP \(bu 2
\fI\%PciMemoryRegion (Object)\fP
.IP \(bu 2
\fI\%PciBusInfo (Object)\fP
.IP \(bu 2
\fI\%PciBridgeInfo (Object)\fP
.IP \(bu 2
\fI\%PciDeviceClass (Object)\fP
.IP \(bu 2
\fI\%PciDeviceId (Object)\fP
.IP \(bu 2
\fI\%PciDeviceInfo (Object)\fP
.IP \(bu 2
\fI\%PciInfo (Object)\fP
.IP \(bu 2
\fI\%query\-pci (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Statistics\fP
.INDENT 2.0
.IP \(bu 2
\fI\%StatsType (Enum)\fP
.IP \(bu 2
\fI\%StatsUnit (Enum)\fP
.IP \(bu 2
\fI\%StatsProvider (Enum)\fP
.IP \(bu 2
\fI\%StatsTarget (Enum)\fP
.IP \(bu 2
\fI\%StatsRequest (Object)\fP
.IP \(bu 2
\fI\%StatsVCPUFilter (Object)\fP
.IP \(bu 2
\fI\%StatsFilter (Object)\fP
.IP \(bu 2
\fI\%StatsValue (Alternate)\fP
.IP \(bu 2
\fI\%Stats (Object)\fP
.IP \(bu 2
\fI\%StatsResult (Object)\fP
.IP \(bu 2
\fI\%query\-stats (Command)\fP
.IP \(bu 2
\fI\%StatsSchemaValue (Object)\fP
.IP \(bu 2
\fI\%StatsSchema (Object)\fP
.IP \(bu 2
\fI\%query\-stats\-schemas (Command)\fP
.UNINDENT
.IP \(bu 2
\fI\%Virtio devices\fP
.INDENT 2.0
.IP \(bu 2
\fI\%VirtioInfo (Object)\fP
.IP \(bu 2
\fI\%x\-query\-virtio (Command)\fP
.IP \(bu 2
\fI\%VhostStatus (Object)\fP
.IP \(bu 2
\fI\%VirtioStatus (Object)\fP
.IP \(bu 2
\fI\%x\-query\-virtio\-status (Command)\fP
.IP \(bu 2
\fI\%VirtioDeviceStatus (Object)\fP
.IP \(bu 2
\fI\%VhostDeviceProtocols (Object)\fP
.IP \(bu 2
\fI\%VirtioDeviceFeatures (Object)\fP
.IP \(bu 2
\fI\%VirtQueueStatus (Object)\fP
.IP \(bu 2
\fI\%x\-query\-virtio\-queue\-status (Command)\fP
.IP \(bu 2
\fI\%VirtVhostQueueStatus (Object)\fP
.IP \(bu 2
\fI\%x\-query\-virtio\-vhost\-queue\-status (Command)\fP
.IP \(bu 2
\fI\%VirtioRingDesc (Object)\fP
.IP \(bu 2
\fI\%VirtioRingAvail (Object)\fP
.IP \(bu 2
\fI\%VirtioRingUsed (Object)\fP
.IP \(bu 2
\fI\%VirtioQueueElement (Object)\fP
.IP \(bu 2
\fI\%x\-query\-virtio\-queue\-element (Command)\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SH INTRODUCTION
This document describes all commands currently supported by QMP.
.sp
Most of the time their usage is exactly the same as in the user Monitor, this
means that any other document which also describe commands (the manpage,
QEMU\(aqs manual, etc) can and should be consulted.
.sp
QMP has two types of commands: regular and query commands. Regular commands
usually change the Virtual Machine\(aqs state someway, while query commands just
return information. The sections below are divided accordingly.
.sp
It\(aqs important to observe that all communication examples are formatted in
a reader\-friendly way, so that they\(aqre easier to understand. However, in real
protocol usage, they\(aqre emitted as a single line.
.sp
Also, the following notation is used to denote data flow:
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> data issued by the Client
<\- Server data response
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Please, refer to the QMP specification (docs/interop/qmp\-spec.txt) for
detailed information on the Server command and response formats.
.SH STABILITY CONSIDERATIONS
The current QMP command set (described in this file) may be useful for a
number of use cases, however it\(aqs limited and several commands have bad
defined semantics, specially with regard to command completion.
.sp
These problems are going to be solved incrementally in the next QEMU releases
and we\(aqre going to establish a deprecation policy for badly defined commands.
.sp
If you\(aqre planning to adopt QMP, please observe the following:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
The deprecation policy will take effect and be documented soon, please
check the documentation of each used command as soon as a new release of
QEMU is available
.IP 2. 3
DO NOT rely on anything which is not explicit documented
.IP 3. 3
Errors, in special, are not documented. Applications should NOT check
for specific errors classes or data (it\(aqs strongly recommended to only
check for the "error" key)
.UNINDENT
.UNINDENT
.UNINDENT
.SH QMP ERRORS
.SS \fBQapiErrorClass\fP (Enum)
.sp
QEMU error classes
.SS Values
.INDENT 0.0
.TP
.B \fBGenericError\fP
this is used for errors that don\(aqt require a specific error
class. This should be the default case for most errors
.TP
.B \fBCommandNotFound\fP
the requested command has not been found
.TP
.B \fBDeviceNotActive\fP
a device has failed to be become active
.TP
.B \fBDeviceNotFound\fP
the requested device has not been found
.TP
.B \fBKVMMissingCap\fP
the requested operation can\(aqt be fulfilled because a
required KVM capability is missing
.UNINDENT
.SS Since
.sp
1.2
.SH COMMON DATA TYPES
.SS \fBIoOperationType\fP (Enum)
.sp
An enumeration of the I/O operation types
.SS Values
.INDENT 0.0
.TP
.B \fBread\fP
read operation
.TP
.B \fBwrite\fP
write operation
.UNINDENT
.SS Since
.sp
2.1
.SS \fBOnOffAuto\fP (Enum)
.sp
An enumeration of three options: on, off, and auto
.SS Values
.INDENT 0.0
.TP
.B \fBauto\fP
QEMU selects the value between on and off
.TP
.B \fBon\fP
Enabled
.TP
.B \fBoff\fP
Disabled
.UNINDENT
.SS Since
.sp
2.2
.SS \fBOnOffSplit\fP (Enum)
.sp
An enumeration of three values: on, off, and split
.SS Values
.INDENT 0.0
.TP
.B \fBon\fP
Enabled
.TP
.B \fBoff\fP
Disabled
.TP
.B \fBsplit\fP
Mixed
.UNINDENT
.SS Since
.sp
2.6
.SS \fBString\fP (Object)
.sp
A fat type wrapping \(aqstr\(aq, to be embedded in lists.
.SS Members
.INDENT 0.0
.TP
.B \fBstr\fP: \fBstring\fP
Not documented
.UNINDENT
.SS Since
.sp
1.2
.SS \fBStrOrNull\fP (Alternate)
.sp
This is a string value or the explicit lack of a string (null
pointer in C).  Intended for cases when \(aqoptional absent\(aq already
has a different meaning.
.SS Members
.INDENT 0.0
.TP
.B \fBs\fP: \fBstring\fP
the string value
.TP
.B \fBn\fP: \fBnull\fP
no string value
.UNINDENT
.SS Since
.sp
2.10
.SS \fBOffAutoPCIBAR\fP (Enum)
.sp
An enumeration of options for specifying a PCI BAR
.SS Values
.INDENT 0.0
.TP
.B \fBoff\fP
The specified feature is disabled
.TP
.B \fBauto\fP
The PCI BAR for the feature is automatically selected
.TP
.B \fBbar0\fP
PCI BAR0 is used for the feature
.TP
.B \fBbar1\fP
PCI BAR1 is used for the feature
.TP
.B \fBbar2\fP
PCI BAR2 is used for the feature
.TP
.B \fBbar3\fP
PCI BAR3 is used for the feature
.TP
.B \fBbar4\fP
PCI BAR4 is used for the feature
.TP
.B \fBbar5\fP
PCI BAR5 is used for the feature
.UNINDENT
.SS Since
.sp
2.12
.SS \fBPCIELinkSpeed\fP (Enum)
.sp
An enumeration of PCIe link speeds in units of GT/s
.SS Values
.INDENT 0.0
.TP
.B \fB2_5\fP
2.5GT/s
.TP
.B \fB5\fP
5.0GT/s
.TP
.B \fB8\fP
8.0GT/s
.TP
.B \fB16\fP
16.0GT/s
.UNINDENT
.SS Since
.sp
4.0
.SS \fBPCIELinkWidth\fP (Enum)
.sp
An enumeration of PCIe link width
.SS Values
.INDENT 0.0
.TP
.B \fB1\fP
x1
.TP
.B \fB2\fP
x2
.TP
.B \fB4\fP
x4
.TP
.B \fB8\fP
x8
.TP
.B \fB12\fP
x12
.TP
.B \fB16\fP
x16
.TP
.B \fB32\fP
x32
.UNINDENT
.SS Since
.sp
4.0
.SS \fBHostMemPolicy\fP (Enum)
.sp
Host memory policy types
.SS Values
.INDENT 0.0
.TP
.B \fBdefault\fP
restore default policy, remove any nondefault policy
.TP
.B \fBpreferred\fP
set the preferred host nodes for allocation
.TP
.B \fBbind\fP
a strict policy that restricts memory allocation to the
host nodes specified
.TP
.B \fBinterleave\fP
memory allocations are interleaved across the set
of host nodes specified
.UNINDENT
.SS Since
.sp
2.1
.SS \fBNetFilterDirection\fP (Enum)
.sp
Indicates whether a netfilter is attached to a netdev\(aqs transmit queue or
receive queue or both.
.SS Values
.INDENT 0.0
.TP
.B \fBall\fP
the filter is attached both to the receive and the transmit
queue of the netdev (default).
.TP
.B \fBrx\fP
the filter is attached to the receive queue of the netdev,
where it will receive packets sent to the netdev.
.TP
.B \fBtx\fP
the filter is attached to the transmit queue of the netdev,
where it will receive packets sent by the netdev.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBGrabToggleKeys\fP (Enum)
.sp
Keys to toggle input\-linux between host and guest.
.SS Values
.INDENT 0.0
.TP
.B \fBctrl\-ctrl\fP
Not documented
.TP
.B \fBalt\-alt\fP
Not documented
.TP
.B \fBshift\-shift\fP
Not documented
.TP
.B \fBmeta\-meta\fP
Not documented
.TP
.B \fBscrolllock\fP
Not documented
.TP
.B \fBctrl\-scrolllock\fP
Not documented
.UNINDENT
.SS Since
.sp
4.0
.SS \fBHumanReadableText\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBhuman\-readable\-text\fP: \fBstring\fP
Formatted output intended for humans.
.UNINDENT
.SS Since
.sp
6.2
.SH SOCKET DATA TYPES
.SS \fBNetworkAddressFamily\fP (Enum)
.sp
The network address family
.SS Values
.INDENT 0.0
.TP
.B \fBipv4\fP
IPV4 family
.TP
.B \fBipv6\fP
IPV6 family
.TP
.B \fBunix\fP
unix socket
.TP
.B \fBvsock\fP
vsock family (since 2.8)
.TP
.B \fBunknown\fP
otherwise
.UNINDENT
.SS Since
.sp
2.1
.SS \fBInetSocketAddressBase\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBhost\fP: \fBstring\fP
host part of the address
.TP
.B \fBport\fP: \fBstring\fP
port part of the address
.UNINDENT
.SS \fBInetSocketAddress\fP (Object)
.sp
Captures a socket address or address range in the Internet namespace.
.SS Members
.INDENT 0.0
.TP
.B \fBnumeric\fP: \fBboolean\fP (optional)
true if the host/port are guaranteed to be numeric,
false if name resolution should be attempted. Defaults to false.
(Since 2.9)
.TP
.B \fBto\fP: \fBint\fP (optional)
If present, this is range of possible addresses, with port
between \fBport\fP and \fBto\fP\&.
.TP
.B \fBipv4\fP: \fBboolean\fP (optional)
whether to accept IPv4 addresses, default try both IPv4 and IPv6
.TP
.B \fBipv6\fP: \fBboolean\fP (optional)
whether to accept IPv6 addresses, default try both IPv4 and IPv6
.TP
.B \fBkeep\-alive\fP: \fBboolean\fP (optional)
enable keep\-alive when connecting to this socket. Not supported
for passive sockets. (Since 4.2)
.TP
\fBmptcp\fP: \fBboolean\fP (optional) (\fBIf: \fP\fBHAVE_IPPROTO_MPTCP\fP)
enable multi\-path TCP. (Since 6.1)
.TP
.B The members of \fBInetSocketAddressBase\fP
.UNINDENT
.SS Since
.sp
1.3
.SS \fBUnixSocketAddress\fP (Object)
.sp
Captures a socket address in the local ("Unix socket") namespace.
.SS Members
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
filesystem path to use
.TP
\fBabstract\fP: \fBboolean\fP (optional) (\fBIf: \fP\fBCONFIG_LINUX\fP)
if true, this is a Linux abstract socket address.  \fBpath\fP
will be prefixed by a null byte, and optionally padded
with null bytes.  Defaults to false.  (Since 5.1)
.TP
\fBtight\fP: \fBboolean\fP (optional) (\fBIf: \fP\fBCONFIG_LINUX\fP)
if false, pad an abstract socket address with enough null
bytes to make it fill struct sockaddr_un member sun_path.
Defaults to true.  (Since 5.1)
.UNINDENT
.SS Since
.sp
1.3
.SS \fBVsockSocketAddress\fP (Object)
.sp
Captures a socket address in the vsock namespace.
.SS Members
.INDENT 0.0
.TP
.B \fBcid\fP: \fBstring\fP
unique host identifier
.TP
.B \fBport\fP: \fBstring\fP
port
.UNINDENT
.SS Note
.sp
string types are used to allow for possible future hostname or
service resolution support.
.SS Since
.sp
2.8
.SS \fBInetSocketAddressWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBInetSocketAddress\fP
Not documented
.UNINDENT
.SS Since
.sp
1.3
.SS \fBUnixSocketAddressWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBUnixSocketAddress\fP
Not documented
.UNINDENT
.SS Since
.sp
1.3
.SS \fBVsockSocketAddressWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBVsockSocketAddress\fP
Not documented
.UNINDENT
.SS Since
.sp
2.8
.SS \fBStringWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBString\fP
Not documented
.UNINDENT
.SS Since
.sp
1.3
.SS \fBSocketAddressLegacy\fP (Object)
.sp
Captures the address of a socket, which could also be a named file descriptor
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBSocketAddressType\fP
Not documented
.TP
.B The members of \fBInetSocketAddressWrapper\fP when \fBtype\fP is \fB"inet"\fP
.TP
.B The members of \fBUnixSocketAddressWrapper\fP when \fBtype\fP is \fB"unix"\fP
.TP
.B The members of \fBVsockSocketAddressWrapper\fP when \fBtype\fP is \fB"vsock"\fP
.TP
.B The members of \fBStringWrapper\fP when \fBtype\fP is \fB"fd"\fP
.UNINDENT
.SS Note
.sp
This type is deprecated in favor of SocketAddress.  The
difference between SocketAddressLegacy and SocketAddress is that the
latter has fewer {} on the wire.
.SS Since
.sp
1.3
.SS \fBSocketAddressType\fP (Enum)
.sp
Available SocketAddress types
.SS Values
.INDENT 0.0
.TP
.B \fBinet\fP
Internet address
.TP
.B \fBunix\fP
Unix domain socket
.TP
.B \fBvsock\fP
VMCI address
.TP
.B \fBfd\fP
decimal is for file descriptor number, otherwise a file descriptor name.
Named file descriptors are permitted in monitor commands, in combination
with the \(aqgetfd\(aq command. Decimal file descriptors are permitted at
startup or other contexts where no monitor context is active.
.UNINDENT
.SS Since
.sp
2.9
.SS \fBSocketAddress\fP (Object)
.sp
Captures the address of a socket, which could also be a named file
descriptor
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBSocketAddressType\fP
Transport type
.TP
.B The members of \fBInetSocketAddress\fP when \fBtype\fP is \fB"inet"\fP
.TP
.B The members of \fBUnixSocketAddress\fP when \fBtype\fP is \fB"unix"\fP
.TP
.B The members of \fBVsockSocketAddress\fP when \fBtype\fP is \fB"vsock"\fP
.TP
.B The members of \fBString\fP when \fBtype\fP is \fB"fd"\fP
.UNINDENT
.SS Since
.sp
2.9
.SH VM RUN STATE
.SS \fBRunState\fP (Enum)
.sp
An enumeration of VM run states.
.SS Values
.INDENT 0.0
.TP
.B \fBdebug\fP
QEMU is running on a debugger
.TP
.B \fBfinish\-migrate\fP
guest is paused to finish the migration process
.TP
.B \fBinmigrate\fP
guest is paused waiting for an incoming migration.  Note
that this state does not tell whether the machine will start at the
end of the migration.  This depends on the command\-line \-S option and
any invocation of \(aqstop\(aq or \(aqcont\(aq that has happened since QEMU was
started.
.TP
.B \fBinternal\-error\fP
An internal error that prevents further guest execution
has occurred
.TP
.B \fBio\-error\fP
the last IOP has failed and the device is configured to pause
on I/O errors
.TP
.B \fBpaused\fP
guest has been paused via the \(aqstop\(aq command
.TP
.B \fBpostmigrate\fP
guest is paused following a successful \(aqmigrate\(aq
.TP
.B \fBprelaunch\fP
QEMU was started with \-S and guest has not started
.TP
.B \fBrestore\-vm\fP
guest is paused to restore VM state
.TP
.B \fBrunning\fP
guest is actively running
.TP
.B \fBsave\-vm\fP
guest is paused to save the VM state
.TP
.B \fBshutdown\fP
guest is shut down (and \-no\-shutdown is in use)
.TP
.B \fBsuspended\fP
guest is suspended (ACPI S3)
.TP
.B \fBwatchdog\fP
the watchdog action is configured to pause and has been triggered
.TP
.B \fBguest\-panicked\fP
guest has been panicked as a result of guest OS panic
.TP
.B \fBcolo\fP
guest is paused to save/restore VM state under colo checkpoint,
VM can not get into this state unless colo capability is enabled
for migration. (since 2.8)
.UNINDENT
.SS \fBShutdownCause\fP (Enum)
.sp
An enumeration of reasons for a Shutdown.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
No shutdown request pending
.TP
.B \fBhost\-error\fP
An error prevents further use of guest
.TP
.B \fBhost\-qmp\-quit\fP
Reaction to the QMP command \(aqquit\(aq
.TP
.B \fBhost\-qmp\-system\-reset\fP
Reaction to the QMP command \(aqsystem_reset\(aq
.TP
.B \fBhost\-signal\fP
Reaction to a signal, such as SIGINT
.TP
.B \fBhost\-ui\fP
Reaction to a UI event, like window close
.TP
.B \fBguest\-shutdown\fP
Guest shutdown/suspend request, via ACPI or other
hardware\-specific means
.TP
.B \fBguest\-reset\fP
Guest reset request, and command line turns that into
a shutdown
.TP
.B \fBguest\-panic\fP
Guest panicked, and command line turns that into a shutdown
.TP
.B \fBsubsystem\-reset\fP
Partial guest reset that does not trigger QMP events and
ignores \-\-no\-reboot. This is useful for sanitizing
hypercalls on s390 that are used during kexec/kdump/boot
.TP
.B \fBsnapshot\-load\fP
A snapshot is being loaded by the record & replay
subsystem. This value is used only within QEMU.  It
doesn\(aqt occur in QMP. (since 7.2)
.UNINDENT
.SS \fBStatusInfo\fP (Object)
.sp
Information about VCPU run state
.SS Members
.INDENT 0.0
.TP
.B \fBrunning\fP: \fBboolean\fP
true if all VCPUs are runnable, false if not runnable
.TP
.B \fBsinglestep\fP: \fBboolean\fP
true if VCPUs are in single\-step mode
.TP
.B \fBstatus\fP: \fBRunState\fP
the virtual machine \fBRunState\fP
.UNINDENT
.SS Since
.sp
0.14
.SS Notes
.sp
\fBsinglestep\fP is enabled through the GDB stub
.SS \fBquery\-status\fP (Command)
.sp
Query the run status of all VCPUs
.SS Returns
.sp
\fBStatusInfo\fP reflecting all VCPUs
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-status" }
<\- { "return": { "running": true,
                 "singlestep": false,
                 "status": "running" } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBSHUTDOWN\fP (Event)
.sp
Emitted when the virtual machine has shut down, indicating that qemu is
about to exit.
.SS Arguments
.INDENT 0.0
.TP
.B \fBguest\fP: \fBboolean\fP
If true, the shutdown was triggered by a guest request (such as
a guest\-initiated ACPI shutdown request or other hardware\-specific action)
rather than a host request (such as sending qemu a SIGINT). (since 2.10)
.TP
.B \fBreason\fP: \fBShutdownCause\fP
The \fBShutdownCause\fP which resulted in the SHUTDOWN. (since 4.0)
.UNINDENT
.SS Note
.sp
If the command\-line option "\-no\-shutdown" has been specified, qemu will
not exit, and a STOP event will eventually follow the SHUTDOWN event
.SS Since
.sp
0.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "SHUTDOWN",
     "data": { "guest": true, "reason": "guest\-shutdown" },
     "timestamp": { "seconds": 1267040730, "microseconds": 682951 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBPOWERDOWN\fP (Event)
.sp
Emitted when the virtual machine is powered down through the power control
system, such as via ACPI.
.SS Since
.sp
0.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "POWERDOWN",
     "timestamp": { "seconds": 1267040730, "microseconds": 682951 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBRESET\fP (Event)
.sp
Emitted when the virtual machine is reset
.SS Arguments
.INDENT 0.0
.TP
.B \fBguest\fP: \fBboolean\fP
If true, the reset was triggered by a guest request (such as
a guest\-initiated ACPI reboot request or other hardware\-specific action)
rather than a host request (such as the QMP command system_reset).
(since 2.10)
.TP
.B \fBreason\fP: \fBShutdownCause\fP
The \fBShutdownCause\fP of the RESET. (since 4.0)
.UNINDENT
.SS Since
.sp
0.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "RESET",
     "data": { "guest": false, "reason": "guest\-reset" },
     "timestamp": { "seconds": 1267041653, "microseconds": 9518 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBSTOP\fP (Event)
.sp
Emitted when the virtual machine is stopped
.SS Since
.sp
0.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "STOP",
     "timestamp": { "seconds": 1267041730, "microseconds": 281295 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBRESUME\fP (Event)
.sp
Emitted when the virtual machine resumes execution
.SS Since
.sp
0.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "RESUME",
     "timestamp": { "seconds": 1271770767, "microseconds": 582542 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBSUSPEND\fP (Event)
.sp
Emitted when guest enters a hardware suspension state, for example, S3 state,
which is sometimes called standby state
.SS Since
.sp
1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "SUSPEND",
     "timestamp": { "seconds": 1344456160, "microseconds": 309119 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBSUSPEND_DISK\fP (Event)
.sp
Emitted when guest enters a hardware suspension state with data saved on
disk, for example, S4 state, which is sometimes called hibernate state
.SS Note
.sp
QEMU shuts down (similar to event \fBSHUTDOWN\fP) when entering this state
.SS Since
.sp
1.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\-   { "event": "SUSPEND_DISK",
       "timestamp": { "seconds": 1344456160, "microseconds": 309119 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBWAKEUP\fP (Event)
.sp
Emitted when the guest has woken up from suspend state and is running
.SS Since
.sp
1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "WAKEUP",
     "timestamp": { "seconds": 1344522075, "microseconds": 745528 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBWATCHDOG\fP (Event)
.sp
Emitted when the watchdog device\(aqs timer is expired
.SS Arguments
.INDENT 0.0
.TP
.B \fBaction\fP: \fBWatchdogAction\fP
action that has been taken
.UNINDENT
.SS Note
.sp
If action is "reset", "shutdown", or "pause" the WATCHDOG event is
followed respectively by the RESET, SHUTDOWN, or STOP events
.SS Note
.sp
This event is rate\-limited.
.SS Since
.sp
0.13
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "WATCHDOG",
     "data": { "action": "reset" },
     "timestamp": { "seconds": 1267061043, "microseconds": 959568 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBWatchdogAction\fP (Enum)
.sp
An enumeration of the actions taken when the watchdog device\(aqs timer is
expired
.SS Values
.INDENT 0.0
.TP
.B \fBreset\fP
system resets
.TP
.B \fBshutdown\fP
system shutdown, note that it is similar to \fBpowerdown\fP, which
tries to set to system status and notify guest
.TP
.B \fBpoweroff\fP
system poweroff, the emulator program exits
.TP
.B \fBpause\fP
system pauses, similar to \fBstop\fP
.TP
.B \fBdebug\fP
system enters debug state
.TP
.B \fBnone\fP
nothing is done
.TP
.B \fBinject\-nmi\fP
a non\-maskable interrupt is injected into the first VCPU (all
VCPUS on x86) (since 2.4)
.UNINDENT
.SS Since
.sp
2.1
.SS \fBRebootAction\fP (Enum)
.sp
Possible QEMU actions upon guest reboot
.SS Values
.INDENT 0.0
.TP
.B \fBreset\fP
Reset the VM
.TP
.B \fBshutdown\fP
Shutdown the VM and exit, according to the shutdown action
.UNINDENT
.SS Since
.sp
6.0
.SS \fBShutdownAction\fP (Enum)
.sp
Possible QEMU actions upon guest shutdown
.SS Values
.INDENT 0.0
.TP
.B \fBpoweroff\fP
Shutdown the VM and exit
.TP
.B \fBpause\fP
pause the VM
.UNINDENT
.SS Since
.sp
6.0
.SS \fBPanicAction\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
Continue VM execution
.TP
.B \fBpause\fP
Pause the VM
.TP
.B \fBshutdown\fP
Shutdown the VM and exit, according to the shutdown action
.TP
.B \fBexit\-failure\fP
Shutdown the VM and exit with nonzero status
(since 7.1)
.UNINDENT
.SS Since
.sp
6.0
.SS \fBwatchdog\-set\-action\fP (Command)
.sp
Set watchdog action
.SS Arguments
.INDENT 0.0
.TP
.B \fBaction\fP: \fBWatchdogAction\fP
Not documented
.UNINDENT
.SS Since
.sp
2.11
.SS \fBset\-action\fP (Command)
.sp
Set the actions that will be taken by the emulator in response to guest
events.
.SS Arguments
.INDENT 0.0
.TP
.B \fBreboot\fP: \fBRebootAction\fP (optional)
\fBRebootAction\fP action taken on guest reboot.
.TP
.B \fBshutdown\fP: \fBShutdownAction\fP (optional)
\fBShutdownAction\fP action taken on guest shutdown.
.TP
.B \fBpanic\fP: \fBPanicAction\fP (optional)
\fBPanicAction\fP action taken on guest panic.
.TP
.B \fBwatchdog\fP: \fBWatchdogAction\fP (optional)
\fBWatchdogAction\fP action taken when watchdog timer expires .
.UNINDENT
.SS Returns
.sp
Nothing on success.
.SS Since
.sp
6.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "set\-action",
     "arguments": { "reboot": "shutdown",
                    "shutdown" : "pause",
                    "panic": "pause",
                    "watchdog": "inject\-nmi" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBGUEST_PANICKED\fP (Event)
.sp
Emitted when guest OS panic is detected
.SS Arguments
.INDENT 0.0
.TP
.B \fBaction\fP: \fBGuestPanicAction\fP
action that has been taken, currently always "pause"
.TP
.B \fBinfo\fP: \fBGuestPanicInformation\fP (optional)
information about a panic (since 2.9)
.UNINDENT
.SS Since
.sp
1.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "GUEST_PANICKED",
     "data": { "action": "pause" },
     "timestamp": { "seconds": 1648245231, "microseconds": 900001 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBGUEST_CRASHLOADED\fP (Event)
.sp
Emitted when guest OS crash loaded is detected
.SS Arguments
.INDENT 0.0
.TP
.B \fBaction\fP: \fBGuestPanicAction\fP
action that has been taken, currently always "run"
.TP
.B \fBinfo\fP: \fBGuestPanicInformation\fP (optional)
information about a panic
.UNINDENT
.SS Since
.sp
5.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "GUEST_CRASHLOADED",
     "data": { "action": "run" },
     "timestamp": { "seconds": 1648245259, "microseconds": 893771 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBGuestPanicAction\fP (Enum)
.sp
An enumeration of the actions taken when guest OS panic is detected
.SS Values
.INDENT 0.0
.TP
.B \fBpause\fP
system pauses
.TP
.B \fBpoweroff\fP
Not documented
.TP
.B \fBrun\fP
Not documented
.UNINDENT
.SS Since
.sp
2.1 (poweroff since 2.8, run since 5.0)
.SS \fBGuestPanicInformationType\fP (Enum)
.sp
An enumeration of the guest panic information types
.SS Values
.INDENT 0.0
.TP
.B \fBhyper\-v\fP
hyper\-v guest panic information type
.TP
.B \fBs390\fP
s390 guest panic information type (Since: 2.12)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBGuestPanicInformation\fP (Object)
.sp
Information about a guest panic
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBGuestPanicInformationType\fP
Crash type that defines the hypervisor specific information
.TP
.B The members of \fBGuestPanicInformationHyperV\fP when \fBtype\fP is \fB"hyper\-v"\fP
.TP
.B The members of \fBGuestPanicInformationS390\fP when \fBtype\fP is \fB"s390"\fP
.UNINDENT
.SS Since
.sp
2.9
.SS \fBGuestPanicInformationHyperV\fP (Object)
.sp
Hyper\-V specific guest panic information (HV crash MSRs)
.SS Members
.INDENT 0.0
.TP
.B \fBarg1\fP: \fBint\fP
Not documented
.TP
.B \fBarg2\fP: \fBint\fP
Not documented
.TP
.B \fBarg3\fP: \fBint\fP
Not documented
.TP
.B \fBarg4\fP: \fBint\fP
Not documented
.TP
.B \fBarg5\fP: \fBint\fP
Not documented
.UNINDENT
.SS Since
.sp
2.9
.SS \fBS390CrashReason\fP (Enum)
.sp
Reason why the CPU is in a crashed state.
.SS Values
.INDENT 0.0
.TP
.B \fBunknown\fP
no crash reason was set
.TP
.B \fBdisabled\-wait\fP
the CPU has entered a disabled wait state
.TP
.B \fBextint\-loop\fP
clock comparator or cpu timer interrupt with new PSW enabled
for external interrupts
.TP
.B \fBpgmint\-loop\fP
program interrupt with BAD new PSW
.TP
.B \fBopint\-loop\fP
operation exception interrupt with invalid code at the program
interrupt new PSW
.UNINDENT
.SS Since
.sp
2.12
.SS \fBGuestPanicInformationS390\fP (Object)
.sp
S390 specific guest panic information (PSW)
.SS Members
.INDENT 0.0
.TP
.B \fBcore\fP: \fBint\fP
core id of the CPU that crashed
.TP
.B \fBpsw\-mask\fP: \fBint\fP
control fields of guest PSW
.TP
.B \fBpsw\-addr\fP: \fBint\fP
guest instruction address
.TP
.B \fBreason\fP: \fBS390CrashReason\fP
guest crash reason
.UNINDENT
.SS Since
.sp
2.12
.SS \fBMEMORY_FAILURE\fP (Event)
.sp
Emitted when a memory failure occurs on host side.
.SS Arguments
.INDENT 0.0
.TP
.B \fBrecipient\fP: \fBMemoryFailureRecipient\fP
recipient is defined as \fBMemoryFailureRecipient\fP\&.
.TP
.B \fBaction\fP: \fBMemoryFailureAction\fP
action that has been taken. action is defined as \fBMemoryFailureAction\fP\&.
.TP
.B \fBflags\fP: \fBMemoryFailureFlags\fP
flags for MemoryFailureAction. action is defined as \fBMemoryFailureFlags\fP\&.
.UNINDENT
.SS Since
.sp
5.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "MEMORY_FAILURE",
     "data": { "recipient": "hypervisor",
               "action": "fatal",
               "flags": { "action\-required": false,
                          "recursive": false } },
     "timestamp": { "seconds": 1267061043, "microseconds": 959568 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMemoryFailureRecipient\fP (Enum)
.sp
Hardware memory failure occurs, handled by recipient.
.SS Values
.INDENT 0.0
.TP
.B \fBhypervisor\fP
memory failure at QEMU process address space.
(none guest memory, but used by QEMU itself).
.TP
.B \fBguest\fP
memory failure at guest memory,
.UNINDENT
.SS Since
.sp
5.2
.SS \fBMemoryFailureAction\fP (Enum)
.sp
Actions taken by QEMU in response to a hardware memory failure.
.SS Values
.INDENT 0.0
.TP
.B \fBignore\fP
the memory failure could be ignored.  This will only be the case
for action\-optional failures.
.TP
.B \fBinject\fP
memory failure occurred in guest memory, the guest enabled MCE
handling mechanism, and QEMU could inject the MCE into the guest
successfully.
.TP
.B \fBfatal\fP
the failure is unrecoverable.  This occurs for action\-required
failures if the recipient is the hypervisor; QEMU will exit.
.TP
.B \fBreset\fP
the failure is unrecoverable but confined to the guest.  This
occurs if the recipient is a guest guest which is not ready
to handle memory failures.
.UNINDENT
.SS Since
.sp
5.2
.SS \fBMemoryFailureFlags\fP (Object)
.sp
Additional information on memory failures.
.SS Members
.INDENT 0.0
.TP
.B \fBaction\-required\fP: \fBboolean\fP
whether a memory failure event is action\-required
or action\-optional (e.g. a failure during memory scrub).
.TP
.B \fBrecursive\fP: \fBboolean\fP
whether the failure occurred while the previous
failure was still in progress.
.UNINDENT
.SS Since
.sp
5.2
.SS \fBNotifyVmexitOption\fP (Enum)
.sp
An enumeration of the options specified when enabling notify VM exit
.SS Values
.INDENT 0.0
.TP
.B \fBrun\fP
enable the feature, do nothing and continue if the notify VM exit happens.
.TP
.B \fBinternal\-error\fP
enable the feature, raise a internal error if the notify
VM exit happens.
.TP
.B \fBdisable\fP
disable the feature.
.UNINDENT
.SS Since
.sp
7.2
.SH CRYPTOGRAPHY
.SS \fBQCryptoTLSCredsEndpoint\fP (Enum)
.sp
The type of network endpoint that will be using the credentials.
Most types of credential require different setup / structures
depending on whether they will be used in a server versus a
client.
.SS Values
.INDENT 0.0
.TP
.B \fBclient\fP
the network endpoint is acting as the client
.TP
.B \fBserver\fP
the network endpoint is acting as the server
.UNINDENT
.SS Since
.sp
2.5
.SS \fBQCryptoSecretFormat\fP (Enum)
.sp
The data format that the secret is provided in
.SS Values
.INDENT 0.0
.TP
.B \fBraw\fP
raw bytes. When encoded in JSON only valid UTF\-8 sequences can be used
.TP
.B \fBbase64\fP
arbitrary base64 encoded binary data
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoHashAlgorithm\fP (Enum)
.sp
The supported algorithms for computing content digests
.SS Values
.INDENT 0.0
.TP
.B \fBmd5\fP
MD5. Should not be used in any new code, legacy compat only
.TP
.B \fBsha1\fP
SHA\-1. Should not be used in any new code, legacy compat only
.TP
.B \fBsha224\fP
SHA\-224. (since 2.7)
.TP
.B \fBsha256\fP
SHA\-256. Current recommended strong hash.
.TP
.B \fBsha384\fP
SHA\-384. (since 2.7)
.TP
.B \fBsha512\fP
SHA\-512. (since 2.7)
.TP
.B \fBripemd160\fP
RIPEMD\-160. (since 2.7)
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoCipherAlgorithm\fP (Enum)
.sp
The supported algorithms for content encryption ciphers
.SS Values
.INDENT 0.0
.TP
.B \fBaes\-128\fP
AES with 128 bit / 16 byte keys
.TP
.B \fBaes\-192\fP
AES with 192 bit / 24 byte keys
.TP
.B \fBaes\-256\fP
AES with 256 bit / 32 byte keys
.TP
.B \fBdes\fP
DES with 56 bit / 8 byte keys. Do not use except in VNC. (since 6.1)
.TP
.B \fB3des\fP
3DES(EDE) with 192 bit / 24 byte keys (since 2.9)
.TP
.B \fBcast5\-128\fP
Cast5 with 128 bit / 16 byte keys
.TP
.B \fBserpent\-128\fP
Serpent with 128 bit / 16 byte keys
.TP
.B \fBserpent\-192\fP
Serpent with 192 bit / 24 byte keys
.TP
.B \fBserpent\-256\fP
Serpent with 256 bit / 32 byte keys
.TP
.B \fBtwofish\-128\fP
Twofish with 128 bit / 16 byte keys
.TP
.B \fBtwofish\-192\fP
Twofish with 192 bit / 24 byte keys
.TP
.B \fBtwofish\-256\fP
Twofish with 256 bit / 32 byte keys
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoCipherMode\fP (Enum)
.sp
The supported modes for content encryption ciphers
.SS Values
.INDENT 0.0
.TP
.B \fBecb\fP
Electronic Code Book
.TP
.B \fBcbc\fP
Cipher Block Chaining
.TP
.B \fBxts\fP
XEX with tweaked code book and ciphertext stealing
.TP
.B \fBctr\fP
Counter (Since 2.8)
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoIVGenAlgorithm\fP (Enum)
.sp
The supported algorithms for generating initialization
vectors for full disk encryption. The \(aqplain\(aq generator
should not be used for disks with sector numbers larger
than 2^32, except where compatibility with pre\-existing
Linux dm\-crypt volumes is required.
.SS Values
.INDENT 0.0
.TP
.B \fBplain\fP
64\-bit sector number truncated to 32\-bits
.TP
.B \fBplain64\fP
64\-bit sector number
.TP
.B \fBessiv\fP
64\-bit sector number encrypted with a hash of the encryption key
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoBlockFormat\fP (Enum)
.sp
The supported full disk encryption formats
.SS Values
.INDENT 0.0
.TP
.B \fBqcow\fP
QCow/QCow2 built\-in AES\-CBC encryption. Use only
for liberating data from old images.
.TP
.B \fBluks\fP
LUKS encryption format. Recommended for new images
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoBlockOptionsBase\fP (Object)
.sp
The common options that apply to all full disk
encryption formats
.SS Members
.INDENT 0.0
.TP
.B \fBformat\fP: \fBQCryptoBlockFormat\fP
the encryption format
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoBlockOptionsQCow\fP (Object)
.sp
The options that apply to QCow/QCow2 AES\-CBC encryption format
.SS Members
.INDENT 0.0
.TP
.B \fBkey\-secret\fP: \fBstring\fP (optional)
the ID of a QCryptoSecret object providing the
decryption key. Mandatory except when probing image for
metadata only.
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoBlockOptionsLUKS\fP (Object)
.sp
The options that apply to LUKS encryption format
.SS Members
.INDENT 0.0
.TP
.B \fBkey\-secret\fP: \fBstring\fP (optional)
the ID of a QCryptoSecret object providing the
decryption key. Mandatory except when probing image for
metadata only.
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoBlockCreateOptionsLUKS\fP (Object)
.sp
The options that apply to LUKS encryption format initialization
.SS Members
.INDENT 0.0
.TP
.B \fBcipher\-alg\fP: \fBQCryptoCipherAlgorithm\fP (optional)
the cipher algorithm for data encryption
Currently defaults to \(aqaes\-256\(aq.
.TP
.B \fBcipher\-mode\fP: \fBQCryptoCipherMode\fP (optional)
the cipher mode for data encryption
Currently defaults to \(aqxts\(aq
.TP
.B \fBivgen\-alg\fP: \fBQCryptoIVGenAlgorithm\fP (optional)
the initialization vector generator
Currently defaults to \(aqplain64\(aq
.TP
.B \fBivgen\-hash\-alg\fP: \fBQCryptoHashAlgorithm\fP (optional)
the initialization vector generator hash
Currently defaults to \(aqsha256\(aq
.TP
.B \fBhash\-alg\fP: \fBQCryptoHashAlgorithm\fP (optional)
the master key hash algorithm
Currently defaults to \(aqsha256\(aq
.TP
.B \fBiter\-time\fP: \fBint\fP (optional)
number of milliseconds to spend in
PBKDF passphrase processing. Currently defaults
to 2000. (since 2.8)
.TP
.B The members of \fBQCryptoBlockOptionsLUKS\fP
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoBlockOpenOptions\fP (Object)
.sp
The options that are available for all encryption formats
when opening an existing volume
.SS Members
.INDENT 0.0
.TP
.B The members of \fBQCryptoBlockOptionsBase\fP
.TP
.B The members of \fBQCryptoBlockOptionsQCow\fP when \fBformat\fP is \fB"qcow"\fP
.TP
.B The members of \fBQCryptoBlockOptionsLUKS\fP when \fBformat\fP is \fB"luks"\fP
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoBlockCreateOptions\fP (Object)
.sp
The options that are available for all encryption formats
when initializing a new volume
.SS Members
.INDENT 0.0
.TP
.B The members of \fBQCryptoBlockOptionsBase\fP
.TP
.B The members of \fBQCryptoBlockOptionsQCow\fP when \fBformat\fP is \fB"qcow"\fP
.TP
.B The members of \fBQCryptoBlockCreateOptionsLUKS\fP when \fBformat\fP is \fB"luks"\fP
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQCryptoBlockInfoBase\fP (Object)
.sp
The common information that applies to all full disk
encryption formats
.SS Members
.INDENT 0.0
.TP
.B \fBformat\fP: \fBQCryptoBlockFormat\fP
the encryption format
.UNINDENT
.SS Since
.sp
2.7
.SS \fBQCryptoBlockInfoLUKSSlot\fP (Object)
.sp
Information about the LUKS block encryption key
slot options
.SS Members
.INDENT 0.0
.TP
.B \fBactive\fP: \fBboolean\fP
whether the key slot is currently in use
.TP
.B \fBkey\-offset\fP: \fBint\fP
offset to the key material in bytes
.TP
.B \fBiters\fP: \fBint\fP (optional)
number of PBKDF2 iterations for key material
.TP
.B \fBstripes\fP: \fBint\fP (optional)
number of stripes for splitting key material
.UNINDENT
.SS Since
.sp
2.7
.SS \fBQCryptoBlockInfoLUKS\fP (Object)
.sp
Information about the LUKS block encryption options
.SS Members
.INDENT 0.0
.TP
.B \fBcipher\-alg\fP: \fBQCryptoCipherAlgorithm\fP
the cipher algorithm for data encryption
.TP
.B \fBcipher\-mode\fP: \fBQCryptoCipherMode\fP
the cipher mode for data encryption
.TP
.B \fBivgen\-alg\fP: \fBQCryptoIVGenAlgorithm\fP
the initialization vector generator
.TP
.B \fBivgen\-hash\-alg\fP: \fBQCryptoHashAlgorithm\fP (optional)
the initialization vector generator hash
.TP
.B \fBhash\-alg\fP: \fBQCryptoHashAlgorithm\fP
the master key hash algorithm
.TP
.B \fBpayload\-offset\fP: \fBint\fP
offset to the payload data in bytes
.TP
.B \fBmaster\-key\-iters\fP: \fBint\fP
number of PBKDF2 iterations for key material
.TP
.B \fBuuid\fP: \fBstring\fP
unique identifier for the volume
.TP
.B \fBslots\fP: \fBarray of QCryptoBlockInfoLUKSSlot\fP
information about each key slot
.UNINDENT
.SS Since
.sp
2.7
.SS \fBQCryptoBlockInfo\fP (Object)
.sp
Information about the block encryption options
.SS Members
.INDENT 0.0
.TP
.B The members of \fBQCryptoBlockInfoBase\fP
.TP
.B The members of \fBQCryptoBlockInfoLUKS\fP when \fBformat\fP is \fB"luks"\fP
.UNINDENT
.SS Since
.sp
2.7
.SS \fBQCryptoBlockLUKSKeyslotState\fP (Enum)
.sp
Defines state of keyslots that are affected by the update
.SS Values
.INDENT 0.0
.TP
.B \fBactive\fP
The slots contain the given password and marked as active
.TP
.B \fBinactive\fP
The slots are erased (contain garbage) and marked as inactive
.UNINDENT
.SS Since
.sp
5.1
.SS \fBQCryptoBlockAmendOptionsLUKS\fP (Object)
.sp
This struct defines the update parameters that activate/de\-activate set
of keyslots
.SS Members
.INDENT 0.0
.TP
.B \fBstate\fP: \fBQCryptoBlockLUKSKeyslotState\fP
the desired state of the keyslots
.TP
.B \fBnew\-secret\fP: \fBstring\fP (optional)
The ID of a QCryptoSecret object providing the password to be
written into added active keyslots
.TP
.B \fBold\-secret\fP: \fBstring\fP (optional)
Optional (for deactivation only)
If given will deactivate all keyslots that
match password located in QCryptoSecret with this ID
.TP
.B \fBiter\-time\fP: \fBint\fP (optional)
Optional (for activation only)
Number of milliseconds to spend in
PBKDF passphrase processing for the newly activated keyslot.
Currently defaults to 2000.
.TP
.B \fBkeyslot\fP: \fBint\fP (optional)
Optional. ID of the keyslot to activate/deactivate.
For keyslot activation, keyslot should not be active already
(this is unsafe to update an active keyslot),
but possible if \(aqforce\(aq parameter is given.
If keyslot is not given, first free keyslot will be written.
.sp
For keyslot deactivation, this parameter specifies the exact
keyslot to deactivate
.TP
.B \fBsecret\fP: \fBstring\fP (optional)
Optional. The ID of a QCryptoSecret object providing the
password to use to retrieve current master key.
Defaults to the same secret that was used to open the image
.UNINDENT
.SS Since
.sp
5.1
.SS \fBQCryptoBlockAmendOptions\fP (Object)
.sp
The options that are available for all encryption formats
when amending encryption settings
.SS Members
.INDENT 0.0
.TP
.B The members of \fBQCryptoBlockOptionsBase\fP
.TP
.B The members of \fBQCryptoBlockAmendOptionsLUKS\fP when \fBformat\fP is \fB"luks"\fP
.UNINDENT
.SS Since
.sp
5.1
.SS \fBSecretCommonProperties\fP (Object)
.sp
Properties for objects of classes derived from secret\-common.
.SS Members
.INDENT 0.0
.TP
.B \fBloaded\fP: \fBboolean\fP (optional)
if true, the secret is loaded immediately when applying this option
and will probably fail when processing the next option. Don\(aqt use;
only provided for compatibility. (default: false)
.TP
.B \fBformat\fP: \fBQCryptoSecretFormat\fP (optional)
the data format that the secret is provided in (default: raw)
.TP
.B \fBkeyid\fP: \fBstring\fP (optional)
the name of another secret that should be used to decrypt the
provided data. If not present, the data is assumed to be unencrypted.
.TP
.B \fBiv\fP: \fBstring\fP (optional)
the random initialization vector used for encryption of this particular
secret. Should be a base64 encrypted string of the 16\-byte IV. Mandatory
if \fBkeyid\fP is given. Ignored if \fBkeyid\fP is absent.
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBloaded\fP is deprecated.  Setting true doesn\(aqt make sense,
and false is already the default.
.UNINDENT
.SS Since
.sp
2.6
.SS \fBSecretProperties\fP (Object)
.sp
Properties for secret objects.
.sp
Either \fBdata\fP or \fBfile\fP must be provided, but not both.
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBstring\fP (optional)
the associated with the secret from
.TP
.B \fBfile\fP: \fBstring\fP (optional)
the filename to load the data associated with the secret from
.TP
.B The members of \fBSecretCommonProperties\fP
.UNINDENT
.SS Since
.sp
2.6
.SS \fBSecretKeyringProperties\fP (Object)
.sp
Properties for secret_keyring objects.
.SS Members
.INDENT 0.0
.TP
.B \fBserial\fP: \fBint\fP
serial number that identifies a key to get from the kernel
.TP
.B The members of \fBSecretCommonProperties\fP
.UNINDENT
.SS Since
.sp
5.1
.SS \fBTlsCredsProperties\fP (Object)
.sp
Properties for objects of classes derived from tls\-creds.
.SS Members
.INDENT 0.0
.TP
.B \fBverify\-peer\fP: \fBboolean\fP (optional)
if true the peer credentials will be verified once the
handshake is completed.  This is a no\-op for anonymous
credentials. (default: true)
.TP
.B \fBdir\fP: \fBstring\fP (optional)
the path of the directory that contains the credential files
.TP
.B \fBendpoint\fP: \fBQCryptoTLSCredsEndpoint\fP (optional)
whether the QEMU network backend that uses the credentials will be
acting as a client or as a server (default: client)
.TP
.B \fBpriority\fP: \fBstring\fP (optional)
a gnutls priority string as described at
\fI\%https://gnutls.org/manual/html_node/Priority\-Strings.html\fP
.UNINDENT
.SS Since
.sp
2.5
.SS \fBTlsCredsAnonProperties\fP (Object)
.sp
Properties for tls\-creds\-anon objects.
.SS Members
.INDENT 0.0
.TP
.B \fBloaded\fP: \fBboolean\fP (optional)
if true, the credentials are loaded immediately when applying this
option and will ignore options that are processed later. Don\(aqt use;
only provided for compatibility. (default: false)
.TP
.B The members of \fBTlsCredsProperties\fP
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBloaded\fP is deprecated.  Setting true doesn\(aqt make sense,
and false is already the default.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBTlsCredsPskProperties\fP (Object)
.sp
Properties for tls\-creds\-psk objects.
.SS Members
.INDENT 0.0
.TP
.B \fBloaded\fP: \fBboolean\fP (optional)
if true, the credentials are loaded immediately when applying this
option and will ignore options that are processed later. Don\(aqt use;
only provided for compatibility. (default: false)
.TP
.B \fBusername\fP: \fBstring\fP (optional)
the username which will be sent to the server.  For clients only.
If absent, "qemu" is sent and the property will read back as an
empty string.
.TP
.B The members of \fBTlsCredsProperties\fP
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBloaded\fP is deprecated.  Setting true doesn\(aqt make sense,
and false is already the default.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBTlsCredsX509Properties\fP (Object)
.sp
Properties for tls\-creds\-x509 objects.
.SS Members
.INDENT 0.0
.TP
.B \fBloaded\fP: \fBboolean\fP (optional)
if true, the credentials are loaded immediately when applying this
option and will ignore options that are processed later. Don\(aqt use;
only provided for compatibility. (default: false)
.TP
.B \fBsanity\-check\fP: \fBboolean\fP (optional)
if true, perform some sanity checks before using the
credentials (default: true)
.TP
.B \fBpasswordid\fP: \fBstring\fP (optional)
For the server\-key.pem and client\-key.pem files which contain
sensitive private keys, it is possible to use an encrypted
version by providing the \fBpasswordid\fP parameter.  This provides
the ID of a previously created secret object containing the
password for decryption.
.TP
.B The members of \fBTlsCredsProperties\fP
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBloaded\fP is deprecated.  Setting true doesn\(aqt make sense,
and false is already the default.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBQCryptoAkCipherAlgorithm\fP (Enum)
.sp
The supported algorithms for asymmetric encryption ciphers
.SS Values
.INDENT 0.0
.TP
.B \fBrsa\fP
RSA algorithm
.UNINDENT
.SS Since
.sp
7.1
.SS \fBQCryptoAkCipherKeyType\fP (Enum)
.sp
The type of asymmetric keys.
.SS Values
.INDENT 0.0
.TP
.B \fBpublic\fP
Not documented
.TP
.B \fBprivate\fP
Not documented
.UNINDENT
.SS Since
.sp
7.1
.SS \fBQCryptoRSAPaddingAlgorithm\fP (Enum)
.sp
The padding algorithm for RSA.
.SS Values
.INDENT 0.0
.TP
.B \fBraw\fP
no padding used
.TP
.B \fBpkcs1\fP
pkcs1#v1.5
.UNINDENT
.SS Since
.sp
7.1
.SS \fBQCryptoAkCipherOptionsRSA\fP (Object)
.sp
Specific parameters for RSA algorithm.
.SS Members
.INDENT 0.0
.TP
.B \fBhash\-alg\fP: \fBQCryptoHashAlgorithm\fP
QCryptoHashAlgorithm
.TP
.B \fBpadding\-alg\fP: \fBQCryptoRSAPaddingAlgorithm\fP
QCryptoRSAPaddingAlgorithm
.UNINDENT
.SS Since
.sp
7.1
.SS \fBQCryptoAkCipherOptions\fP (Object)
.sp
The options that are available for all asymmetric key algorithms
when creating a new QCryptoAkCipher.
.SS Members
.INDENT 0.0
.TP
.B \fBalg\fP: \fBQCryptoAkCipherAlgorithm\fP
Not documented
.TP
.B The members of \fBQCryptoAkCipherOptionsRSA\fP when \fBalg\fP is \fB"rsa"\fP
.UNINDENT
.SS Since
.sp
7.1
.SH BLOCK DEVICES
.SS Block core (VM unrelated)
.SS Background jobs
.SS \fBJobType\fP (Enum)
.sp
Type of a background job.
.SS Values
.INDENT 0.0
.TP
.B \fBcommit\fP
block commit job type, see "block\-commit"
.TP
.B \fBstream\fP
block stream job type, see "block\-stream"
.TP
.B \fBmirror\fP
drive mirror job type, see "drive\-mirror"
.TP
.B \fBbackup\fP
drive backup job type, see "drive\-backup"
.TP
.B \fBcreate\fP
image creation job type, see "blockdev\-create" (since 3.0)
.TP
.B \fBamend\fP
image options amend job type, see "x\-blockdev\-amend" (since 5.1)
.TP
.B \fBsnapshot\-load\fP
snapshot load job type, see "snapshot\-load" (since 6.0)
.TP
.B \fBsnapshot\-save\fP
snapshot save job type, see "snapshot\-save" (since 6.0)
.TP
.B \fBsnapshot\-delete\fP
snapshot delete job type, see "snapshot\-delete" (since 6.0)
.UNINDENT
.SS Since
.sp
1.7
.SS \fBJobStatus\fP (Enum)
.sp
Indicates the present state of a given job in its lifetime.
.SS Values
.INDENT 0.0
.TP
.B \fBundefined\fP
Erroneous, default state. Should not ever be visible.
.TP
.B \fBcreated\fP
The job has been created, but not yet started.
.TP
.B \fBrunning\fP
The job is currently running.
.TP
.B \fBpaused\fP
The job is running, but paused. The pause may be requested by
either the QMP user or by internal processes.
.TP
.B \fBready\fP
The job is running, but is ready for the user to signal completion.
This is used for long\-running jobs like mirror that are designed to
run indefinitely.
.TP
.B \fBstandby\fP
The job is ready, but paused. This is nearly identical to \fBpaused\fP\&.
The job may return to \fBready\fP or otherwise be canceled.
.TP
.B \fBwaiting\fP
The job is waiting for other jobs in the transaction to converge
to the waiting state. This status will likely not be visible for
the last job in a transaction.
.TP
.B \fBpending\fP
The job has finished its work, but has finalization steps that it
needs to make prior to completing. These changes will require
manual intervention via \fBjob\-finalize\fP if auto\-finalize was set to
false. These pending changes may still fail.
.TP
.B \fBaborting\fP
The job is in the process of being aborted, and will finish with
an error. The job will afterwards report that it is \fBconcluded\fP\&.
This status may not be visible to the management process.
.TP
.B \fBconcluded\fP
The job has finished all work. If auto\-dismiss was set to false,
the job will remain in the query list until it is dismissed via
\fBjob\-dismiss\fP\&.
.TP
.B \fBnull\fP
The job is in the process of being dismantled. This state should not
ever be visible externally.
.UNINDENT
.SS Since
.sp
2.12
.SS \fBJobVerb\fP (Enum)
.sp
Represents command verbs that can be applied to a job.
.SS Values
.INDENT 0.0
.TP
.B \fBcancel\fP
see \fBjob\-cancel\fP
.TP
.B \fBpause\fP
see \fBjob\-pause\fP
.TP
.B \fBresume\fP
see \fBjob\-resume\fP
.TP
.B \fBset\-speed\fP
see \fBblock\-job\-set\-speed\fP
.TP
.B \fBcomplete\fP
see \fBjob\-complete\fP
.TP
.B \fBdismiss\fP
see \fBjob\-dismiss\fP
.TP
.B \fBfinalize\fP
see \fBjob\-finalize\fP
.UNINDENT
.SS Since
.sp
2.12
.SS \fBJOB_STATUS_CHANGE\fP (Event)
.sp
Emitted when a job transitions to a different status.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The job identifier
.TP
.B \fBstatus\fP: \fBJobStatus\fP
The new job status
.UNINDENT
.SS Since
.sp
3.0
.SS \fBjob\-pause\fP (Command)
.sp
Pause an active job.
.sp
This command returns immediately after marking the active job for pausing.
Pausing an already paused job is an error.
.sp
The job will pause as soon as possible, which means transitioning into the
PAUSED state if it was RUNNING, or into STANDBY if it was READY. The
corresponding JOB_STATUS_CHANGE event will be emitted.
.sp
Cancelling a paused job automatically resumes it.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The job identifier.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBjob\-resume\fP (Command)
.sp
Resume a paused job.
.sp
This command returns immediately after resuming a paused job. Resuming an
already running job is an error.
.sp
\fBid\fP : The job identifier.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
Not documented
.UNINDENT
.SS Since
.sp
3.0
.SS \fBjob\-cancel\fP (Command)
.sp
Instruct an active background job to cancel at the next opportunity.
This command returns immediately after marking the active job for
cancellation.
.sp
The job will cancel as soon as possible and then emit a JOB_STATUS_CHANGE
event. Usually, the status will change to ABORTING, but it is possible that
a job successfully completes (e.g. because it was almost done and there was
no opportunity to cancel earlier than completing the job) and transitions to
PENDING instead.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The job identifier.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBjob\-complete\fP (Command)
.sp
Manually trigger completion of an active job in the READY state.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The job identifier.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBjob\-dismiss\fP (Command)
.sp
Deletes a job that is in the CONCLUDED state. This command only needs to be
run explicitly for jobs that don\(aqt have automatic dismiss enabled.
.sp
This command will refuse to operate on any job that has not yet reached its
terminal state, JOB_STATUS_CONCLUDED. For jobs that make use of JOB_READY
event, job\-cancel or job\-complete will still need to be used as appropriate.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The job identifier.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBjob\-finalize\fP (Command)
.sp
Instructs all jobs in a transaction (or a single job if it is not part of any
transaction) to finalize any graph changes and do any necessary cleanup. This
command requires that all involved jobs are in the PENDING state.
.sp
For jobs in a transaction, instructing one job to finalize will force
ALL jobs in the transaction to finalize, so it is only necessary to instruct
a single member job to finalize.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The identifier of any job in the transaction, or of a job that is not
part of any transaction.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBJobInfo\fP (Object)
.sp
Information about a job.
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The job identifier
.TP
.B \fBtype\fP: \fBJobType\fP
The kind of job that is being performed
.TP
.B \fBstatus\fP: \fBJobStatus\fP
Current job state/status
.TP
.B \fBcurrent\-progress\fP: \fBint\fP
Progress made until now. The unit is arbitrary and the
value can only meaningfully be used for the ratio of
\fBcurrent\-progress\fP to \fBtotal\-progress\fP\&. The value is
monotonically increasing.
.TP
.B \fBtotal\-progress\fP: \fBint\fP
Estimated \fBcurrent\-progress\fP value at the completion of
the job. This value can arbitrarily change while the
job is running, in both directions.
.TP
.B \fBerror\fP: \fBstring\fP (optional)
If this field is present, the job failed; if it is
still missing in the CONCLUDED state, this indicates
successful completion.
.sp
The value is a human\-readable error message to describe
the reason for the job failure. It should not be parsed
by applications.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBquery\-jobs\fP (Command)
.sp
Return information about jobs.
.SS Returns
.sp
a list with a \fBJobInfo\fP for each active job
.SS Since
.sp
3.0
.SS \fBSnapshotInfo\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
unique snapshot id
.TP
.B \fBname\fP: \fBstring\fP
user chosen name
.TP
.B \fBvm\-state\-size\fP: \fBint\fP
size of the VM state
.TP
.B \fBdate\-sec\fP: \fBint\fP
UTC date of the snapshot in seconds
.TP
.B \fBdate\-nsec\fP: \fBint\fP
fractional part in nano seconds to be used with date\-sec
.TP
.B \fBvm\-clock\-sec\fP: \fBint\fP
VM clock relative to boot in seconds
.TP
.B \fBvm\-clock\-nsec\fP: \fBint\fP
fractional part in nano seconds to be used with vm\-clock\-sec
.TP
.B \fBicount\fP: \fBint\fP (optional)
Current instruction count. Appears when execution record/replay
is enabled. Used for "time\-traveling" to match the moment
in the recorded execution with the snapshots. This counter may
be obtained through \fBquery\-replay\fP command (since 5.2)
.UNINDENT
.SS Since
.sp
1.3
.SS \fBImageInfoSpecificQCow2EncryptionBase\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBformat\fP: \fBBlockdevQcow2EncryptionFormat\fP
The encryption format
.UNINDENT
.SS Since
.sp
2.10
.SS \fBImageInfoSpecificQCow2Encryption\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B The members of \fBImageInfoSpecificQCow2EncryptionBase\fP
.TP
.B The members of \fBQCryptoBlockInfoLUKS\fP when \fBformat\fP is \fB"luks"\fP
.UNINDENT
.SS Since
.sp
2.10
.SS \fBImageInfoSpecificQCow2\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBcompat\fP: \fBstring\fP
compatibility level
.TP
.B \fBdata\-file\fP: \fBstring\fP (optional)
the filename of the external data file that is stored in the
image and used as a default for opening the image (since: 4.0)
.TP
.B \fBdata\-file\-raw\fP: \fBboolean\fP (optional)
True if the external data file must stay valid as a
standalone (read\-only) raw image without looking at qcow2
metadata (since: 4.0)
.TP
.B \fBextended\-l2\fP: \fBboolean\fP (optional)
true if the image has extended L2 entries; only valid for
compat >= 1.1 (since 5.2)
.TP
.B \fBlazy\-refcounts\fP: \fBboolean\fP (optional)
on or off; only valid for compat >= 1.1
.TP
.B \fBcorrupt\fP: \fBboolean\fP (optional)
true if the image has been marked corrupt; only valid for
compat >= 1.1 (since 2.2)
.TP
.B \fBrefcount\-bits\fP: \fBint\fP
width of a refcount entry in bits (since 2.3)
.TP
.B \fBencrypt\fP: \fBImageInfoSpecificQCow2Encryption\fP (optional)
details about encryption parameters; only set if image
is encrypted (since 2.10)
.TP
.B \fBbitmaps\fP: \fBarray of Qcow2BitmapInfo\fP (optional)
A list of qcow2 bitmap details (since 4.0)
.TP
.B \fBcompression\-type\fP: \fBQcow2CompressionType\fP
the image cluster compression method (since 5.1)
.UNINDENT
.SS Since
.sp
1.7
.SS \fBImageInfoSpecificVmdk\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBcreate\-type\fP: \fBstring\fP
The create type of VMDK image
.TP
.B \fBcid\fP: \fBint\fP
Content id of image
.TP
.B \fBparent\-cid\fP: \fBint\fP
Parent VMDK image\(aqs cid
.TP
.B \fBextents\fP: \fBarray of ImageInfo\fP
List of extent files
.UNINDENT
.SS Since
.sp
1.7
.SS \fBImageInfoSpecificRbd\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBencryption\-format\fP: \fBRbdImageEncryptionFormat\fP (optional)
Image encryption format
.UNINDENT
.SS Since
.sp
6.1
.SS \fBImageInfoSpecificKind\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBluks\fP
Since 2.7
.TP
.B \fBrbd\fP
Since 6.1
.TP
.B \fBqcow2\fP
Not documented
.TP
.B \fBvmdk\fP
Not documented
.UNINDENT
.SS Since
.sp
1.7
.SS \fBImageInfoSpecificQCow2Wrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBImageInfoSpecificQCow2\fP
Not documented
.UNINDENT
.SS Since
.sp
1.7
.SS \fBImageInfoSpecificVmdkWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBImageInfoSpecificVmdk\fP
Not documented
.UNINDENT
.SS Since
.sp
6.1
.SS \fBImageInfoSpecificLUKSWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBQCryptoBlockInfoLUKS\fP
Not documented
.UNINDENT
.SS Since
.sp
2.7
.SS \fBImageInfoSpecificRbdWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBImageInfoSpecificRbd\fP
Not documented
.UNINDENT
.SS Since
.sp
6.1
.SS \fBImageInfoSpecific\fP (Object)
.sp
A discriminated record of image format specific information structures.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBImageInfoSpecificKind\fP
Not documented
.TP
.B The members of \fBImageInfoSpecificQCow2Wrapper\fP when \fBtype\fP is \fB"qcow2"\fP
.TP
.B The members of \fBImageInfoSpecificVmdkWrapper\fP when \fBtype\fP is \fB"vmdk"\fP
.TP
.B The members of \fBImageInfoSpecificLUKSWrapper\fP when \fBtype\fP is \fB"luks"\fP
.TP
.B The members of \fBImageInfoSpecificRbdWrapper\fP when \fBtype\fP is \fB"rbd"\fP
.UNINDENT
.SS Since
.sp
1.7
.SS \fBImageInfo\fP (Object)
.sp
Information about a QEMU image file
.SS Members
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
name of the image file
.TP
.B \fBformat\fP: \fBstring\fP
format of the image file
.TP
.B \fBvirtual\-size\fP: \fBint\fP
maximum capacity in bytes of the image
.TP
.B \fBactual\-size\fP: \fBint\fP (optional)
actual size on disk in bytes of the image
.TP
.B \fBdirty\-flag\fP: \fBboolean\fP (optional)
true if image is not cleanly closed
.TP
.B \fBcluster\-size\fP: \fBint\fP (optional)
size of a cluster in bytes
.TP
.B \fBencrypted\fP: \fBboolean\fP (optional)
true if the image is encrypted
.TP
.B \fBcompressed\fP: \fBboolean\fP (optional)
true if the image is compressed (Since 1.7)
.TP
.B \fBbacking\-filename\fP: \fBstring\fP (optional)
name of the backing file
.TP
.B \fBfull\-backing\-filename\fP: \fBstring\fP (optional)
full path of the backing file
.TP
.B \fBbacking\-filename\-format\fP: \fBstring\fP (optional)
the format of the backing file
.TP
.B \fBsnapshots\fP: \fBarray of SnapshotInfo\fP (optional)
list of VM snapshots
.TP
.B \fBbacking\-image\fP: \fBImageInfo\fP (optional)
info of the backing image (since 1.6)
.TP
.B \fBformat\-specific\fP: \fBImageInfoSpecific\fP (optional)
structure supplying additional format\-specific
information (since 1.7)
.UNINDENT
.SS Since
.sp
1.3
.SS \fBImageCheck\fP (Object)
.sp
Information about a QEMU image file check
.SS Members
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
name of the image file checked
.TP
.B \fBformat\fP: \fBstring\fP
format of the image file checked
.TP
.B \fBcheck\-errors\fP: \fBint\fP
number of unexpected errors occurred during check
.TP
.B \fBimage\-end\-offset\fP: \fBint\fP (optional)
offset (in bytes) where the image ends, this
field is present if the driver for the image format
supports it
.TP
.B \fBcorruptions\fP: \fBint\fP (optional)
number of corruptions found during the check if any
.TP
.B \fBleaks\fP: \fBint\fP (optional)
number of leaks found during the check if any
.TP
.B \fBcorruptions\-fixed\fP: \fBint\fP (optional)
number of corruptions fixed during the check
if any
.TP
.B \fBleaks\-fixed\fP: \fBint\fP (optional)
number of leaks fixed during the check if any
.TP
.B \fBtotal\-clusters\fP: \fBint\fP (optional)
total number of clusters, this field is present
if the driver for the image format supports it
.TP
.B \fBallocated\-clusters\fP: \fBint\fP (optional)
total number of allocated clusters, this
field is present if the driver for the image format
supports it
.TP
.B \fBfragmented\-clusters\fP: \fBint\fP (optional)
total number of fragmented clusters, this
field is present if the driver for the image format
supports it
.TP
.B \fBcompressed\-clusters\fP: \fBint\fP (optional)
total number of compressed clusters, this
field is present if the driver for the image format
supports it
.UNINDENT
.SS Since
.sp
1.4
.SS \fBMapEntry\fP (Object)
.sp
Mapping information from a virtual block range to a host file range
.SS Members
.INDENT 0.0
.TP
.B \fBstart\fP: \fBint\fP
virtual (guest) offset of the first byte described by this
entry
.TP
.B \fBlength\fP: \fBint\fP
the number of bytes of the mapped virtual range
.TP
.B \fBdata\fP: \fBboolean\fP
reading the image will actually read data from a file (in
particular, if \fBoffset\fP is present this means that the sectors
are not simply preallocated, but contain actual data in raw
format)
.TP
.B \fBzero\fP: \fBboolean\fP
whether the virtual blocks read as zeroes
.TP
.B \fBdepth\fP: \fBint\fP
number of layers (0 = top image, 1 = top image\(aqs backing
file, ..., n \- 1 = bottom image (where n is the number of
images in the chain)) before reaching one for which the
range is allocated
.TP
.B \fBpresent\fP: \fBboolean\fP
true if this layer provides the data, false if adding a backing
layer could impact this region (since 6.1)
.TP
.B \fBoffset\fP: \fBint\fP (optional)
if present, the image file stores the data for this range
in raw format at the given (host) offset
.TP
.B \fBfilename\fP: \fBstring\fP (optional)
filename that is referred to by \fBoffset\fP
.UNINDENT
.SS Since
.sp
2.6
.SS \fBBlockdevCacheInfo\fP (Object)
.sp
Cache mode information for a block device
.SS Members
.INDENT 0.0
.TP
.B \fBwriteback\fP: \fBboolean\fP
true if writeback mode is enabled
.TP
.B \fBdirect\fP: \fBboolean\fP
true if the host page cache is bypassed (O_DIRECT)
.TP
.B \fBno\-flush\fP: \fBboolean\fP
true if flush requests are ignored for the device
.UNINDENT
.SS Since
.sp
2.3
.SS \fBBlockDeviceInfo\fP (Object)
.sp
Information about the backing device for a block device.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBstring\fP
the filename of the backing device
.TP
.B \fBnode\-name\fP: \fBstring\fP (optional)
the name of the block driver node (Since 2.0)
.TP
.B \fBro\fP: \fBboolean\fP
true if the backing device was open read\-only
.TP
.B \fBdrv\fP: \fBstring\fP
the name of the block format used to open the backing device. As of
0.14 this can be: \(aqblkdebug\(aq, \(aqbochs\(aq, \(aqcloop\(aq, \(aqcow\(aq, \(aqdmg\(aq,
\(aqfile\(aq, \(aqfile\(aq, \(aqftp\(aq, \(aqftps\(aq, \(aqhost_cdrom\(aq, \(aqhost_device\(aq,
\(aqhttp\(aq, \(aqhttps\(aq, \(aqluks\(aq, \(aqnbd\(aq, \(aqparallels\(aq, \(aqqcow\(aq,
\(aqqcow2\(aq, \(aqraw\(aq, \(aqvdi\(aq, \(aqvmdk\(aq, \(aqvpc\(aq, \(aqvvfat\(aq
2.2: \(aqarchipelago\(aq added, \(aqcow\(aq dropped
2.3: \(aqhost_floppy\(aq deprecated
2.5: \(aqhost_floppy\(aq dropped
2.6: \(aqluks\(aq added
2.8: \(aqreplication\(aq added, \(aqtftp\(aq dropped
2.9: \(aqarchipelago\(aq dropped
.TP
.B \fBbacking_file\fP: \fBstring\fP (optional)
the name of the backing file (for copy\-on\-write)
.TP
.B \fBbacking_file_depth\fP: \fBint\fP
number of files in the backing file chain (since: 1.2)
.TP
.B \fBencrypted\fP: \fBboolean\fP
true if the backing device is encrypted
.TP
.B \fBdetect_zeroes\fP: \fBBlockdevDetectZeroesOptions\fP
detect and optimize zero writes (Since 2.1)
.TP
.B \fBbps\fP: \fBint\fP
total throughput limit in bytes per second is specified
.TP
.B \fBbps_rd\fP: \fBint\fP
read throughput limit in bytes per second is specified
.TP
.B \fBbps_wr\fP: \fBint\fP
write throughput limit in bytes per second is specified
.TP
.B \fBiops\fP: \fBint\fP
total I/O operations per second is specified
.TP
.B \fBiops_rd\fP: \fBint\fP
read I/O operations per second is specified
.TP
.B \fBiops_wr\fP: \fBint\fP
write I/O operations per second is specified
.TP
.B \fBimage\fP: \fBImageInfo\fP
the info of image used (since: 1.6)
.TP
.B \fBbps_max\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B total throughput limit during bursts,
in bytes (Since 1.7)
.UNINDENT
.TP
.B \fBbps_rd_max\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B read throughput limit during bursts,
in bytes (Since 1.7)
.UNINDENT
.TP
.B \fBbps_wr_max\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B write throughput limit during bursts,
in bytes (Since 1.7)
.UNINDENT
.TP
.B \fBiops_max\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B total I/O operations per second during bursts,
in bytes (Since 1.7)
.UNINDENT
.TP
.B \fBiops_rd_max\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B read I/O operations per second during bursts,
in bytes (Since 1.7)
.UNINDENT
.TP
.B \fBiops_wr_max\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B write I/O operations per second during bursts,
in bytes (Since 1.7)
.UNINDENT
.TP
.B \fBbps_max_length\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B maximum length of the \fBbps_max\fP burst
period, in seconds. (Since 2.6)
.UNINDENT
.TP
.B \fBbps_rd_max_length\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B maximum length of the \fBbps_rd_max\fP
burst period, in seconds. (Since 2.6)
.UNINDENT
.TP
.B \fBbps_wr_max_length\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B maximum length of the \fBbps_wr_max\fP
burst period, in seconds. (Since 2.6)
.UNINDENT
.TP
.B \fBiops_max_length\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B maximum length of the \fBiops\fP burst
period, in seconds. (Since 2.6)
.UNINDENT
.TP
.B \fBiops_rd_max_length\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B maximum length of the \fBiops_rd_max\fP
burst period, in seconds. (Since 2.6)
.UNINDENT
.TP
.B \fBiops_wr_max_length\fP: \fBint\fP (optional)
.INDENT 7.0
.TP
.B maximum length of the \fBiops_wr_max\fP
burst period, in seconds. (Since 2.6)
.UNINDENT
.TP
.B \fBiops_size\fP: \fBint\fP (optional)
an I/O size in bytes (Since 1.7)
.TP
.B \fBgroup\fP: \fBstring\fP (optional)
throttle group name (Since 2.4)
.TP
.B \fBcache\fP: \fBBlockdevCacheInfo\fP
the cache mode used for the block device (since: 2.3)
.TP
.B \fBwrite_threshold\fP: \fBint\fP
configured write threshold for the device.
0 if disabled. (Since 2.3)
.TP
.B \fBdirty\-bitmaps\fP: \fBarray of BlockDirtyInfo\fP (optional)
dirty bitmaps information (only present if node
has one or more dirty bitmaps) (Since 4.2)
.UNINDENT
.SS Since
.sp
0.14
.SS \fBBlockDeviceIoStatus\fP (Enum)
.sp
An enumeration of block device I/O status.
.SS Values
.INDENT 0.0
.TP
.B \fBok\fP
The last I/O operation has succeeded
.TP
.B \fBfailed\fP
The last I/O operation has failed
.TP
.B \fBnospace\fP
The last I/O operation has failed due to a no\-space condition
.UNINDENT
.SS Since
.sp
1.0
.SS \fBBlockDirtyInfo\fP (Object)
.sp
Block dirty bitmap information.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP (optional)
the name of the dirty bitmap (Since 2.4)
.TP
.B \fBcount\fP: \fBint\fP
number of dirty bytes according to the dirty bitmap
.TP
.B \fBgranularity\fP: \fBint\fP
granularity of the dirty bitmap in bytes (since 1.4)
.TP
.B \fBrecording\fP: \fBboolean\fP
true if the bitmap is recording new writes from the guest.
Replaces \fBactive\fP and \fBdisabled\fP statuses. (since 4.0)
.TP
.B \fBbusy\fP: \fBboolean\fP
true if the bitmap is in\-use by some operation (NBD or jobs)
and cannot be modified via QMP or used by another operation.
Replaces \fBlocked\fP and \fBfrozen\fP statuses. (since 4.0)
.TP
.B \fBpersistent\fP: \fBboolean\fP
true if the bitmap was stored on disk, is scheduled to be stored
on disk, or both. (since 4.0)
.TP
.B \fBinconsistent\fP: \fBboolean\fP (optional)
true if this is a persistent bitmap that was improperly
stored. Implies \fBpersistent\fP to be true; \fBrecording\fP and
\fBbusy\fP to be false. This bitmap cannot be used. To remove
it, use \fBblock\-dirty\-bitmap\-remove\fP\&. (Since 4.0)
.UNINDENT
.SS Since
.sp
1.3
.SS \fBQcow2BitmapInfoFlags\fP (Enum)
.sp
An enumeration of flags that a bitmap can report to the user.
.SS Values
.INDENT 0.0
.TP
.B \fBin\-use\fP
This flag is set by any process actively modifying the qcow2 file,
and cleared when the updated bitmap is flushed to the qcow2 image.
The presence of this flag in an offline image means that the bitmap
was not saved correctly after its last usage, and may contain
inconsistent data.
.TP
.B \fBauto\fP
The bitmap must reflect all changes of the virtual disk by any
application that would write to this qcow2 file.
.UNINDENT
.SS Since
.sp
4.0
.SS \fBQcow2BitmapInfo\fP (Object)
.sp
Qcow2 bitmap information.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the name of the bitmap
.TP
.B \fBgranularity\fP: \fBint\fP
granularity of the bitmap in bytes
.TP
.B \fBflags\fP: \fBarray of Qcow2BitmapInfoFlags\fP
flags of the bitmap
.UNINDENT
.SS Since
.sp
4.0
.SS \fBBlockLatencyHistogramInfo\fP (Object)
.sp
Block latency histogram.
.SS Members
.INDENT 0.0
.TP
.B \fBboundaries\fP: \fBarray of int\fP
list of interval boundary values in nanoseconds, all greater
than zero and in ascending order.
For example, the list [10, 50, 100] produces the following
histogram intervals: [0, 10), [10, 50), [50, 100), [100, +inf).
.TP
.B \fBbins\fP: \fBarray of int\fP
list of io request counts corresponding to histogram intervals.
len(\fBbins\fP) = len(\fBboundaries\fP) + 1
For the example above, \fBbins\fP may be something like [3, 1, 5, 2],
and corresponding histogram looks like:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
5|           *
4|           *
3| *         *
2| *         *    *
1| *    *    *    *
 +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
     10   50   100
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
4.0
.SS \fBBlockInfo\fP (Object)
.sp
Block device information.  This structure describes a virtual device and
the backing device associated with it.
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
The device name associated with the virtual device.
.TP
.B \fBqdev\fP: \fBstring\fP (optional)
The qdev ID, or if no ID is assigned, the QOM path of the block
device. (since 2.10)
.TP
.B \fBtype\fP: \fBstring\fP
This field is returned only for compatibility reasons, it should
not be used (always returns \(aqunknown\(aq)
.TP
.B \fBremovable\fP: \fBboolean\fP
True if the device supports removable media.
.TP
.B \fBlocked\fP: \fBboolean\fP
True if the guest has locked this device from having its media
removed
.TP
.B \fBtray_open\fP: \fBboolean\fP (optional)
True if the device\(aqs tray is open
(only present if it has a tray)
.TP
.B \fBio\-status\fP: \fBBlockDeviceIoStatus\fP (optional)
\fBBlockDeviceIoStatus\fP\&. Only present if the device
supports it and the VM is configured to stop on errors
(supported device models: virtio\-blk, IDE, SCSI except
scsi\-generic)
.TP
.B \fBinserted\fP: \fBBlockDeviceInfo\fP (optional)
\fBBlockDeviceInfo\fP describing the device if media is
present
.UNINDENT
.SS Since
.sp
0.14
.SS \fBBlockMeasureInfo\fP (Object)
.sp
Image file size calculation information.  This structure describes the size
requirements for creating a new image file.
.sp
The size requirements depend on the new image file format.  File size always
equals virtual disk size for the \(aqraw\(aq format, even for sparse POSIX files.
Compact formats such as \(aqqcow2\(aq represent unallocated and zero regions
efficiently so file size may be smaller than virtual disk size.
.sp
The values are upper bounds that are guaranteed to fit the new image file.
Subsequent modification, such as internal snapshot or further bitmap
creation, may require additional space and is not covered here.
.SS Members
.INDENT 0.0
.TP
.B \fBrequired\fP: \fBint\fP
Size required for a new image file, in bytes, when copying just
allocated guest\-visible contents.
.TP
.B \fBfully\-allocated\fP: \fBint\fP
Image file size, in bytes, once data has been written
to all sectors, when copying just guest\-visible contents.
.TP
.B \fBbitmaps\fP: \fBint\fP (optional)
Additional size required if all the top\-level bitmap metadata
in the source image were to be copied to the destination,
present only when source and destination both support
persistent bitmaps. (since 5.1)
.UNINDENT
.SS Since
.sp
2.10
.SS \fBquery\-block\fP (Command)
.sp
Get a list of BlockInfo for all virtual block devices.
.SS Returns
.sp
a list of \fBBlockInfo\fP describing each virtual block device. Filter
nodes that were created implicitly are skipped over.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-block" }
<\- {
      "return":[
         {
            "io\-status": "ok",
            "device":"ide0\-hd0",
            "locked":false,
            "removable":false,
            "inserted":{
               "ro":false,
               "drv":"qcow2",
               "encrypted":false,
               "file":"disks/test.qcow2",
               "backing_file_depth":1,
               "bps":1000000,
               "bps_rd":0,
               "bps_wr":0,
               "iops":1000000,
               "iops_rd":0,
               "iops_wr":0,
               "bps_max": 8000000,
               "bps_rd_max": 0,
               "bps_wr_max": 0,
               "iops_max": 0,
               "iops_rd_max": 0,
               "iops_wr_max": 0,
               "iops_size": 0,
               "detect_zeroes": "on",
               "write_threshold": 0,
               "image":{
                  "filename":"disks/test.qcow2",
                  "format":"qcow2",
                  "virtual\-size":2048000,
                  "backing_file":"base.qcow2",
                  "full\-backing\-filename":"disks/base.qcow2",
                  "backing\-filename\-format":"qcow2",
                  "snapshots":[
                     {
                        "id": "1",
                        "name": "snapshot1",
                        "vm\-state\-size": 0,
                        "date\-sec": 10000200,
                        "date\-nsec": 12,
                        "vm\-clock\-sec": 206,
                        "vm\-clock\-nsec": 30
                     }
                  ],
                  "backing\-image":{
                      "filename":"disks/base.qcow2",
                      "format":"qcow2",
                      "virtual\-size":2048000
                  }
               }
            },
            "qdev": "ide_disk",
            "type":"unknown"
         },
         {
            "io\-status": "ok",
            "device":"ide1\-cd0",
            "locked":false,
            "removable":true,
            "qdev": "/machine/unattached/device[23]",
            "tray_open": false,
            "type":"unknown"
         },
         {
            "device":"floppy0",
            "locked":false,
            "removable":true,
            "qdev": "/machine/unattached/device[20]",
            "type":"unknown"
         },
         {
            "device":"sd0",
            "locked":false,
            "removable":true,
            "type":"unknown"
         }
      ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBlockDeviceTimedStats\fP (Object)
.sp
Statistics of a block device during a given interval of time.
.SS Members
.INDENT 0.0
.TP
.B \fBinterval_length\fP: \fBint\fP
Interval used for calculating the statistics,
in seconds.
.TP
.B \fBmin_rd_latency_ns\fP: \fBint\fP
Minimum latency of read operations in the
defined interval, in nanoseconds.
.TP
.B \fBmin_wr_latency_ns\fP: \fBint\fP
Minimum latency of write operations in the
defined interval, in nanoseconds.
.TP
.B \fBmin_flush_latency_ns\fP: \fBint\fP
Minimum latency of flush operations in the
defined interval, in nanoseconds.
.TP
.B \fBmax_rd_latency_ns\fP: \fBint\fP
Maximum latency of read operations in the
defined interval, in nanoseconds.
.TP
.B \fBmax_wr_latency_ns\fP: \fBint\fP
Maximum latency of write operations in the
defined interval, in nanoseconds.
.TP
.B \fBmax_flush_latency_ns\fP: \fBint\fP
Maximum latency of flush operations in the
defined interval, in nanoseconds.
.TP
.B \fBavg_rd_latency_ns\fP: \fBint\fP
Average latency of read operations in the
defined interval, in nanoseconds.
.TP
.B \fBavg_wr_latency_ns\fP: \fBint\fP
Average latency of write operations in the
defined interval, in nanoseconds.
.TP
.B \fBavg_flush_latency_ns\fP: \fBint\fP
Average latency of flush operations in the
defined interval, in nanoseconds.
.TP
.B \fBavg_rd_queue_depth\fP: \fBnumber\fP
Average number of pending read operations
in the defined interval.
.TP
.B \fBavg_wr_queue_depth\fP: \fBnumber\fP
Average number of pending write operations
in the defined interval.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBBlockDeviceStats\fP (Object)
.sp
Statistics of a virtual block device or a block backing device.
.SS Members
.INDENT 0.0
.TP
.B \fBrd_bytes\fP: \fBint\fP
The number of bytes read by the device.
.TP
.B \fBwr_bytes\fP: \fBint\fP
The number of bytes written by the device.
.TP
.B \fBunmap_bytes\fP: \fBint\fP
The number of bytes unmapped by the device (Since 4.2)
.TP
.B \fBrd_operations\fP: \fBint\fP
The number of read operations performed by the device.
.TP
.B \fBwr_operations\fP: \fBint\fP
The number of write operations performed by the device.
.TP
.B \fBflush_operations\fP: \fBint\fP
The number of cache flush operations performed by the
device (since 0.15)
.TP
.B \fBunmap_operations\fP: \fBint\fP
The number of unmap operations performed by the device
(Since 4.2)
.TP
.B \fBrd_total_time_ns\fP: \fBint\fP
Total time spent on reads in nanoseconds (since 0.15).
.TP
.B \fBwr_total_time_ns\fP: \fBint\fP
Total time spent on writes in nanoseconds (since 0.15).
.TP
.B \fBflush_total_time_ns\fP: \fBint\fP
Total time spent on cache flushes in nanoseconds
(since 0.15).
.TP
.B \fBunmap_total_time_ns\fP: \fBint\fP
Total time spent on unmap operations in nanoseconds
(Since 4.2)
.TP
.B \fBwr_highest_offset\fP: \fBint\fP
The offset after the greatest byte written to the
device.  The intended use of this information is for
growable sparse files (like qcow2) that are used on top
of a physical device.
.TP
.B \fBrd_merged\fP: \fBint\fP
Number of read requests that have been merged into another
request (Since 2.3).
.TP
.B \fBwr_merged\fP: \fBint\fP
Number of write requests that have been merged into another
request (Since 2.3).
.TP
.B \fBunmap_merged\fP: \fBint\fP
Number of unmap requests that have been merged into another
request (Since 4.2)
.TP
.B \fBidle_time_ns\fP: \fBint\fP (optional)
Time since the last I/O operation, in
nanoseconds. If the field is absent it means that
there haven\(aqt been any operations yet (Since 2.5).
.TP
.B \fBfailed_rd_operations\fP: \fBint\fP
The number of failed read operations
performed by the device (Since 2.5)
.TP
.B \fBfailed_wr_operations\fP: \fBint\fP
The number of failed write operations
performed by the device (Since 2.5)
.TP
.B \fBfailed_flush_operations\fP: \fBint\fP
The number of failed flush operations
performed by the device (Since 2.5)
.TP
.B \fBfailed_unmap_operations\fP: \fBint\fP
The number of failed unmap operations performed
by the device (Since 4.2)
.TP
.B \fBinvalid_rd_operations\fP: \fBint\fP
.INDENT 7.0
.TP
.B The number of invalid read operations
performed by the device (Since 2.5)
.UNINDENT
.TP
.B \fBinvalid_wr_operations\fP: \fBint\fP
The number of invalid write operations
performed by the device (Since 2.5)
.TP
.B \fBinvalid_flush_operations\fP: \fBint\fP
The number of invalid flush operations
performed by the device (Since 2.5)
.TP
.B \fBinvalid_unmap_operations\fP: \fBint\fP
The number of invalid unmap operations performed
by the device (Since 4.2)
.TP
.B \fBaccount_invalid\fP: \fBboolean\fP
Whether invalid operations are included in the
last access statistics (Since 2.5)
.TP
.B \fBaccount_failed\fP: \fBboolean\fP
Whether failed operations are included in the
latency and last access statistics (Since 2.5)
.TP
.B \fBtimed_stats\fP: \fBarray of BlockDeviceTimedStats\fP
Statistics specific to the set of previously defined
intervals of time (Since 2.5)
.TP
.B \fBrd_latency_histogram\fP: \fBBlockLatencyHistogramInfo\fP (optional)
\fBBlockLatencyHistogramInfo\fP\&. (Since 4.0)
.TP
.B \fBwr_latency_histogram\fP: \fBBlockLatencyHistogramInfo\fP (optional)
\fBBlockLatencyHistogramInfo\fP\&. (Since 4.0)
.TP
.B \fBflush_latency_histogram\fP: \fBBlockLatencyHistogramInfo\fP (optional)
\fBBlockLatencyHistogramInfo\fP\&. (Since 4.0)
.UNINDENT
.SS Since
.sp
0.14
.SS \fBBlockStatsSpecificFile\fP (Object)
.sp
File driver statistics
.SS Members
.INDENT 0.0
.TP
.B \fBdiscard\-nb\-ok\fP: \fBint\fP
The number of successful discard operations performed by
the driver.
.TP
.B \fBdiscard\-nb\-failed\fP: \fBint\fP
The number of failed discard operations performed by
the driver.
.TP
.B \fBdiscard\-bytes\-ok\fP: \fBint\fP
The number of bytes discarded by the driver.
.UNINDENT
.SS Since
.sp
4.2
.SS \fBBlockStatsSpecificNvme\fP (Object)
.sp
NVMe driver statistics
.SS Members
.INDENT 0.0
.TP
.B \fBcompletion\-errors\fP: \fBint\fP
The number of completion errors.
.TP
.B \fBaligned\-accesses\fP: \fBint\fP
The number of aligned accesses performed by
the driver.
.TP
.B \fBunaligned\-accesses\fP: \fBint\fP
The number of unaligned accesses performed by
the driver.
.UNINDENT
.SS Since
.sp
5.2
.SS \fBBlockStatsSpecific\fP (Object)
.sp
Block driver specific statistics
.SS Members
.INDENT 0.0
.TP
.B \fBdriver\fP: \fBBlockdevDriver\fP
Not documented
.TP
.B The members of \fBBlockStatsSpecificFile\fP when \fBdriver\fP is \fB"file"\fP
.TP
The members of \fBBlockStatsSpecificFile\fP when \fBdriver\fP is \fB"host_device"\fP (\fBIf: \fP\fBHAVE_HOST_BLOCK_DEVICE\fP)
.TP
.B The members of \fBBlockStatsSpecificNvme\fP when \fBdriver\fP is \fB"nvme"\fP
.UNINDENT
.SS Since
.sp
4.2
.SS \fBBlockStats\fP (Object)
.sp
Statistics of a virtual block device or a block backing device.
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
If the stats are for a virtual block device, the name
corresponding to the virtual block device.
.TP
.B \fBnode\-name\fP: \fBstring\fP (optional)
The node name of the device. (Since 2.3)
.TP
.B \fBqdev\fP: \fBstring\fP (optional)
The qdev ID, or if no ID is assigned, the QOM path of the block
device. (since 3.0)
.TP
.B \fBstats\fP: \fBBlockDeviceStats\fP
A \fBBlockDeviceStats\fP for the device.
.TP
.B \fBdriver\-specific\fP: \fBBlockStatsSpecific\fP (optional)
Optional driver\-specific stats. (Since 4.2)
.TP
.B \fBparent\fP: \fBBlockStats\fP (optional)
This describes the file block device if it has one.
Contains recursively the statistics of the underlying
protocol (e.g. the host file for a qcow2 image). If there is
no underlying protocol, this field is omitted
.TP
.B \fBbacking\fP: \fBBlockStats\fP (optional)
This describes the backing block device if it has one.
(Since 2.0)
.UNINDENT
.SS Since
.sp
0.14
.SS \fBquery\-blockstats\fP (Command)
.sp
Query the \fBBlockStats\fP for all virtual block devices.
.SS Arguments
.INDENT 0.0
.TP
.B \fBquery\-nodes\fP: \fBboolean\fP (optional)
If true, the command will query all the block nodes
that have a node name, in a list which will include "parent"
information, but not "backing".
If false or omitted, the behavior is as before \- query all the
device backends, recursively including their "parent" and
"backing". Filter nodes that were created implicitly are
skipped over in this mode. (Since 2.3)
.UNINDENT
.SS Returns
.sp
A list of \fBBlockStats\fP for each virtual block devices.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-blockstats" }
<\- {
      "return":[
         {
            "device":"ide0\-hd0",
            "parent":{
               "stats":{
                  "wr_highest_offset":3686448128,
                  "wr_bytes":9786368,
                  "wr_operations":751,
                  "rd_bytes":122567168,
                  "rd_operations":36772
                  "wr_total_times_ns":313253456
                  "rd_total_times_ns":3465673657
                  "flush_total_times_ns":49653
                  "flush_operations":61,
                  "rd_merged":0,
                  "wr_merged":0,
                  "idle_time_ns":2953431879,
                  "account_invalid":true,
                  "account_failed":false
               }
            },
            "stats":{
               "wr_highest_offset":2821110784,
               "wr_bytes":9786368,
               "wr_operations":692,
               "rd_bytes":122739200,
               "rd_operations":36604
               "flush_operations":51,
               "wr_total_times_ns":313253456
               "rd_total_times_ns":3465673657
               "flush_total_times_ns":49653,
               "rd_merged":0,
               "wr_merged":0,
               "idle_time_ns":2953431879,
               "account_invalid":true,
               "account_failed":false
            },
            "qdev": "/machine/unattached/device[23]"
         },
         {
            "device":"ide1\-cd0",
            "stats":{
               "wr_highest_offset":0,
               "wr_bytes":0,
               "wr_operations":0,
               "rd_bytes":0,
               "rd_operations":0
               "flush_operations":0,
               "wr_total_times_ns":0
               "rd_total_times_ns":0
               "flush_total_times_ns":0,
               "rd_merged":0,
               "wr_merged":0,
               "account_invalid":false,
               "account_failed":false
            },
            "qdev": "/machine/unattached/device[24]"
         },
         {
            "device":"floppy0",
            "stats":{
               "wr_highest_offset":0,
               "wr_bytes":0,
               "wr_operations":0,
               "rd_bytes":0,
               "rd_operations":0
               "flush_operations":0,
               "wr_total_times_ns":0
               "rd_total_times_ns":0
               "flush_total_times_ns":0,
               "rd_merged":0,
               "wr_merged":0,
               "account_invalid":false,
               "account_failed":false
            },
            "qdev": "/machine/unattached/device[16]"
         },
         {
            "device":"sd0",
            "stats":{
               "wr_highest_offset":0,
               "wr_bytes":0,
               "wr_operations":0,
               "rd_bytes":0,
               "rd_operations":0
               "flush_operations":0,
               "wr_total_times_ns":0
               "rd_total_times_ns":0
               "flush_total_times_ns":0,
               "rd_merged":0,
               "wr_merged":0,
               "account_invalid":false,
               "account_failed":false
            }
         }
      ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBlockdevOnError\fP (Enum)
.sp
An enumeration of possible behaviors for errors on I/O operations.
The exact meaning depends on whether the I/O was initiated by a guest
or by a block job
.SS Values
.INDENT 0.0
.TP
.B \fBreport\fP
for guest operations, report the error to the guest;
for jobs, cancel the job
.TP
.B \fBignore\fP
ignore the error, only report a QMP event (BLOCK_IO_ERROR
or BLOCK_JOB_ERROR). The backup, mirror and commit block jobs retry
the failing request later and may still complete successfully. The
stream block job continues to stream and will complete with an
error.
.TP
.B \fBenospc\fP
same as \fBstop\fP on ENOSPC, same as \fBreport\fP otherwise.
.TP
.B \fBstop\fP
for guest operations, stop the virtual machine;
for jobs, pause the job
.TP
.B \fBauto\fP
inherit the error handling policy of the backend (since: 2.7)
.UNINDENT
.SS Since
.sp
1.3
.SS \fBMirrorSyncMode\fP (Enum)
.sp
An enumeration of possible behaviors for the initial synchronization
phase of storage mirroring.
.SS Values
.INDENT 0.0
.TP
.B \fBtop\fP
copies data in the topmost image to the destination
.TP
.B \fBfull\fP
copies data from all images to the destination
.TP
.B \fBnone\fP
only copy data written from now on
.TP
.B \fBincremental\fP
only copy data described by the dirty bitmap. (since: 2.4)
.TP
.B \fBbitmap\fP
only copy data described by the dirty bitmap. (since: 4.2)
Behavior on completion is determined by the BitmapSyncMode.
.UNINDENT
.SS Since
.sp
1.3
.SS \fBBitmapSyncMode\fP (Enum)
.sp
An enumeration of possible behaviors for the synchronization of a bitmap
when used for data copy operations.
.SS Values
.INDENT 0.0
.TP
.B \fBon\-success\fP
The bitmap is only synced when the operation is successful.
This is the behavior always used for \(aqINCREMENTAL\(aq backups.
.TP
.B \fBnever\fP
The bitmap is never synchronized with the operation, and is
treated solely as a read\-only manifest of blocks to copy.
.TP
.B \fBalways\fP
The bitmap is always synchronized with the operation,
regardless of whether or not the operation was successful.
.UNINDENT
.SS Since
.sp
4.2
.SS \fBMirrorCopyMode\fP (Enum)
.sp
An enumeration whose values tell the mirror block job when to
trigger writes to the target.
.SS Values
.INDENT 0.0
.TP
.B \fBbackground\fP
copy data in background only.
.TP
.B \fBwrite\-blocking\fP
when data is written to the source, write it
(synchronously) to the target as well.  In
addition, data is copied in background just like in
\fBbackground\fP mode.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBBlockJobInfo\fP (Object)
.sp
Information about a long\-running block device operation.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBstring\fP
the job type (\(aqstream\(aq for image streaming)
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
.TP
.B \fBlen\fP: \fBint\fP
Estimated \fBoffset\fP value at the completion of the job. This value can
arbitrarily change while the job is running, in both directions.
.TP
.B \fBoffset\fP: \fBint\fP
Progress made until now. The unit is arbitrary and the value can
only meaningfully be used for the ratio of \fBoffset\fP to \fBlen\fP\&. The
value is monotonically increasing.
.TP
.B \fBbusy\fP: \fBboolean\fP
false if the job is known to be in a quiescent state, with
no pending I/O.  Since 1.3.
.TP
.B \fBpaused\fP: \fBboolean\fP
whether the job is paused or, if \fBbusy\fP is true, will
pause itself as soon as possible.  Since 1.3.
.TP
.B \fBspeed\fP: \fBint\fP
the rate limit, bytes per second
.TP
.B \fBio\-status\fP: \fBBlockDeviceIoStatus\fP
the status of the job (since 1.3)
.TP
.B \fBready\fP: \fBboolean\fP
true if the job may be completed (since 2.2)
.TP
.B \fBstatus\fP: \fBJobStatus\fP
Current job state/status (since 2.12)
.TP
.B \fBauto\-finalize\fP: \fBboolean\fP
Job will finalize itself when PENDING, moving to
the CONCLUDED state. (since 2.12)
.TP
.B \fBauto\-dismiss\fP: \fBboolean\fP
Job will dismiss itself when CONCLUDED, moving to the NULL
state and disappearing from the query list. (since 2.12)
.TP
.B \fBerror\fP: \fBstring\fP (optional)
Error information if the job did not complete successfully.
Not set if the job completed successfully. (since 2.12.1)
.UNINDENT
.SS Since
.sp
1.1
.SS \fBquery\-block\-jobs\fP (Command)
.sp
Return information about long\-running block device operations.
.SS Returns
.sp
a list of \fBBlockJobInfo\fP for each active block job
.SS Since
.sp
1.1
.SS \fBblock_resize\fP (Command)
.sp
Resize a block image while a guest is running.
.sp
Either \fBdevice\fP or \fBnode\-name\fP must be set but not both.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
the name of the device to get the image resized
.TP
.B \fBnode\-name\fP: \fBstring\fP (optional)
graph node name to get the image resized (Since 2.0)
.TP
.B \fBsize\fP: \fBint\fP
new image size in bytes
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBdevice\fP is not a valid block device, DeviceNotFound
.UNINDENT
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block_resize",
     "arguments": { "device": "scratch", "size": 1073741824 } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBNewImageMode\fP (Enum)
.sp
An enumeration that tells QEMU how to set the backing file path in
a new image file.
.SS Values
.INDENT 0.0
.TP
.B \fBexisting\fP
QEMU should look for an existing image file.
.TP
.B \fBabsolute\-paths\fP
QEMU should create a new image with absolute paths
for the backing file. If there is no backing file available, the new
image will not be backed either.
.UNINDENT
.SS Since
.sp
1.1
.SS \fBBlockdevSnapshotSync\fP (Object)
.sp
Either \fBdevice\fP or \fBnode\-name\fP must be set but not both.
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
the name of the device to take a snapshot of.
.TP
.B \fBnode\-name\fP: \fBstring\fP (optional)
graph node name to generate the snapshot from (Since 2.0)
.TP
.B \fBsnapshot\-file\fP: \fBstring\fP
the target of the new overlay image. If the file
exists, or if it is a device, the overlay will be created in the
existing file/device. Otherwise, a new file will be created.
.TP
.B \fBsnapshot\-node\-name\fP: \fBstring\fP (optional)
the graph node name of the new image (Since 2.0)
.TP
.B \fBformat\fP: \fBstring\fP (optional)
the format of the overlay image, default is \(aqqcow2\(aq.
.TP
.B \fBmode\fP: \fBNewImageMode\fP (optional)
whether and how QEMU should create a new image, default is
\(aqabsolute\-paths\(aq.
.UNINDENT
.SS \fBBlockdevSnapshot\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBnode\fP: \fBstring\fP
device or node name that will have a snapshot taken.
.TP
.B \fBoverlay\fP: \fBstring\fP
reference to the existing block device that will become
the overlay of \fBnode\fP, as part of taking the snapshot.
It must not have a current backing file (this can be
achieved by passing "backing": null to blockdev\-add).
.UNINDENT
.SS Since
.sp
2.5
.SS \fBBackupPerf\fP (Object)
.sp
Optional parameters for backup. These parameters don\(aqt affect
functionality, but may significantly affect performance.
.SS Members
.INDENT 0.0
.TP
.B \fBuse\-copy\-range\fP: \fBboolean\fP (optional)
Use copy offloading. Default false.
.TP
.B \fBmax\-workers\fP: \fBint\fP (optional)
Maximum number of parallel requests for the sustained background
copying process. Doesn\(aqt influence copy\-before\-write operations.
Default 64.
.TP
.B \fBmax\-chunk\fP: \fBint\fP (optional)
Maximum request length for the sustained background copying
process. Doesn\(aqt influence copy\-before\-write operations.
0 means unlimited. If max\-chunk is non\-zero then it should not be
less than job cluster size which is calculated as maximum of
target image cluster size and 64k. Default 0.
.UNINDENT
.SS Since
.sp
6.0
.SS \fBBackupCommon\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP (optional)
identifier for the newly\-created block job. If
omitted, the device name will be used. (Since 2.7)
.TP
.B \fBdevice\fP: \fBstring\fP
the device name or node\-name of a root node which should be copied.
.TP
.B \fBsync\fP: \fBMirrorSyncMode\fP
what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, from a
dirty bitmap, or only new I/O).
.TP
.B \fBspeed\fP: \fBint\fP (optional)
the maximum speed, in bytes per second. The default is 0,
for unlimited.
.TP
.B \fBbitmap\fP: \fBstring\fP (optional)
The name of a dirty bitmap to use.
Must be present if sync is "bitmap" or "incremental".
Can be present if sync is "full" or "top".
Must not be present otherwise.
(Since 2.4 (drive\-backup), 3.1 (blockdev\-backup))
.TP
.B \fBbitmap\-mode\fP: \fBBitmapSyncMode\fP (optional)
Specifies the type of data the bitmap should contain after
the operation concludes.
Must be present if a bitmap was provided,
Must NOT be present otherwise. (Since 4.2)
.TP
.B \fBcompress\fP: \fBboolean\fP (optional)
true to compress data, if the target format supports it.
(default: false) (since 2.8)
.TP
.B \fBon\-source\-error\fP: \fBBlockdevOnError\fP (optional)
the action to take on an error on the source,
default \(aqreport\(aq.  \(aqstop\(aq and \(aqenospc\(aq can only be used
if the block device supports io\-status (see BlockInfo).
.TP
.B \fBon\-target\-error\fP: \fBBlockdevOnError\fP (optional)
the action to take on an error on the target,
default \(aqreport\(aq (no limitations, since this applies to
a different block device than \fBdevice\fP).
.TP
.B \fBauto\-finalize\fP: \fBboolean\fP (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for \fBblock\-job\-finalize\fP before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 2.12)
.TP
.B \fBauto\-dismiss\fP: \fBboolean\fP (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits \fBblock\-job\-dismiss\fP\&.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 2.12)
.TP
.B \fBfilter\-node\-name\fP: \fBstring\fP (optional)
the node name that should be assigned to the
filter driver that the backup job inserts into the graph
above node specified by \fBdrive\fP\&. If this option is not given,
a node name is autogenerated. (Since: 4.2)
.TP
.B \fBx\-perf\fP: \fBBackupPerf\fP (optional)
Performance options. (Since 6.0)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
Member \fBx\-perf\fP is experimental.
.UNINDENT
.SS Note
.sp
\fBon\-source\-error\fP and \fBon\-target\-error\fP only affect background
I/O.  If an error occurs during a guest write request, the device\(aqs
rerror/werror actions will be used.
.SS Since
.sp
4.2
.SS \fBDriveBackup\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBtarget\fP: \fBstring\fP
the target of the new image. If the file exists, or if it
is a device, the existing file/device will be used as the new
destination.  If it does not exist, a new file will be created.
.TP
.B \fBformat\fP: \fBstring\fP (optional)
the format of the new destination, default is to
probe if \fBmode\fP is \(aqexisting\(aq, else the format of the source
.TP
.B \fBmode\fP: \fBNewImageMode\fP (optional)
whether and how QEMU should create a new image, default is
\(aqabsolute\-paths\(aq.
.TP
.B The members of \fBBackupCommon\fP
.UNINDENT
.SS Since
.sp
1.6
.SS \fBBlockdevBackup\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBtarget\fP: \fBstring\fP
the device name or node\-name of the backup target node.
.TP
.B The members of \fBBackupCommon\fP
.UNINDENT
.SS Since
.sp
2.3
.SS \fBblockdev\-snapshot\-sync\fP (Command)
.sp
Takes a synchronous snapshot of a block device.
.sp
For the arguments, see the documentation of BlockdevSnapshotSync.
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBdevice\fP is not a valid block device, DeviceNotFound
.UNINDENT
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-snapshot\-sync",
     "arguments": { "device": "ide\-hd0",
                    "snapshot\-file":
                    "/some/place/my\-image",
                    "format": "qcow2" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblockdev\-snapshot\fP (Command)
.sp
Takes a snapshot of a block device.
.sp
Take a snapshot, by installing \(aqnode\(aq as the backing image of
\(aqoverlay\(aq. Additionally, if \(aqnode\(aq is associated with a block
device, the block device changes to using \(aqoverlay\(aq as its new active
image.
.sp
For the arguments, see the documentation of BlockdevSnapshot.
.SS Features
.INDENT 0.0
.TP
.B \fBallow\-write\-only\-overlay\fP
If present, the check whether this operation is safe
was relaxed so that it can be used to change
backing file of a destination of a blockdev\-mirror.
(since 5.0)
.UNINDENT
.SS Since
.sp
2.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-add",
     "arguments": { "driver": "qcow2",
                    "node\-name": "node1534",
                    "file": { "driver": "file",
                              "filename": "hd1.qcow2" },
                    "backing": null } }

<\- { "return": {} }

\-> { "execute": "blockdev\-snapshot",
     "arguments": { "node": "ide\-hd0",
                    "overlay": "node1534" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBchange\-backing\-file\fP (Command)
.sp
Change the backing file in the image file metadata.  This does not
cause QEMU to reopen the image file to reparse the backing filename
(it may, however, perform a reopen to change permissions from
r/o \-> r/w \-> r/o, if needed). The new backing file string is written
into the image file metadata, and the QEMU internal strings are
updated.
.SS Arguments
.INDENT 0.0
.TP
.B \fBimage\-node\-name\fP: \fBstring\fP
The name of the block driver state node of the
image to modify. The "device" argument is used
to verify "image\-node\-name" is in the chain
described by "device".
.TP
.B \fBdevice\fP: \fBstring\fP
The device name or node\-name of the root node that owns
image\-node\-name.
.TP
.B \fBbacking\-file\fP: \fBstring\fP
The string to write as the backing file.  This
string is not validated, so care should be taken
when specifying the string or the image chain may
not be able to be reopened again.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If "device" does not exist or cannot be determined, DeviceNotFound
.UNINDENT
.SS Since
.sp
2.1
.SS \fBblock\-commit\fP (Command)
.sp
Live commit of data from overlay image nodes into backing nodes \- i.e.,
writes data between \(aqtop\(aq and \(aqbase\(aq into \(aqbase\(aq.
.sp
If top == base, that is an error.
If top has no overlays on top of it, or if it is in use by a writer,
the job will not be completed by itself.  The user needs to complete
the job with the block\-job\-complete command after getting the ready
event. (Since 2.0)
.sp
If the base image is smaller than top, then the base image will be
resized to be the same size as top.  If top is smaller than the base
image, the base will not be truncated.  If you want the base image
size to match the size of the smaller top, you can safely truncate
it yourself once the commit operation successfully completes.
.SS Arguments
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP (optional)
identifier for the newly\-created block job. If
omitted, the device name will be used. (Since 2.7)
.TP
.B \fBdevice\fP: \fBstring\fP
the device name or node\-name of a root node
.TP
.B \fBbase\-node\fP: \fBstring\fP (optional)
The node name of the backing image to write data into.
If not specified, this is the deepest backing image.
(since: 3.1)
.TP
.B \fBbase\fP: \fBstring\fP (optional)
Same as \fBbase\-node\fP, except that it is a file name rather than a node
name. This must be the exact filename string that was used to open the
node; other strings, even if addressing the same file, are not
accepted
.TP
.B \fBtop\-node\fP: \fBstring\fP (optional)
The node name of the backing image within the image chain
which contains the topmost data to be committed down. If
not specified, this is the active layer. (since: 3.1)
.TP
.B \fBtop\fP: \fBstring\fP (optional)
Same as \fBtop\-node\fP, except that it is a file name rather than a node
name. This must be the exact filename string that was used to open the
node; other strings, even if addressing the same file, are not
accepted
.TP
.B \fBbacking\-file\fP: \fBstring\fP (optional)
The backing file string to write into the overlay
image of \(aqtop\(aq.  If \(aqtop\(aq does not have an overlay
image, or if \(aqtop\(aq is in use by a writer, specifying
a backing file string is an error.
.sp
This filename is not validated.  If a pathname string
is such that it cannot be resolved by QEMU, that
means that subsequent QMP or HMP commands must use
node\-names for the image in question, as filename
lookup methods will fail.
.sp
If not specified, QEMU will automatically determine
the backing file string to use, or error out if
there is no obvious choice. Care should be taken
when specifying the string, to specify a valid
filename or protocol.
(Since 2.1)
.TP
.B \fBspeed\fP: \fBint\fP (optional)
the maximum speed, in bytes per second
.TP
.B \fBon\-error\fP: \fBBlockdevOnError\fP (optional)
the action to take on an error. \(aqignore\(aq means that the request
should be retried. (default: report; Since: 5.0)
.TP
.B \fBfilter\-node\-name\fP: \fBstring\fP (optional)
the node name that should be assigned to the
filter driver that the commit job inserts into the graph
above \fBtop\fP\&. If this option is not given, a node name is
autogenerated. (Since: 2.9)
.TP
.B \fBauto\-finalize\fP: \fBboolean\fP (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for \fBblock\-job\-finalize\fP before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 3.1)
.TP
.B \fBauto\-dismiss\fP: \fBboolean\fP (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits \fBblock\-job\-dismiss\fP\&.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 3.1)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Members \fBbase\fP and \fBtop\fP are deprecated.  Use \fBbase\-node\fP
and \fBtop\-node\fP instead.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If \fBdevice\fP does not exist, DeviceNotFound
.IP \(bu 2
Any other error returns a GenericError.
.UNINDENT
.SS Since
.sp
1.3
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block\-commit",
     "arguments": { "device": "virtio0",
                    "top": "/tmp/snap1.qcow2" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBdrive\-backup\fP (Command)
.sp
Start a point\-in\-time copy of a block device to a new destination.  The
status of ongoing drive\-backup operations can be checked with
query\-block\-jobs where the BlockJobInfo.type field has the value \(aqbackup\(aq.
The operation can be stopped before it has completed using the
block\-job\-cancel command.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBDriveBackup\fP
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
This command is deprecated. Use \fBblockdev\-backup\fP instead.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBdevice\fP is not a valid block device, GenericError
.UNINDENT
.SS Since
.sp
1.6
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "drive\-backup",
     "arguments": { "device": "drive0",
                    "sync": "full",
                    "target": "backup.img" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblockdev\-backup\fP (Command)
.sp
Start a point\-in\-time copy of a block device to a new destination.  The
status of ongoing blockdev\-backup operations can be checked with
query\-block\-jobs where the BlockJobInfo.type field has the value \(aqbackup\(aq.
The operation can be stopped before it has completed using the
block\-job\-cancel command.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBBlockdevBackup\fP
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBdevice\fP is not a valid block device, DeviceNotFound
.UNINDENT
.SS Since
.sp
2.3
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-backup",
     "arguments": { "device": "src\-id",
                    "sync": "full",
                    "target": "tgt\-id" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBquery\-named\-block\-nodes\fP (Command)
.sp
Get the named block driver list
.SS Arguments
.INDENT 0.0
.TP
.B \fBflat\fP: \fBboolean\fP (optional)
Omit the nested data about backing image ("backing\-image" key) if true.
Default is false (Since 5.0)
.UNINDENT
.SS Returns
.sp
the list of BlockDeviceInfo
.SS Since
.sp
2.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-named\-block\-nodes" }
<\- { "return": [ { "ro":false,
                   "drv":"qcow2",
                   "encrypted":false,
                   "file":"disks/test.qcow2",
                   "node\-name": "my\-node",
                   "backing_file_depth":1,
                   "detect_zeroes":"off",
                   "bps":1000000,
                   "bps_rd":0,
                   "bps_wr":0,
                   "iops":1000000,
                   "iops_rd":0,
                   "iops_wr":0,
                   "bps_max": 8000000,
                   "bps_rd_max": 0,
                   "bps_wr_max": 0,
                   "iops_max": 0,
                   "iops_rd_max": 0,
                   "iops_wr_max": 0,
                   "iops_size": 0,
                   "write_threshold": 0,
                   "image":{
                      "filename":"disks/test.qcow2",
                      "format":"qcow2",
                      "virtual\-size":2048000,
                      "backing_file":"base.qcow2",
                      "full\-backing\-filename":"disks/base.qcow2",
                      "backing\-filename\-format":"qcow2",
                      "snapshots":[
                         {
                            "id": "1",
                            "name": "snapshot1",
                            "vm\-state\-size": 0,
                            "date\-sec": 10000200,
                            "date\-nsec": 12,
                            "vm\-clock\-sec": 206,
                            "vm\-clock\-nsec": 30
                         }
                      ],
                      "backing\-image":{
                          "filename":"disks/base.qcow2",
                          "format":"qcow2",
                          "virtual\-size":2048000
                      }
                   } } ] }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBXDbgBlockGraphNodeType\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBblock\-backend\fP
corresponds to BlockBackend
.TP
.B \fBblock\-job\fP
corresponds to BlockJob
.TP
.B \fBblock\-driver\fP
corresponds to BlockDriverState
.UNINDENT
.SS Since
.sp
4.0
.SS \fBXDbgBlockGraphNode\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBint\fP
Block graph node identifier. This \fBid\fP is generated only for
x\-debug\-query\-block\-graph and does not relate to any other identifiers in
Qemu.
.TP
.B \fBtype\fP: \fBXDbgBlockGraphNodeType\fP
Type of graph node. Can be one of block\-backend, block\-job or
block\-driver\-state.
.TP
.B \fBname\fP: \fBstring\fP
Human readable name of the node. Corresponds to node\-name for
block\-driver\-state nodes; is not guaranteed to be unique in the whole
graph (with block\-jobs and block\-backends).
.UNINDENT
.SS Since
.sp
4.0
.SS \fBBlockPermission\fP (Enum)
.sp
Enum of base block permissions.
.SS Values
.INDENT 0.0
.TP
.B \fBconsistent\-read\fP
A user that has the "permission" of consistent reads is
guaranteed that their view of the contents of the block
device is complete and self\-consistent, representing the
contents of a disk at a specific point.
For most block devices (including their backing files) this
is true, but the property cannot be maintained in a few
situations like for intermediate nodes of a commit block
job.
.TP
.B \fBwrite\fP
This permission is required to change the visible disk contents.
.TP
.B \fBwrite\-unchanged\fP
This permission (which is weaker than BLK_PERM_WRITE) is
both enough and required for writes to the block node when
the caller promises that the visible disk content doesn\(aqt
change.
As the BLK_PERM_WRITE permission is strictly stronger,
either is sufficient to perform an unchanging write.
.TP
.B \fBresize\fP
This permission is required to change the size of a block node.
.UNINDENT
.SS Since
.sp
4.0
.SS \fBXDbgBlockGraphEdge\fP (Object)
.sp
Block Graph edge description for x\-debug\-query\-block\-graph.
.SS Members
.INDENT 0.0
.TP
.B \fBparent\fP: \fBint\fP
parent id
.TP
.B \fBchild\fP: \fBint\fP
child id
.TP
.B \fBname\fP: \fBstring\fP
name of the relation (examples are \(aqfile\(aq and \(aqbacking\(aq)
.TP
.B \fBperm\fP: \fBarray of BlockPermission\fP
granted permissions for the parent operating on the child
.TP
.B \fBshared\-perm\fP: \fBarray of BlockPermission\fP
permissions that can still be granted to other users of the
child while it is still attached to this parent
.UNINDENT
.SS Since
.sp
4.0
.SS \fBXDbgBlockGraph\fP (Object)
.sp
Block Graph \- list of nodes and list of edges.
.SS Members
.INDENT 0.0
.TP
.B \fBnodes\fP: \fBarray of XDbgBlockGraphNode\fP
Not documented
.TP
.B \fBedges\fP: \fBarray of XDbgBlockGraphEdge\fP
Not documented
.UNINDENT
.SS Since
.sp
4.0
.SS \fBx\-debug\-query\-block\-graph\fP (Command)
.sp
Get the block graph.
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Since
.sp
4.0
.SS \fBdrive\-mirror\fP (Command)
.sp
Start mirroring a block device\(aqs writes to a new destination. target
specifies the target of the new image. If the file exists, or if it
is a device, it will be used as the new destination for writes. If
it does not exist, a new file will be created. format specifies the
format of the mirror image, default is to probe if mode=\(aqexisting\(aq,
else the format of the source.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBDriveMirror\fP
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBdevice\fP is not a valid block device, GenericError
.UNINDENT
.SS Since
.sp
1.3
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "drive\-mirror",
     "arguments": { "device": "ide\-hd0",
                    "target": "/some/place/my\-image",
                    "sync": "full",
                    "format": "qcow2" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDriveMirror\fP (Object)
.sp
A set of parameters describing drive mirror setup.
.SS Members
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP (optional)
identifier for the newly\-created block job. If
omitted, the device name will be used. (Since 2.7)
.TP
.B \fBdevice\fP: \fBstring\fP
the device name or node\-name of a root node whose writes should be
mirrored.
.TP
.B \fBtarget\fP: \fBstring\fP
the target of the new image. If the file exists, or if it
is a device, the existing file/device will be used as the new
destination.  If it does not exist, a new file will be created.
.TP
.B \fBformat\fP: \fBstring\fP (optional)
the format of the new destination, default is to
probe if \fBmode\fP is \(aqexisting\(aq, else the format of the source
.TP
.B \fBnode\-name\fP: \fBstring\fP (optional)
the new block driver state node name in the graph
(Since 2.1)
.TP
.B \fBreplaces\fP: \fBstring\fP (optional)
with sync=full graph node name to be replaced by the new
image when a whole image copy is done. This can be used to repair
broken Quorum files.  By default, \fBdevice\fP is replaced, although
implicitly created filters on it are kept. (Since 2.1)
.TP
.B \fBmode\fP: \fBNewImageMode\fP (optional)
whether and how QEMU should create a new image, default is
\(aqabsolute\-paths\(aq.
.TP
.B \fBspeed\fP: \fBint\fP (optional)
the maximum speed, in bytes per second
.TP
.B \fBsync\fP: \fBMirrorSyncMode\fP
what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, or
only new I/O).
.TP
.B \fBgranularity\fP: \fBint\fP (optional)
granularity of the dirty bitmap, default is 64K
if the image format doesn\(aqt have clusters, 4K if the clusters
are smaller than that, else the cluster size.  Must be a
power of 2 between 512 and 64M (since 1.4).
.TP
.B \fBbuf\-size\fP: \fBint\fP (optional)
maximum amount of data in flight from source to
target (since 1.4).
.TP
.B \fBon\-source\-error\fP: \fBBlockdevOnError\fP (optional)
the action to take on an error on the source,
default \(aqreport\(aq.  \(aqstop\(aq and \(aqenospc\(aq can only be used
if the block device supports io\-status (see BlockInfo).
.TP
.B \fBon\-target\-error\fP: \fBBlockdevOnError\fP (optional)
the action to take on an error on the target,
default \(aqreport\(aq (no limitations, since this applies to
a different block device than \fBdevice\fP).
.TP
.B \fBunmap\fP: \fBboolean\fP (optional)
Whether to try to unmap target sectors where source has
only zero. If true, and target unallocated sectors will read as zero,
target image sectors will be unmapped; otherwise, zeroes will be
written. Both will result in identical contents.
Default is true. (Since 2.4)
.TP
.B \fBcopy\-mode\fP: \fBMirrorCopyMode\fP (optional)
when to copy data to the destination; defaults to \(aqbackground\(aq
(Since: 3.0)
.TP
.B \fBauto\-finalize\fP: \fBboolean\fP (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for \fBblock\-job\-finalize\fP before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 3.1)
.TP
.B \fBauto\-dismiss\fP: \fBboolean\fP (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits \fBblock\-job\-dismiss\fP\&.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 3.1)
.UNINDENT
.SS Since
.sp
1.3
.SS \fBBlockDirtyBitmap\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBnode\fP: \fBstring\fP
name of device/node which the bitmap is tracking
.TP
.B \fBname\fP: \fBstring\fP
name of the dirty bitmap
.UNINDENT
.SS Since
.sp
2.4
.SS \fBBlockDirtyBitmapAdd\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBnode\fP: \fBstring\fP
name of device/node which the bitmap is tracking
.TP
.B \fBname\fP: \fBstring\fP
name of the dirty bitmap (must be less than 1024 bytes)
.TP
.B \fBgranularity\fP: \fBint\fP (optional)
the bitmap granularity, default is 64k for
block\-dirty\-bitmap\-add
.TP
.B \fBpersistent\fP: \fBboolean\fP (optional)
the bitmap is persistent, i.e. it will be saved to the
corresponding block device image file on its close. For now only
Qcow2 disks support persistent bitmaps. Default is false for
block\-dirty\-bitmap\-add. (Since: 2.10)
.TP
.B \fBdisabled\fP: \fBboolean\fP (optional)
the bitmap is created in the disabled state, which means that
it will not track drive changes. The bitmap may be enabled with
block\-dirty\-bitmap\-enable. Default is false. (Since: 4.0)
.UNINDENT
.SS Since
.sp
2.4
.SS \fBBlockDirtyBitmapOrStr\fP (Alternate)
.SS Members
.INDENT 0.0
.TP
.B \fBlocal\fP: \fBstring\fP
name of the bitmap, attached to the same node as target bitmap.
.TP
.B \fBexternal\fP: \fBBlockDirtyBitmap\fP
bitmap with specified node
.UNINDENT
.SS Since
.sp
4.1
.SS \fBBlockDirtyBitmapMerge\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBnode\fP: \fBstring\fP
name of device/node which the \fBtarget\fP bitmap is tracking
.TP
.B \fBtarget\fP: \fBstring\fP
name of the destination dirty bitmap
.TP
.B \fBbitmaps\fP: \fBarray of BlockDirtyBitmapOrStr\fP
name(s) of the source dirty bitmap(s) at \fBnode\fP and/or fully
specified BlockDirtyBitmap elements. The latter are supported
since 4.1.
.UNINDENT
.SS Since
.sp
4.0
.SS \fBblock\-dirty\-bitmap\-add\fP (Command)
.sp
Create a dirty bitmap with a name on the node, and start tracking the writes.
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBnode\fP is not a valid block device or node, DeviceNotFound
.IP \(bu 2
If \fBname\fP is already taken, GenericError with an explanation
.UNINDENT
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block\-dirty\-bitmap\-add",
     "arguments": { "node": "drive0", "name": "bitmap0" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblock\-dirty\-bitmap\-remove\fP (Command)
.sp
Stop write tracking and remove the dirty bitmap that was created
with block\-dirty\-bitmap\-add. If the bitmap is persistent, remove it from its
storage too.
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBnode\fP is not a valid block device or node, DeviceNotFound
.IP \(bu 2
If \fBname\fP is not found, GenericError with an explanation
.IP \(bu 2
if \fBname\fP is frozen by an operation, GenericError
.UNINDENT
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block\-dirty\-bitmap\-remove",
     "arguments": { "node": "drive0", "name": "bitmap0" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblock\-dirty\-bitmap\-clear\fP (Command)
.sp
Clear (reset) a dirty bitmap on the device, so that an incremental
backup from this point in time forward will only backup clusters
modified after this clear operation.
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBnode\fP is not a valid block device, DeviceNotFound
.IP \(bu 2
If \fBname\fP is not found, GenericError with an explanation
.UNINDENT
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block\-dirty\-bitmap\-clear",
     "arguments": { "node": "drive0", "name": "bitmap0" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblock\-dirty\-bitmap\-enable\fP (Command)
.sp
Enables a dirty bitmap so that it will begin tracking disk changes.
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBnode\fP is not a valid block device, DeviceNotFound
.IP \(bu 2
If \fBname\fP is not found, GenericError with an explanation
.UNINDENT
.SS Since
.sp
4.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block\-dirty\-bitmap\-enable",
     "arguments": { "node": "drive0", "name": "bitmap0" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblock\-dirty\-bitmap\-disable\fP (Command)
.sp
Disables a dirty bitmap so that it will stop tracking disk changes.
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBnode\fP is not a valid block device, DeviceNotFound
.IP \(bu 2
If \fBname\fP is not found, GenericError with an explanation
.UNINDENT
.SS Since
.sp
4.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block\-dirty\-bitmap\-disable",
     "arguments": { "node": "drive0", "name": "bitmap0" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblock\-dirty\-bitmap\-merge\fP (Command)
.sp
Merge dirty bitmaps listed in \fBbitmaps\fP to the \fBtarget\fP dirty bitmap.
Dirty bitmaps in \fBbitmaps\fP will be unchanged, except if it also appears
as the \fBtarget\fP bitmap. Any bits already set in \fBtarget\fP will still be
set after the merge, i.e., this operation does not clear the target.
On error, \fBtarget\fP is unchanged.
.sp
The resulting bitmap will count as dirty any clusters that were dirty in any
of the source bitmaps. This can be used to achieve backup checkpoints, or in
simpler usages, to copy bitmaps.
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBnode\fP is not a valid block device, DeviceNotFound
.IP \(bu 2
If any bitmap in \fBbitmaps\fP or \fBtarget\fP is not found, GenericError
.IP \(bu 2
If any of the bitmaps have different sizes or granularities,
GenericError
.UNINDENT
.SS Since
.sp
4.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block\-dirty\-bitmap\-merge",
     "arguments": { "node": "drive0", "target": "bitmap0",
                    "bitmaps": ["bitmap1"] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBlockDirtyBitmapSha256\fP (Object)
.sp
SHA256 hash of dirty bitmap data
.SS Members
.INDENT 0.0
.TP
.B \fBsha256\fP: \fBstring\fP
ASCII representation of SHA256 bitmap hash
.UNINDENT
.SS Since
.sp
2.10
.SS \fBx\-debug\-block\-dirty\-bitmap\-sha256\fP (Command)
.sp
Get bitmap SHA256.
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
BlockDirtyBitmapSha256 on success
.IP \(bu 2
If \fBnode\fP is not a valid block device, DeviceNotFound
.IP \(bu 2
If \fBname\fP is not found or if hashing has failed, GenericError with an
explanation
.UNINDENT
.SS Since
.sp
2.10
.SS \fBblockdev\-mirror\fP (Command)
.sp
Start mirroring a block device\(aqs writes to a new destination.
.SS Arguments
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP (optional)
identifier for the newly\-created block job. If
omitted, the device name will be used. (Since 2.7)
.TP
.B \fBdevice\fP: \fBstring\fP
The device name or node\-name of a root node whose writes should be
mirrored.
.TP
.B \fBtarget\fP: \fBstring\fP
the id or node\-name of the block device to mirror to. This mustn\(aqt be
attached to guest.
.TP
.B \fBreplaces\fP: \fBstring\fP (optional)
with sync=full graph node name to be replaced by the new
image when a whole image copy is done. This can be used to repair
broken Quorum files.  By default, \fBdevice\fP is replaced, although
implicitly created filters on it are kept.
.TP
.B \fBspeed\fP: \fBint\fP (optional)
the maximum speed, in bytes per second
.TP
.B \fBsync\fP: \fBMirrorSyncMode\fP
what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, or
only new I/O).
.TP
.B \fBgranularity\fP: \fBint\fP (optional)
granularity of the dirty bitmap, default is 64K
if the image format doesn\(aqt have clusters, 4K if the clusters
are smaller than that, else the cluster size.  Must be a
power of 2 between 512 and 64M
.TP
.B \fBbuf\-size\fP: \fBint\fP (optional)
maximum amount of data in flight from source to
target
.TP
.B \fBon\-source\-error\fP: \fBBlockdevOnError\fP (optional)
the action to take on an error on the source,
default \(aqreport\(aq.  \(aqstop\(aq and \(aqenospc\(aq can only be used
if the block device supports io\-status (see BlockInfo).
.TP
.B \fBon\-target\-error\fP: \fBBlockdevOnError\fP (optional)
the action to take on an error on the target,
default \(aqreport\(aq (no limitations, since this applies to
a different block device than \fBdevice\fP).
.TP
.B \fBfilter\-node\-name\fP: \fBstring\fP (optional)
the node name that should be assigned to the
filter driver that the mirror job inserts into the graph
above \fBdevice\fP\&. If this option is not given, a node name is
autogenerated. (Since: 2.9)
.TP
.B \fBcopy\-mode\fP: \fBMirrorCopyMode\fP (optional)
when to copy data to the destination; defaults to \(aqbackground\(aq
(Since: 3.0)
.TP
.B \fBauto\-finalize\fP: \fBboolean\fP (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for \fBblock\-job\-finalize\fP before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 3.1)
.TP
.B \fBauto\-dismiss\fP: \fBboolean\fP (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits \fBblock\-job\-dismiss\fP\&.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 3.1)
.UNINDENT
.SS Returns
.sp
nothing on success.
.SS Since
.sp
2.6
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-mirror",
     "arguments": { "device": "ide\-hd0",
                    "target": "target0",
                    "sync": "full" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBlockIOThrottle\fP (Object)
.sp
A set of parameters describing block throttling.
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
Block device name
.TP
.B \fBid\fP: \fBstring\fP (optional)
The name or QOM path of the guest device (since: 2.8)
.TP
.B \fBbps\fP: \fBint\fP
total throughput limit in bytes per second
.TP
.B \fBbps_rd\fP: \fBint\fP
read throughput limit in bytes per second
.TP
.B \fBbps_wr\fP: \fBint\fP
write throughput limit in bytes per second
.TP
.B \fBiops\fP: \fBint\fP
total I/O operations per second
.TP
.B \fBiops_rd\fP: \fBint\fP
read I/O operations per second
.TP
.B \fBiops_wr\fP: \fBint\fP
write I/O operations per second
.TP
.B \fBbps_max\fP: \fBint\fP (optional)
total throughput limit during bursts,
in bytes (Since 1.7)
.TP
.B \fBbps_rd_max\fP: \fBint\fP (optional)
read throughput limit during bursts,
in bytes (Since 1.7)
.TP
.B \fBbps_wr_max\fP: \fBint\fP (optional)
write throughput limit during bursts,
in bytes (Since 1.7)
.TP
.B \fBiops_max\fP: \fBint\fP (optional)
total I/O operations per second during bursts,
in bytes (Since 1.7)
.TP
.B \fBiops_rd_max\fP: \fBint\fP (optional)
read I/O operations per second during bursts,
in bytes (Since 1.7)
.TP
.B \fBiops_wr_max\fP: \fBint\fP (optional)
write I/O operations per second during bursts,
in bytes (Since 1.7)
.TP
.B \fBbps_max_length\fP: \fBint\fP (optional)
maximum length of the \fBbps_max\fP burst
period, in seconds. It must only
be set if \fBbps_max\fP is set as well.
Defaults to 1. (Since 2.6)
.TP
.B \fBbps_rd_max_length\fP: \fBint\fP (optional)
maximum length of the \fBbps_rd_max\fP
burst period, in seconds. It must only
be set if \fBbps_rd_max\fP is set as well.
Defaults to 1. (Since 2.6)
.TP
.B \fBbps_wr_max_length\fP: \fBint\fP (optional)
maximum length of the \fBbps_wr_max\fP
burst period, in seconds. It must only
be set if \fBbps_wr_max\fP is set as well.
Defaults to 1. (Since 2.6)
.TP
.B \fBiops_max_length\fP: \fBint\fP (optional)
maximum length of the \fBiops\fP burst
period, in seconds. It must only
be set if \fBiops_max\fP is set as well.
Defaults to 1. (Since 2.6)
.TP
.B \fBiops_rd_max_length\fP: \fBint\fP (optional)
maximum length of the \fBiops_rd_max\fP
burst period, in seconds. It must only
be set if \fBiops_rd_max\fP is set as well.
Defaults to 1. (Since 2.6)
.TP
.B \fBiops_wr_max_length\fP: \fBint\fP (optional)
maximum length of the \fBiops_wr_max\fP
burst period, in seconds. It must only
be set if \fBiops_wr_max\fP is set as well.
Defaults to 1. (Since 2.6)
.TP
.B \fBiops_size\fP: \fBint\fP (optional)
an I/O size in bytes (Since 1.7)
.TP
.B \fBgroup\fP: \fBstring\fP (optional)
throttle group name (Since 2.4)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBdevice\fP is deprecated.  Use \fBid\fP instead.
.UNINDENT
.SS Since
.sp
1.1
.SS \fBThrottleLimits\fP (Object)
.sp
Limit parameters for throttling.
Since some limit combinations are illegal, limits should always be set in one
transaction. All fields are optional. When setting limits, if a field is
missing the current value is not changed.
.SS Members
.INDENT 0.0
.TP
.B \fBiops\-total\fP: \fBint\fP (optional)
limit total I/O operations per second
.TP
.B \fBiops\-total\-max\fP: \fBint\fP (optional)
I/O operations burst
.TP
.B \fBiops\-total\-max\-length\fP: \fBint\fP (optional)
length of the iops\-total\-max burst period, in seconds
It must only be set if \fBiops\-total\-max\fP is set as well.
.TP
.B \fBiops\-read\fP: \fBint\fP (optional)
limit read operations per second
.TP
.B \fBiops\-read\-max\fP: \fBint\fP (optional)
I/O operations read burst
.TP
.B \fBiops\-read\-max\-length\fP: \fBint\fP (optional)
length of the iops\-read\-max burst period, in seconds
It must only be set if \fBiops\-read\-max\fP is set as well.
.TP
.B \fBiops\-write\fP: \fBint\fP (optional)
limit write operations per second
.TP
.B \fBiops\-write\-max\fP: \fBint\fP (optional)
I/O operations write burst
.TP
.B \fBiops\-write\-max\-length\fP: \fBint\fP (optional)
length of the iops\-write\-max burst period, in seconds
It must only be set if \fBiops\-write\-max\fP is set as well.
.TP
.B \fBbps\-total\fP: \fBint\fP (optional)
limit total bytes per second
.TP
.B \fBbps\-total\-max\fP: \fBint\fP (optional)
total bytes burst
.TP
.B \fBbps\-total\-max\-length\fP: \fBint\fP (optional)
length of the bps\-total\-max burst period, in seconds.
It must only be set if \fBbps\-total\-max\fP is set as well.
.TP
.B \fBbps\-read\fP: \fBint\fP (optional)
limit read bytes per second
.TP
.B \fBbps\-read\-max\fP: \fBint\fP (optional)
total bytes read burst
.TP
.B \fBbps\-read\-max\-length\fP: \fBint\fP (optional)
length of the bps\-read\-max burst period, in seconds
It must only be set if \fBbps\-read\-max\fP is set as well.
.TP
.B \fBbps\-write\fP: \fBint\fP (optional)
limit write bytes per second
.TP
.B \fBbps\-write\-max\fP: \fBint\fP (optional)
total bytes write burst
.TP
.B \fBbps\-write\-max\-length\fP: \fBint\fP (optional)
length of the bps\-write\-max burst period, in seconds
It must only be set if \fBbps\-write\-max\fP is set as well.
.TP
.B \fBiops\-size\fP: \fBint\fP (optional)
when limiting by iops max size of an I/O in bytes
.UNINDENT
.SS Since
.sp
2.11
.SS \fBThrottleGroupProperties\fP (Object)
.sp
Properties for throttle\-group objects.
.SS Members
.INDENT 0.0
.TP
.B \fBlimits\fP: \fBThrottleLimits\fP (optional)
limits to apply for this throttle group
.TP
.B \fBx\-iops\-total\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-iops\-total\-max\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-iops\-total\-max\-length\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-iops\-read\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-iops\-read\-max\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-iops\-read\-max\-length\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-iops\-write\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-iops\-write\-max\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-iops\-write\-max\-length\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-bps\-total\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-bps\-total\-max\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-bps\-total\-max\-length\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-bps\-read\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-bps\-read\-max\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-bps\-read\-max\-length\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-bps\-write\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-bps\-write\-max\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-bps\-write\-max\-length\fP: \fBint\fP (optional)
Not documented
.TP
.B \fBx\-iops\-size\fP: \fBint\fP (optional)
Not documented
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
All members starting with x\- are aliases for the same key
without x\- in the \fBlimits\fP object.  This is not a stable
interface and may be removed or changed incompatibly in
the future.  Use \fBlimits\fP for a supported stable
interface.
.UNINDENT
.SS Since
.sp
2.11
.SS \fBblock\-stream\fP (Command)
.sp
Copy data from a backing file into a block device.
.sp
The block streaming operation is performed in the background until the entire
backing file has been copied.  This command returns immediately once streaming
has started.  The status of ongoing block streaming operations can be checked
with query\-block\-jobs.  The operation can be stopped before it has completed
using the block\-job\-cancel command.
.sp
The node that receives the data is called the top image, can be located in
any part of the chain (but always above the base image; see below) and can be
specified using its device or node name. Earlier qemu versions only allowed
\(aqdevice\(aq to name the top level node; presence of the \(aqbase\-node\(aq parameter
during introspection can be used as a witness of the enhanced semantics
of \(aqdevice\(aq.
.sp
If a base file is specified then sectors are not copied from that base file and
its backing chain.  This can be used to stream a subset of the backing file
chain instead of flattening the entire image.
When streaming completes the image file will have the base file as its backing
file, unless that node was changed while the job was running.  In that case,
base\(aqs parent\(aqs backing (or filtered, whichever exists) child (i.e., base at
the beginning of the job) will be the new backing file.
.sp
On successful completion the image file is updated to drop the backing file
and the BLOCK_JOB_COMPLETED event is emitted.
.sp
In case \fBdevice\fP is a filter node, block\-stream modifies the first non\-filter
overlay node below it to point to the new backing node instead of modifying
\fBdevice\fP itself.
.SS Arguments
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP (optional)
identifier for the newly\-created block job. If
omitted, the device name will be used. (Since 2.7)
.TP
.B \fBdevice\fP: \fBstring\fP
the device or node name of the top image
.TP
.B \fBbase\fP: \fBstring\fP (optional)
the common backing file name.
It cannot be set if \fBbase\-node\fP or \fBbottom\fP is also set.
.TP
.B \fBbase\-node\fP: \fBstring\fP (optional)
the node name of the backing file.
It cannot be set if \fBbase\fP or \fBbottom\fP is also set. (Since 2.8)
.TP
.B \fBbottom\fP: \fBstring\fP (optional)
the last node in the chain that should be streamed into
top. It cannot be set if \fBbase\fP or \fBbase\-node\fP is also set.
It cannot be filter node. (Since 6.0)
.TP
.B \fBbacking\-file\fP: \fBstring\fP (optional)
The backing file string to write into the top
image. This filename is not validated.
.sp
If a pathname string is such that it cannot be
resolved by QEMU, that means that subsequent QMP or
HMP commands must use node\-names for the image in
question, as filename lookup methods will fail.
.sp
If not specified, QEMU will automatically determine
the backing file string to use, or error out if there
is no obvious choice.  Care should be taken when
specifying the string, to specify a valid filename or
protocol.
(Since 2.1)
.TP
.B \fBspeed\fP: \fBint\fP (optional)
the maximum speed, in bytes per second
.TP
.B \fBon\-error\fP: \fBBlockdevOnError\fP (optional)
the action to take on an error (default report).
\(aqstop\(aq and \(aqenospc\(aq can only be used if the block device
supports io\-status (see BlockInfo).  Since 1.3.
.TP
.B \fBfilter\-node\-name\fP: \fBstring\fP (optional)
the node name that should be assigned to the
filter driver that the stream job inserts into the graph
above \fBdevice\fP\&. If this option is not given, a node name is
autogenerated. (Since: 6.0)
.TP
.B \fBauto\-finalize\fP: \fBboolean\fP (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for \fBblock\-job\-finalize\fP before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 3.1)
.TP
.B \fBauto\-dismiss\fP: \fBboolean\fP (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits \fBblock\-job\-dismiss\fP\&.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 3.1)
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success.
.IP \(bu 2
If \fBdevice\fP does not exist, DeviceNotFound.
.UNINDENT
.SS Since
.sp
1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block\-stream",
     "arguments": { "device": "virtio0",
                    "base": "/tmp/master.qcow2" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblock\-job\-set\-speed\fP (Command)
.sp
Set maximum speed for a background block operation.
.sp
This command can only be issued when there is an active block job.
.sp
Throttling can be disabled by setting the speed to 0.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
.TP
.B \fBspeed\fP: \fBint\fP
the maximum speed, in bytes per second, or 0 for unlimited.
Defaults to 0.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If no background operation is active on this device, DeviceNotActive
.UNINDENT
.SS Since
.sp
1.1
.SS \fBblock\-job\-cancel\fP (Command)
.sp
Stop an active background block operation.
.sp
This command returns immediately after marking the active background block
operation for cancellation.  It is an error to call this command if no
operation is in progress.
.sp
The operation will cancel as soon as possible and then emit the
BLOCK_JOB_CANCELLED event.  Before that happens the job is still visible when
enumerated using query\-block\-jobs.
.sp
Note that if you issue \(aqblock\-job\-cancel\(aq after \(aqdrive\-mirror\(aq has indicated
(via the event BLOCK_JOB_READY) that the source and destination are
synchronized, then the event triggered by this command changes to
BLOCK_JOB_COMPLETED, to indicate that the mirroring has ended and the
destination now has a point\-in\-time copy tied to the time of the cancellation.
.sp
For streaming, the image file retains its backing file unless the streaming
operation happens to complete just as it is being cancelled.  A new streaming
operation can be started at a later time to finish copying all data from the
backing file.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
.TP
.B \fBforce\fP: \fBboolean\fP (optional)
If true, and the job has already emitted the event BLOCK_JOB_READY,
abandon the job immediately (even if it is paused) instead of waiting
for the destination to complete its final synchronization (since 1.3)
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If no background operation is active on this device, DeviceNotActive
.UNINDENT
.SS Since
.sp
1.1
.SS \fBblock\-job\-pause\fP (Command)
.sp
Pause an active background block operation.
.sp
This command returns immediately after marking the active background block
operation for pausing.  It is an error to call this command if no
operation is in progress or if the job is already paused.
.sp
The operation will pause as soon as possible.  No event is emitted when
the operation is actually paused.  Cancelling a paused job automatically
resumes it.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If no background operation is active on this device, DeviceNotActive
.UNINDENT
.SS Since
.sp
1.3
.SS \fBblock\-job\-resume\fP (Command)
.sp
Resume an active background block operation.
.sp
This command returns immediately after resuming a paused background block
operation.  It is an error to call this command if no operation is in
progress or if the job is not paused.
.sp
This command also clears the error status of the job.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If no background operation is active on this device, DeviceNotActive
.UNINDENT
.SS Since
.sp
1.3
.SS \fBblock\-job\-complete\fP (Command)
.sp
Manually trigger completion of an active background block operation.  This
is supported for drive mirroring, where it also switches the device to
write to the target path only.  The ability to complete is signaled with
a BLOCK_JOB_READY event.
.sp
This command completes an active background block operation synchronously.
The ordering of this command\(aqs return with the BLOCK_JOB_COMPLETED event
is not defined.  Note that if an I/O error occurs during the processing of
this command: 1) the command itself will fail; 2) the error will be processed
according to the rerror/werror arguments that were specified when starting
the operation.
.sp
A cancelled or paused job cannot be completed.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If no background operation is active on this device, DeviceNotActive
.UNINDENT
.SS Since
.sp
1.3
.SS \fBblock\-job\-dismiss\fP (Command)
.sp
For jobs that have already concluded, remove them from the block\-job\-query
list. This command only needs to be run for jobs which were started with
QEMU 2.12+ job lifetime management semantics.
.sp
This command will refuse to operate on any job that has not yet reached
its terminal state, JOB_STATUS_CONCLUDED. For jobs that make use of the
BLOCK_JOB_READY event, block\-job\-cancel or block\-job\-complete will still need
to be used as appropriate.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The job identifier.
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
2.12
.SS \fBblock\-job\-finalize\fP (Command)
.sp
Once a job that has manual=true reaches the pending state, it can be
instructed to finalize any graph changes and do any necessary cleanup
via this command.
For jobs in a transaction, instructing one job to finalize will force
ALL jobs in the transaction to finalize, so it is only necessary to instruct
a single member job to finalize.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The job identifier.
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
2.12
.SS \fBBlockdevDiscardOptions\fP (Enum)
.sp
Determines how to handle discard requests.
.SS Values
.INDENT 0.0
.TP
.B \fBignore\fP
Ignore the request
.TP
.B \fBunmap\fP
Forward as an unmap request
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevDetectZeroesOptions\fP (Enum)
.sp
Describes the operation mode for the automatic conversion of plain
zero writes by the OS to driver specific optimized zero write commands.
.SS Values
.INDENT 0.0
.TP
.B \fBoff\fP
Disabled (default)
.TP
.B \fBon\fP
Enabled
.TP
.B \fBunmap\fP
Enabled and even try to unmap blocks if possible. This requires
also that \fBBlockdevDiscardOptions\fP is set to unmap for this device.
.UNINDENT
.SS Since
.sp
2.1
.SS \fBBlockdevAioOptions\fP (Enum)
.sp
Selects the AIO backend to handle I/O requests
.SS Values
.INDENT 0.0
.TP
.B \fBthreads\fP
Use qemu\(aqs thread pool
.TP
.B \fBnative\fP
Use native AIO backend (only Linux and Windows)
.TP
\fBio_uring\fP (\fBIf: \fP\fBCONFIG_LINUX_IO_URING\fP)
Use linux io_uring (since 5.0)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevCacheOptions\fP (Object)
.sp
Includes cache\-related options for block devices
.SS Members
.INDENT 0.0
.TP
.B \fBdirect\fP: \fBboolean\fP (optional)
enables use of O_DIRECT (bypass the host page cache;
default: false)
.TP
.B \fBno\-flush\fP: \fBboolean\fP (optional)
ignore any flush requests for the device (default:
false)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevDriver\fP (Enum)
.sp
Drivers that are supported in block device operations.
.SS Values
.INDENT 0.0
.TP
.B \fBthrottle\fP
Since 2.11
.TP
.B \fBnvme\fP
Since 2.12
.TP
.B \fBcopy\-on\-read\fP
Since 3.0
.TP
.B \fBblklogwrites\fP
Since 3.0
.TP
.B \fBblkreplay\fP
Since 4.2
.TP
.B \fBcompress\fP
Since 5.0
.TP
.B \fBcopy\-before\-write\fP
Since 6.2
.TP
.B \fBsnapshot\-access\fP
Since 7.0
.TP
.B \fBblkdebug\fP
Not documented
.TP
.B \fBblkverify\fP
Not documented
.TP
.B \fBbochs\fP
Not documented
.TP
.B \fBcloop\fP
Not documented
.TP
.B \fBdmg\fP
Not documented
.TP
.B \fBfile\fP
Not documented
.TP
.B \fBftp\fP
Not documented
.TP
.B \fBftps\fP
Not documented
.TP
.B \fBgluster\fP
Not documented
.TP
\fBhost_cdrom\fP (\fBIf: \fP\fBHAVE_HOST_BLOCK_DEVICE\fP)
Not documented
.TP
\fBhost_device\fP (\fBIf: \fP\fBHAVE_HOST_BLOCK_DEVICE\fP)
Not documented
.TP
.B \fBhttp\fP
Not documented
.TP
.B \fBhttps\fP
Not documented
.TP
\fBio_uring\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
Not documented
.TP
.B \fBiscsi\fP
Not documented
.TP
.B \fBluks\fP
Not documented
.TP
.B \fBnbd\fP
Not documented
.TP
.B \fBnfs\fP
Not documented
.TP
.B \fBnull\-aio\fP
Not documented
.TP
.B \fBnull\-co\fP
Not documented
.TP
\fBnvme\-io_uring\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
Not documented
.TP
.B \fBparallels\fP
Not documented
.TP
.B \fBpreallocate\fP
Not documented
.TP
.B \fBqcow\fP
Not documented
.TP
.B \fBqcow2\fP
Not documented
.TP
.B \fBqed\fP
Not documented
.TP
.B \fBquorum\fP
Not documented
.TP
.B \fBraw\fP
Not documented
.TP
.B \fBrbd\fP
Not documented
.TP
\fBreplication\fP (\fBIf: \fP\fBCONFIG_REPLICATION\fP)
Not documented
.TP
.B \fBssh\fP
Not documented
.TP
.B \fBvdi\fP
Not documented
.TP
.B \fBvhdx\fP
Not documented
.TP
\fBvirtio\-blk\-vfio\-pci\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
Not documented
.TP
\fBvirtio\-blk\-vhost\-user\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
Not documented
.TP
\fBvirtio\-blk\-vhost\-vdpa\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
Not documented
.TP
.B \fBvmdk\fP
Not documented
.TP
.B \fBvpc\fP
Not documented
.TP
.B \fBvvfat\fP
Not documented
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsFile\fP (Object)
.sp
Driver specific block device options for the file backend.
.SS Members
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
path to the image file
.TP
.B \fBpr\-manager\fP: \fBstring\fP (optional)
the id for the object that will handle persistent reservations
for this device (default: none, forward the commands via SG_IO;
since 2.11)
.TP
.B \fBaio\fP: \fBBlockdevAioOptions\fP (optional)
AIO backend (default: threads) (since: 2.8)
.TP
.B \fBaio\-max\-batch\fP: \fBint\fP (optional)
maximum number of requests to batch together into a single
submission in the AIO backend. The smallest value between
this and the aio\-max\-batch value of the IOThread object is
chosen.
0 means that the AIO backend will handle it automatically.
(default: 0, since 6.2)
.TP
.B \fBlocking\fP: \fBOnOffAuto\fP (optional)
whether to enable file locking. If set to \(aqauto\(aq, only enable
when Open File Descriptor (OFD) locking API is available
(default: auto, since 2.10)
.TP
\fBdrop\-cache\fP: \fBboolean\fP (optional) (\fBIf: \fP\fBCONFIG_LINUX\fP)
invalidate page cache during live migration.  This prevents
stale data on the migration destination with cache.direct=off.
Currently only supported on Linux hosts.
(default: on, since: 4.0)
.TP
.B \fBx\-check\-cache\-dropped\fP: \fBboolean\fP (optional)
whether to check that page cache was dropped on live
migration.  May cause noticeable delays if the image
file is large, do not use in production.
(default: off) (since: 3.0)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdynamic\-auto\-read\-only\fP
If present, enabled auto\-read\-only means that the
driver will open the image read\-only at first,
dynamically reopen the image file read\-write when
the first writer is attached to the node and reopen
read\-only when the last writer is detached. This
allows giving QEMU write permissions only on demand
when an operation actually needs write access.
.TP
.B \fBunstable\fP
Member x\-check\-cache\-dropped is meant for debugging.
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsNull\fP (Object)
.sp
Driver specific block device options for the null backend.
.SS Members
.INDENT 0.0
.TP
.B \fBsize\fP: \fBint\fP (optional)
size of the device in bytes.
.TP
.B \fBlatency\-ns\fP: \fBint\fP (optional)
emulated latency (in nanoseconds) in processing
requests. Default to zero which completes requests immediately.
(Since 2.4)
.TP
.B \fBread\-zeroes\fP: \fBboolean\fP (optional)
if true, reads from the device produce zeroes; if false, the
buffer is left unchanged. (default: false; since: 4.1)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsNVMe\fP (Object)
.sp
Driver specific block device options for the NVMe backend.
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
PCI controller address of the NVMe device in
format hhhh:bb:ss.f (host:bus:slot.function)
.TP
.B \fBnamespace\fP: \fBint\fP
namespace number of the device, starting from 1.
.UNINDENT
Note that the PCI \fBdevice\fP must have been unbound from any host
kernel driver before instructing QEMU to add the blockdev.
.SS Since
.sp
2.12
.SS \fBBlockdevOptionsVVFAT\fP (Object)
.sp
Driver specific block device options for the vvfat protocol.
.SS Members
.INDENT 0.0
.TP
.B \fBdir\fP: \fBstring\fP
directory to be exported as FAT image
.TP
.B \fBfat\-type\fP: \fBint\fP (optional)
FAT type: 12, 16 or 32
.TP
.B \fBfloppy\fP: \fBboolean\fP (optional)
whether to export a floppy image (true) or
partitioned hard disk (false; default)
.TP
.B \fBlabel\fP: \fBstring\fP (optional)
set the volume label, limited to 11 bytes. FAT16 and
FAT32 traditionally have some restrictions on labels, which are
ignored by most operating systems. Defaults to "QEMU VVFAT".
(since 2.4)
.TP
.B \fBrw\fP: \fBboolean\fP (optional)
whether to allow write operations (default: false)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsGenericFormat\fP (Object)
.sp
Driver specific block device options for image format that have no option
besides their data source.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
reference to or definition of the data source block device
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsLUKS\fP (Object)
.sp
Driver specific block device options for LUKS.
.SS Members
.INDENT 0.0
.TP
.B \fBkey\-secret\fP: \fBstring\fP (optional)
the ID of a QCryptoSecret object providing
the decryption key (since 2.6). Mandatory except when
doing a metadata\-only probe of the image.
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsGenericCOWFormat\fP (Object)
.sp
Driver specific block device options for image format that have no option
besides their data source and an optional backing file.
.SS Members
.INDENT 0.0
.TP
.B \fBbacking\fP: \fBBlockdevRefOrNull\fP (optional)
reference to or definition of the backing file block
device, null disables the backing file entirely.
Defaults to the backing file stored the image file.
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP
.UNINDENT
.SS Since
.sp
2.9
.SS \fBQcow2OverlapCheckMode\fP (Enum)
.sp
General overlap check modes.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
Do not perform any checks
.TP
.B \fBconstant\fP
Perform only checks which can be done in constant time and
without reading anything from disk
.TP
.B \fBcached\fP
Perform only checks which can be done without reading anything
from disk
.TP
.B \fBall\fP
Perform all available overlap checks
.UNINDENT
.SS Since
.sp
2.9
.SS \fBQcow2OverlapCheckFlags\fP (Object)
.sp
Structure of flags for each metadata structure. Setting a field to \(aqtrue\(aq
makes qemu guard that structure against unintended overwriting. The default
value is chosen according to the template given.
.SS Members
.INDENT 0.0
.TP
.B \fBtemplate\fP: \fBQcow2OverlapCheckMode\fP (optional)
Specifies a template mode which can be adjusted using the other
flags, defaults to \(aqcached\(aq
.TP
.B \fBbitmap\-directory\fP: \fBboolean\fP (optional)
since 3.0
.TP
.B \fBmain\-header\fP: \fBboolean\fP (optional)
Not documented
.TP
.B \fBactive\-l1\fP: \fBboolean\fP (optional)
Not documented
.TP
.B \fBactive\-l2\fP: \fBboolean\fP (optional)
Not documented
.TP
.B \fBrefcount\-table\fP: \fBboolean\fP (optional)
Not documented
.TP
.B \fBrefcount\-block\fP: \fBboolean\fP (optional)
Not documented
.TP
.B \fBsnapshot\-table\fP: \fBboolean\fP (optional)
Not documented
.TP
.B \fBinactive\-l1\fP: \fBboolean\fP (optional)
Not documented
.TP
.B \fBinactive\-l2\fP: \fBboolean\fP (optional)
Not documented
.UNINDENT
.SS Since
.sp
2.9
.SS \fBQcow2OverlapChecks\fP (Alternate)
.sp
Specifies which metadata structures should be guarded against unintended
overwriting.
.SS Members
.INDENT 0.0
.TP
.B \fBflags\fP: \fBQcow2OverlapCheckFlags\fP
set of flags for separate specification of each metadata structure
type
.TP
.B \fBmode\fP: \fBQcow2OverlapCheckMode\fP
named mode which chooses a specific set of flags
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevQcowEncryptionFormat\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBaes\fP
AES\-CBC with plain64 initialization vectors
.UNINDENT
.SS Since
.sp
2.10
.SS \fBBlockdevQcowEncryption\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBformat\fP: \fBBlockdevQcowEncryptionFormat\fP
Not documented
.TP
.B The members of \fBQCryptoBlockOptionsQCow\fP when \fBformat\fP is \fB"aes"\fP
.UNINDENT
.SS Since
.sp
2.10
.SS \fBBlockdevOptionsQcow\fP (Object)
.sp
Driver specific block device options for qcow.
.SS Members
.INDENT 0.0
.TP
.B \fBencrypt\fP: \fBBlockdevQcowEncryption\fP (optional)
Image decryption options. Mandatory for
encrypted images, except when doing a metadata\-only
probe of the image.
.TP
.B The members of \fBBlockdevOptionsGenericCOWFormat\fP
.UNINDENT
.SS Since
.sp
2.10
.SS \fBBlockdevQcow2EncryptionFormat\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBaes\fP
AES\-CBC with plain64 initialization vectors
.TP
.B \fBluks\fP
Not documented
.UNINDENT
.SS Since
.sp
2.10
.SS \fBBlockdevQcow2Encryption\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBformat\fP: \fBBlockdevQcow2EncryptionFormat\fP
Not documented
.TP
.B The members of \fBQCryptoBlockOptionsQCow\fP when \fBformat\fP is \fB"aes"\fP
.TP
.B The members of \fBQCryptoBlockOptionsLUKS\fP when \fBformat\fP is \fB"luks"\fP
.UNINDENT
.SS Since
.sp
2.10
.SS \fBBlockdevOptionsPreallocate\fP (Object)
.sp
Filter driver intended to be inserted between format and protocol node
and do preallocation in protocol node on write.
.SS Members
.INDENT 0.0
.TP
.B \fBprealloc\-align\fP: \fBint\fP (optional)
on preallocation, align file length to this number,
default 1048576 (1M)
.TP
.B \fBprealloc\-size\fP: \fBint\fP (optional)
how much to preallocate, default 134217728 (128M)
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP
.UNINDENT
.SS Since
.sp
6.0
.SS \fBBlockdevOptionsQcow2\fP (Object)
.sp
Driver specific block device options for qcow2.
.SS Members
.INDENT 0.0
.TP
.B \fBlazy\-refcounts\fP: \fBboolean\fP (optional)
whether to enable the lazy refcounts
feature (default is taken from the image file)
.TP
.B \fBpass\-discard\-request\fP: \fBboolean\fP (optional)
whether discard requests to the qcow2
device should be forwarded to the data source
.TP
.B \fBpass\-discard\-snapshot\fP: \fBboolean\fP (optional)
whether discard requests for the data source
should be issued when a snapshot operation (e.g.
deleting a snapshot) frees clusters in the qcow2 file
.TP
.B \fBpass\-discard\-other\fP: \fBboolean\fP (optional)
whether discard requests for the data source
should be issued on other occasions where a cluster
gets freed
.TP
.B \fBoverlap\-check\fP: \fBQcow2OverlapChecks\fP (optional)
which overlap checks to perform for writes
to the image, defaults to \(aqcached\(aq (since 2.2)
.TP
.B \fBcache\-size\fP: \fBint\fP (optional)
the maximum total size of the L2 table and
refcount block caches in bytes (since 2.2)
.TP
.B \fBl2\-cache\-size\fP: \fBint\fP (optional)
the maximum size of the L2 table cache in
bytes (since 2.2)
.TP
.B \fBl2\-cache\-entry\-size\fP: \fBint\fP (optional)
the size of each entry in the L2 cache in
bytes. It must be a power of two between 512
and the cluster size. The default value is
the cluster size (since 2.12)
.TP
.B \fBrefcount\-cache\-size\fP: \fBint\fP (optional)
the maximum size of the refcount block cache
in bytes (since 2.2)
.TP
.B \fBcache\-clean\-interval\fP: \fBint\fP (optional)
clean unused entries in the L2 and refcount
caches. The interval is in seconds. The default value
is 600 on supporting platforms, and 0 on other
platforms. 0 disables this feature. (since 2.5)
.TP
.B \fBencrypt\fP: \fBBlockdevQcow2Encryption\fP (optional)
Image decryption options. Mandatory for
encrypted images, except when doing a metadata\-only
probe of the image. (since 2.10)
.TP
.B \fBdata\-file\fP: \fBBlockdevRef\fP (optional)
reference to or definition of the external data file.
This may only be specified for images that require an
external data file. If it is not specified for such
an image, the data file name is loaded from the image
file. (since 4.0)
.TP
.B The members of \fBBlockdevOptionsGenericCOWFormat\fP
.UNINDENT
.SS Since
.sp
2.9
.SS \fBSshHostKeyCheckMode\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
Don\(aqt check the host key at all
.TP
.B \fBhash\fP
Compare the host key with a given hash
.TP
.B \fBknown_hosts\fP
Check the host key against the known_hosts file
.UNINDENT
.SS Since
.sp
2.12
.SS \fBSshHostKeyCheckHashType\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBmd5\fP
The given hash is an md5 hash
.TP
.B \fBsha1\fP
The given hash is an sha1 hash
.TP
.B \fBsha256\fP
The given hash is an sha256 hash
.UNINDENT
.SS Since
.sp
2.12
.SS \fBSshHostKeyHash\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBSshHostKeyCheckHashType\fP
The hash algorithm used for the hash
.TP
.B \fBhash\fP: \fBstring\fP
The expected hash value
.UNINDENT
.SS Since
.sp
2.12
.SS \fBSshHostKeyCheck\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBmode\fP: \fBSshHostKeyCheckMode\fP
Not documented
.TP
.B The members of \fBSshHostKeyHash\fP when \fBmode\fP is \fB"hash"\fP
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevOptionsSsh\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBserver\fP: \fBInetSocketAddress\fP
host address
.TP
.B \fBpath\fP: \fBstring\fP
path to the image on the host
.TP
.B \fBuser\fP: \fBstring\fP (optional)
user as which to connect, defaults to current local user name
.TP
.B \fBhost\-key\-check\fP: \fBSshHostKeyCheck\fP (optional)
Defines how and what to check the host key against
(default: known_hosts)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlkdebugEvent\fP (Enum)
.sp
Trigger events supported by blkdebug.
.SS Values
.INDENT 0.0
.TP
.B \fBl1_shrink_write_table\fP
write zeros to the l1 table to shrink image.
(since 2.11)
.TP
.B \fBl1_shrink_free_l2_clusters\fP
discard the l2 tables. (since 2.11)
.TP
.B \fBcor_write\fP
a write due to copy\-on\-read (since 2.11)
.TP
.B \fBcluster_alloc_space\fP
an allocation of file space for a cluster (since 4.1)
.TP
.B \fBnone\fP
triggers once at creation of the blkdebug node (since 4.1)
.TP
.B \fBl1_update\fP
Not documented
.TP
.B \fBl1_grow_alloc_table\fP
Not documented
.TP
.B \fBl1_grow_write_table\fP
Not documented
.TP
.B \fBl1_grow_activate_table\fP
Not documented
.TP
.B \fBl2_load\fP
Not documented
.TP
.B \fBl2_update\fP
Not documented
.TP
.B \fBl2_update_compressed\fP
Not documented
.TP
.B \fBl2_alloc_cow_read\fP
Not documented
.TP
.B \fBl2_alloc_write\fP
Not documented
.TP
.B \fBread_aio\fP
Not documented
.TP
.B \fBread_backing_aio\fP
Not documented
.TP
.B \fBread_compressed\fP
Not documented
.TP
.B \fBwrite_aio\fP
Not documented
.TP
.B \fBwrite_compressed\fP
Not documented
.TP
.B \fBvmstate_load\fP
Not documented
.TP
.B \fBvmstate_save\fP
Not documented
.TP
.B \fBcow_read\fP
Not documented
.TP
.B \fBcow_write\fP
Not documented
.TP
.B \fBreftable_load\fP
Not documented
.TP
.B \fBreftable_grow\fP
Not documented
.TP
.B \fBreftable_update\fP
Not documented
.TP
.B \fBrefblock_load\fP
Not documented
.TP
.B \fBrefblock_update\fP
Not documented
.TP
.B \fBrefblock_update_part\fP
Not documented
.TP
.B \fBrefblock_alloc\fP
Not documented
.TP
.B \fBrefblock_alloc_hookup\fP
Not documented
.TP
.B \fBrefblock_alloc_write\fP
Not documented
.TP
.B \fBrefblock_alloc_write_blocks\fP
Not documented
.TP
.B \fBrefblock_alloc_write_table\fP
Not documented
.TP
.B \fBrefblock_alloc_switch_table\fP
Not documented
.TP
.B \fBcluster_alloc\fP
Not documented
.TP
.B \fBcluster_alloc_bytes\fP
Not documented
.TP
.B \fBcluster_free\fP
Not documented
.TP
.B \fBflush_to_os\fP
Not documented
.TP
.B \fBflush_to_disk\fP
Not documented
.TP
.B \fBpwritev_rmw_head\fP
Not documented
.TP
.B \fBpwritev_rmw_after_head\fP
Not documented
.TP
.B \fBpwritev_rmw_tail\fP
Not documented
.TP
.B \fBpwritev_rmw_after_tail\fP
Not documented
.TP
.B \fBpwritev\fP
Not documented
.TP
.B \fBpwritev_zero\fP
Not documented
.TP
.B \fBpwritev_done\fP
Not documented
.TP
.B \fBempty_image_prepare\fP
Not documented
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlkdebugIOType\fP (Enum)
.sp
Kinds of I/O that blkdebug can inject errors in.
.SS Values
.INDENT 0.0
.TP
.B \fBread\fP
\&.bdrv_co_preadv()
.TP
.B \fBwrite\fP
\&.bdrv_co_pwritev()
.TP
.B \fBwrite\-zeroes\fP
\&.bdrv_co_pwrite_zeroes()
.TP
.B \fBdiscard\fP
\&.bdrv_co_pdiscard()
.TP
.B \fBflush\fP
\&.bdrv_co_flush_to_disk()
.TP
.B \fBblock\-status\fP
\&.bdrv_co_block_status()
.UNINDENT
.SS Since
.sp
4.1
.SS \fBBlkdebugInjectErrorOptions\fP (Object)
.sp
Describes a single error injection for blkdebug.
.SS Members
.INDENT 0.0
.TP
.B \fBevent\fP: \fBBlkdebugEvent\fP
trigger event
.TP
.B \fBstate\fP: \fBint\fP (optional)
the state identifier blkdebug needs to be in to
actually trigger the event; defaults to "any"
.TP
.B \fBiotype\fP: \fBBlkdebugIOType\fP (optional)
the type of I/O operations on which this error should
be injected; defaults to "all read, write,
write\-zeroes, discard, and flush operations"
(since: 4.1)
.TP
.B \fBerrno\fP: \fBint\fP (optional)
error identifier (errno) to be returned; defaults to
EIO
.TP
.B \fBsector\fP: \fBint\fP (optional)
specifies the sector index which has to be affected
in order to actually trigger the event; defaults to "any
sector"
.TP
.B \fBonce\fP: \fBboolean\fP (optional)
disables further events after this one has been
triggered; defaults to false
.TP
.B \fBimmediately\fP: \fBboolean\fP (optional)
fail immediately; defaults to false
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlkdebugSetStateOptions\fP (Object)
.sp
Describes a single state\-change event for blkdebug.
.SS Members
.INDENT 0.0
.TP
.B \fBevent\fP: \fBBlkdebugEvent\fP
trigger event
.TP
.B \fBstate\fP: \fBint\fP (optional)
the current state identifier blkdebug needs to be in;
defaults to "any"
.TP
.B \fBnew_state\fP: \fBint\fP
the state identifier blkdebug is supposed to assume if
this event is triggered
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsBlkdebug\fP (Object)
.sp
Driver specific block device options for blkdebug.
.SS Members
.INDENT 0.0
.TP
.B \fBimage\fP: \fBBlockdevRef\fP
underlying raw block device (or image file)
.TP
.B \fBconfig\fP: \fBstring\fP (optional)
filename of the configuration file
.TP
.B \fBalign\fP: \fBint\fP (optional)
required alignment for requests in bytes, must be
positive power of 2, or 0 for default
.TP
.B \fBmax\-transfer\fP: \fBint\fP (optional)
maximum size for I/O transfers in bytes, must be
positive multiple of \fBalign\fP and of the underlying
file\(aqs request alignment (but need not be a power of
2), or 0 for default (since 2.10)
.TP
.B \fBopt\-write\-zero\fP: \fBint\fP (optional)
preferred alignment for write zero requests in bytes,
must be positive multiple of \fBalign\fP and of the
underlying file\(aqs request alignment (but need not be a
power of 2), or 0 for default (since 2.10)
.TP
.B \fBmax\-write\-zero\fP: \fBint\fP (optional)
maximum size for write zero requests in bytes, must be
positive multiple of \fBalign\fP, of \fBopt\-write\-zero\fP, and of
the underlying file\(aqs request alignment (but need not
be a power of 2), or 0 for default (since 2.10)
.TP
.B \fBopt\-discard\fP: \fBint\fP (optional)
preferred alignment for discard requests in bytes, must
be positive multiple of \fBalign\fP and of the underlying
file\(aqs request alignment (but need not be a power of
2), or 0 for default (since 2.10)
.TP
.B \fBmax\-discard\fP: \fBint\fP (optional)
maximum size for discard requests in bytes, must be
positive multiple of \fBalign\fP, of \fBopt\-discard\fP, and of
the underlying file\(aqs request alignment (but need not
be a power of 2), or 0 for default (since 2.10)
.TP
.B \fBinject\-error\fP: \fBarray of BlkdebugInjectErrorOptions\fP (optional)
array of error injection descriptions
.TP
.B \fBset\-state\fP: \fBarray of BlkdebugSetStateOptions\fP (optional)
array of state\-change descriptions
.TP
.B \fBtake\-child\-perms\fP: \fBarray of BlockPermission\fP (optional)
Permissions to take on \fBimage\fP in addition to what
is necessary anyway (which depends on how the
blkdebug node is used).  Defaults to none.
(since 5.0)
.TP
.B \fBunshare\-child\-perms\fP: \fBarray of BlockPermission\fP (optional)
Permissions not to share on \fBimage\fP in addition
to what cannot be shared anyway (which depends
on how the blkdebug node is used).  Defaults
to none.  (since 5.0)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsBlklogwrites\fP (Object)
.sp
Driver specific block device options for blklogwrites.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
block device
.TP
.B \fBlog\fP: \fBBlockdevRef\fP
block device used to log writes to \fBfile\fP
.TP
.B \fBlog\-sector\-size\fP: \fBint\fP (optional)
sector size used in logging writes to \fBfile\fP, determines
granularity of offsets and sizes of writes (default: 512)
.TP
.B \fBlog\-append\fP: \fBboolean\fP (optional)
append to an existing log (default: false)
.TP
.B \fBlog\-super\-update\-interval\fP: \fBint\fP (optional)
interval of write requests after which the log
super block is updated to disk (default: 4096)
.UNINDENT
.SS Since
.sp
3.0
.SS \fBBlockdevOptionsBlkverify\fP (Object)
.sp
Driver specific block device options for blkverify.
.SS Members
.INDENT 0.0
.TP
.B \fBtest\fP: \fBBlockdevRef\fP
block device to be tested
.TP
.B \fBraw\fP: \fBBlockdevRef\fP
raw image used for verification
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsBlkreplay\fP (Object)
.sp
Driver specific block device options for blkreplay.
.SS Members
.INDENT 0.0
.TP
.B \fBimage\fP: \fBBlockdevRef\fP
disk image which should be controlled with blkreplay
.UNINDENT
.SS Since
.sp
4.2
.SS \fBQuorumReadPattern\fP (Enum)
.sp
An enumeration of quorum read patterns.
.SS Values
.INDENT 0.0
.TP
.B \fBquorum\fP
read all the children and do a quorum vote on reads
.TP
.B \fBfifo\fP
read only from the first child that has not failed
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsQuorum\fP (Object)
.sp
Driver specific block device options for Quorum
.SS Members
.INDENT 0.0
.TP
.B \fBblkverify\fP: \fBboolean\fP (optional)
.INDENT 7.0
.TP
.B true if the driver must print content mismatch
set to false by default
.UNINDENT
.TP
.B \fBchildren\fP: \fBarray of BlockdevRef\fP
the children block devices to use
.TP
.B \fBvote\-threshold\fP: \fBint\fP
the vote limit under which a read will fail
.TP
.B \fBrewrite\-corrupted\fP: \fBboolean\fP (optional)
rewrite corrupted data when quorum is reached
(Since 2.1)
.TP
.B \fBread\-pattern\fP: \fBQuorumReadPattern\fP (optional)
choose read pattern and set to quorum by default
(Since 2.2)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsGluster\fP (Object)
.sp
Driver specific block device options for Gluster
.SS Members
.INDENT 0.0
.TP
.B \fBvolume\fP: \fBstring\fP
name of gluster volume where VM image resides
.TP
.B \fBpath\fP: \fBstring\fP
absolute path to image file in gluster volume
.TP
.B \fBserver\fP: \fBarray of SocketAddress\fP
gluster servers description
.TP
.B \fBdebug\fP: \fBint\fP (optional)
libgfapi log level (default \(aq4\(aq which is Error)
(Since 2.8)
.TP
.B \fBlogfile\fP: \fBstring\fP (optional)
libgfapi log file (default /dev/stderr) (Since 2.8)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsIoUring\fP (Object)
.sp
Driver specific block device options for the io_uring backend.
.SS Members
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
path to the image file
.UNINDENT
.SS Since
.sp
7.2
.SS If
.sp
\fBCONFIG_BLKIO\fP
.SS \fBBlockdevOptionsNvmeIoUring\fP (Object)
.sp
Driver specific block device options for the nvme\-io_uring backend.
.SS Members
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
path to the NVMe namespace\(aqs character device (e.g. /dev/ng0n1).
.UNINDENT
.SS Since
.sp
7.2
.SS If
.sp
\fBCONFIG_BLKIO\fP
.SS \fBBlockdevOptionsVirtioBlkVfioPci\fP (Object)
.sp
Driver specific block device options for the virtio\-blk\-vfio\-pci backend.
.SS Members
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
path to the PCI device\(aqs sysfs directory (e.g.
/sys/bus/pci/devices/0000:00:01.0).
.UNINDENT
.SS Since
.sp
7.2
.SS If
.sp
\fBCONFIG_BLKIO\fP
.SS \fBBlockdevOptionsVirtioBlkVhostUser\fP (Object)
.sp
Driver specific block device options for the virtio\-blk\-vhost\-user backend.
.SS Members
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
path to the vhost\-user UNIX domain socket.
.UNINDENT
.SS Since
.sp
7.2
.SS If
.sp
\fBCONFIG_BLKIO\fP
.SS \fBBlockdevOptionsVirtioBlkVhostVdpa\fP (Object)
.sp
Driver specific block device options for the virtio\-blk\-vhost\-vdpa backend.
.SS Members
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
path to the vhost\-vdpa character device.
.UNINDENT
.SS Since
.sp
7.2
.SS If
.sp
\fBCONFIG_BLKIO\fP
.SS \fBIscsiTransport\fP (Enum)
.sp
An enumeration of libiscsi transport types
.SS Values
.INDENT 0.0
.TP
.B \fBtcp\fP
Not documented
.TP
.B \fBiser\fP
Not documented
.UNINDENT
.SS Since
.sp
2.9
.SS \fBIscsiHeaderDigest\fP (Enum)
.sp
An enumeration of header digests supported by libiscsi
.SS Values
.INDENT 0.0
.TP
.B \fBcrc32c\fP
Not documented
.TP
.B \fBnone\fP
Not documented
.TP
.B \fBcrc32c\-none\fP
Not documented
.TP
.B \fBnone\-crc32c\fP
Not documented
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsIscsi\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBtransport\fP: \fBIscsiTransport\fP
The iscsi transport type
.TP
.B \fBportal\fP: \fBstring\fP
The address of the iscsi portal
.TP
.B \fBtarget\fP: \fBstring\fP
The target iqn name
.TP
.B \fBlun\fP: \fBint\fP (optional)
LUN to connect to. Defaults to 0.
.TP
.B \fBuser\fP: \fBstring\fP (optional)
User name to log in with. If omitted, no CHAP
authentication is performed.
.TP
.B \fBpassword\-secret\fP: \fBstring\fP (optional)
The ID of a QCryptoSecret object providing
the password for the login. This option is required if
\fBuser\fP is specified.
.TP
.B \fBinitiator\-name\fP: \fBstring\fP (optional)
The iqn name we want to identify to the target
as. If this option is not specified, an initiator name is
generated automatically.
.TP
.B \fBheader\-digest\fP: \fBIscsiHeaderDigest\fP (optional)
The desired header digest. Defaults to
none\-crc32c.
.TP
.B \fBtimeout\fP: \fBint\fP (optional)
Timeout in seconds after which a request will
timeout. 0 means no timeout and is the default.
.UNINDENT
Driver specific block device options for iscsi
.SS Since
.sp
2.9
.SS \fBRbdAuthMode\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBcephx\fP
Not documented
.TP
.B \fBnone\fP
Not documented
.UNINDENT
.SS Since
.sp
3.0
.SS \fBRbdImageEncryptionFormat\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBluks\fP
Not documented
.TP
.B \fBluks2\fP
Not documented
.UNINDENT
.SS Since
.sp
6.1
.SS \fBRbdEncryptionOptionsLUKSBase\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBkey\-secret\fP: \fBstring\fP
ID of a QCryptoSecret object providing a passphrase
for unlocking the encryption
.UNINDENT
.SS Since
.sp
6.1
.SS \fBRbdEncryptionCreateOptionsLUKSBase\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBcipher\-alg\fP: \fBQCryptoCipherAlgorithm\fP (optional)
The encryption algorithm
.TP
.B The members of \fBRbdEncryptionOptionsLUKSBase\fP
.UNINDENT
.SS Since
.sp
6.1
.SS \fBRbdEncryptionOptionsLUKS\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B The members of \fBRbdEncryptionOptionsLUKSBase\fP
.UNINDENT
.SS Since
.sp
6.1
.SS \fBRbdEncryptionOptionsLUKS2\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B The members of \fBRbdEncryptionOptionsLUKSBase\fP
.UNINDENT
.SS Since
.sp
6.1
.SS \fBRbdEncryptionCreateOptionsLUKS\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B The members of \fBRbdEncryptionCreateOptionsLUKSBase\fP
.UNINDENT
.SS Since
.sp
6.1
.SS \fBRbdEncryptionCreateOptionsLUKS2\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B The members of \fBRbdEncryptionCreateOptionsLUKSBase\fP
.UNINDENT
.SS Since
.sp
6.1
.SS \fBRbdEncryptionOptions\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBformat\fP: \fBRbdImageEncryptionFormat\fP
Not documented
.TP
.B The members of \fBRbdEncryptionOptionsLUKS\fP when \fBformat\fP is \fB"luks"\fP
.TP
.B The members of \fBRbdEncryptionOptionsLUKS2\fP when \fBformat\fP is \fB"luks2"\fP
.UNINDENT
.SS Since
.sp
6.1
.SS \fBRbdEncryptionCreateOptions\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBformat\fP: \fBRbdImageEncryptionFormat\fP
Not documented
.TP
.B The members of \fBRbdEncryptionCreateOptionsLUKS\fP when \fBformat\fP is \fB"luks"\fP
.TP
.B The members of \fBRbdEncryptionCreateOptionsLUKS2\fP when \fBformat\fP is \fB"luks2"\fP
.UNINDENT
.SS Since
.sp
6.1
.SS \fBBlockdevOptionsRbd\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBpool\fP: \fBstring\fP
Ceph pool name.
.TP
.B \fBnamespace\fP: \fBstring\fP (optional)
Rados namespace name in the Ceph pool. (Since 5.0)
.TP
.B \fBimage\fP: \fBstring\fP
Image name in the Ceph pool.
.TP
.B \fBconf\fP: \fBstring\fP (optional)
path to Ceph configuration file.  Values
in the configuration file will be overridden by
options specified via QAPI.
.TP
.B \fBsnapshot\fP: \fBstring\fP (optional)
Ceph snapshot name.
.TP
.B \fBencrypt\fP: \fBRbdEncryptionOptions\fP (optional)
Image encryption options. (Since 6.1)
.TP
.B \fBuser\fP: \fBstring\fP (optional)
Ceph id name.
.TP
.B \fBauth\-client\-required\fP: \fBarray of RbdAuthMode\fP (optional)
Acceptable authentication modes.
This maps to Ceph configuration option
"auth_client_required".  (Since 3.0)
.TP
.B \fBkey\-secret\fP: \fBstring\fP (optional)
ID of a QCryptoSecret object providing a key
for cephx authentication.
This maps to Ceph configuration option
"key".  (Since 3.0)
.TP
.B \fBserver\fP: \fBarray of InetSocketAddressBase\fP (optional)
Monitor host address and port.  This maps
to the "mon_host" Ceph option.
.UNINDENT
.SS Since
.sp
2.9
.SS \fBReplicationMode\fP (Enum)
.sp
An enumeration of replication modes.
.SS Values
.INDENT 0.0
.TP
.B \fBprimary\fP
Primary mode, the vm\(aqs state will be sent to secondary QEMU.
.TP
.B \fBsecondary\fP
Secondary mode, receive the vm\(aqs state from primary QEMU.
.UNINDENT
.SS Since
.sp
2.9
.SS If
.sp
\fBCONFIG_REPLICATION\fP
.SS \fBBlockdevOptionsReplication\fP (Object)
.sp
Driver specific block device options for replication
.SS Members
.INDENT 0.0
.TP
.B \fBmode\fP: \fBReplicationMode\fP
the replication mode
.TP
.B \fBtop\-id\fP: \fBstring\fP (optional)
In secondary mode, node name or device ID of the root
node who owns the replication node chain. Must not be given in
primary mode.
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP
.UNINDENT
.SS Since
.sp
2.9
.SS If
.sp
\fBCONFIG_REPLICATION\fP
.SS \fBNFSTransport\fP (Enum)
.sp
An enumeration of NFS transport types
.SS Values
.INDENT 0.0
.TP
.B \fBinet\fP
TCP transport
.UNINDENT
.SS Since
.sp
2.9
.SS \fBNFSServer\fP (Object)
.sp
Captures the address of the socket
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBNFSTransport\fP
transport type used for NFS (only TCP supported)
.TP
.B \fBhost\fP: \fBstring\fP
host address for NFS server
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsNfs\fP (Object)
.sp
Driver specific block device option for NFS
.SS Members
.INDENT 0.0
.TP
.B \fBserver\fP: \fBNFSServer\fP
host address
.TP
.B \fBpath\fP: \fBstring\fP
path of the image on the host
.TP
.B \fBuser\fP: \fBint\fP (optional)
UID value to use when talking to the
server (defaults to 65534 on Windows and getuid()
on unix)
.TP
.B \fBgroup\fP: \fBint\fP (optional)
GID value to use when talking to the
server (defaults to 65534 on Windows and getgid()
in unix)
.TP
.B \fBtcp\-syn\-count\fP: \fBint\fP (optional)
number of SYNs during the session
establishment (defaults to libnfs default)
.TP
.B \fBreadahead\-size\fP: \fBint\fP (optional)
set the readahead size in bytes (defaults
to libnfs default)
.TP
.B \fBpage\-cache\-size\fP: \fBint\fP (optional)
set the pagecache size in bytes (defaults
to libnfs default)
.TP
.B \fBdebug\fP: \fBint\fP (optional)
set the NFS debug level (max 2) (defaults
to libnfs default)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsCurlBase\fP (Object)
.sp
Driver specific block device options shared by all protocols supported by the
curl backend.
.SS Members
.INDENT 0.0
.TP
.B \fBurl\fP: \fBstring\fP
URL of the image file
.TP
.B \fBreadahead\fP: \fBint\fP (optional)
Size of the read\-ahead cache; must be a multiple of
512 (defaults to 256 kB)
.TP
.B \fBtimeout\fP: \fBint\fP (optional)
Timeout for connections, in seconds (defaults to 5)
.TP
.B \fBusername\fP: \fBstring\fP (optional)
Username for authentication (defaults to none)
.TP
.B \fBpassword\-secret\fP: \fBstring\fP (optional)
ID of a QCryptoSecret object providing a password
for authentication (defaults to no password)
.TP
.B \fBproxy\-username\fP: \fBstring\fP (optional)
Username for proxy authentication (defaults to none)
.TP
.B \fBproxy\-password\-secret\fP: \fBstring\fP (optional)
ID of a QCryptoSecret object providing a password
for proxy authentication (defaults to no password)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsCurlHttp\fP (Object)
.sp
Driver specific block device options for HTTP connections over the curl
backend.  URLs must start with "\fI\%http://\fP".
.SS Members
.INDENT 0.0
.TP
.B \fBcookie\fP: \fBstring\fP (optional)
List of cookies to set; format is
"name1=content1; name2=content2;" as explained by
CURLOPT_COOKIE(3). Defaults to no cookies.
.TP
.B \fBcookie\-secret\fP: \fBstring\fP (optional)
ID of a QCryptoSecret object providing the cookie data in a
secure way. See \fBcookie\fP for the format. (since 2.10)
.TP
.B The members of \fBBlockdevOptionsCurlBase\fP
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsCurlHttps\fP (Object)
.sp
Driver specific block device options for HTTPS connections over the curl
backend.  URLs must start with "\fI\%https://\fP".
.SS Members
.INDENT 0.0
.TP
.B \fBcookie\fP: \fBstring\fP (optional)
List of cookies to set; format is
"name1=content1; name2=content2;" as explained by
CURLOPT_COOKIE(3). Defaults to no cookies.
.TP
.B \fBsslverify\fP: \fBboolean\fP (optional)
Whether to verify the SSL certificate\(aqs validity (defaults to
true)
.TP
.B \fBcookie\-secret\fP: \fBstring\fP (optional)
ID of a QCryptoSecret object providing the cookie data in a
secure way. See \fBcookie\fP for the format. (since 2.10)
.TP
.B The members of \fBBlockdevOptionsCurlBase\fP
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsCurlFtp\fP (Object)
.sp
Driver specific block device options for FTP connections over the curl
backend.  URLs must start with "\fI\%ftp://\fP".
.SS Members
.INDENT 0.0
.TP
.B The members of \fBBlockdevOptionsCurlBase\fP
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsCurlFtps\fP (Object)
.sp
Driver specific block device options for FTPS connections over the curl
backend.  URLs must start with "ftps://".
.SS Members
.INDENT 0.0
.TP
.B \fBsslverify\fP: \fBboolean\fP (optional)
Whether to verify the SSL certificate\(aqs validity (defaults to
true)
.TP
.B The members of \fBBlockdevOptionsCurlBase\fP
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsNbd\fP (Object)
.sp
Driver specific block device options for NBD.
.SS Members
.INDENT 0.0
.TP
.B \fBserver\fP: \fBSocketAddress\fP
NBD server address
.TP
.B \fBexport\fP: \fBstring\fP (optional)
export name
.TP
.B \fBtls\-creds\fP: \fBstring\fP (optional)
TLS credentials ID
.TP
.B \fBtls\-hostname\fP: \fBstring\fP (optional)
TLS hostname override for certificate validation (Since 7.0)
.TP
.B \fBx\-dirty\-bitmap\fP: \fBstring\fP (optional)
A metadata context name such as "qemu:dirty\-bitmap:NAME"
or "qemu:allocation\-depth" to query in place of the
traditional "base:allocation" block status (see
NBD_OPT_LIST_META_CONTEXT in the NBD protocol; and
yes, naming this option x\-context would have made
more sense) (since 3.0)
.TP
.B \fBreconnect\-delay\fP: \fBint\fP (optional)
On an unexpected disconnect, the nbd client tries to
connect again until succeeding or encountering a serious
error.  During the first \fBreconnect\-delay\fP seconds, all
requests are paused and will be rerun on a successful
reconnect. After that time, any delayed requests and all
future requests before a successful reconnect will
immediately fail. Default 0 (Since 4.2)
.TP
.B \fBopen\-timeout\fP: \fBint\fP (optional)
In seconds. If zero, the nbd driver tries the connection
only once, and fails to open if the connection fails.
If non\-zero, the nbd driver will repeat connection attempts
until successful or until \fBopen\-timeout\fP seconds have elapsed.
Default 0 (Since 7.0)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
Member \fBx\-dirty\-bitmap\fP is experimental.
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsRaw\fP (Object)
.sp
Driver specific block device options for the raw driver.
.SS Members
.INDENT 0.0
.TP
.B \fBoffset\fP: \fBint\fP (optional)
position where the block device starts
.TP
.B \fBsize\fP: \fBint\fP (optional)
the assumed size of the device
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevOptionsThrottle\fP (Object)
.sp
Driver specific block device options for the throttle driver
.SS Members
.INDENT 0.0
.TP
.B \fBthrottle\-group\fP: \fBstring\fP
the name of the throttle\-group object to use. It
must already exist.
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
reference to or definition of the data source block device
.UNINDENT
.SS Since
.sp
2.11
.SS \fBBlockdevOptionsCor\fP (Object)
.sp
Driver specific block device options for the copy\-on\-read driver.
.SS Members
.INDENT 0.0
.TP
.B \fBbottom\fP: \fBstring\fP (optional)
The name of a non\-filter node (allocation\-bearing layer) that
limits the COR operations in the backing chain (inclusive), so
that no data below this node will be copied by this filter.
If option is absent, the limit is not applied, so that data
from all backing layers may be copied.
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP
.UNINDENT
.SS Since
.sp
6.0
.SS \fBOnCbwError\fP (Enum)
.sp
An enumeration of possible behaviors for copy\-before\-write operation
failures.
.SS Values
.INDENT 0.0
.TP
.B \fBbreak\-guest\-write\fP
report the error to the guest. This way, the guest
will not be able to overwrite areas that cannot be
backed up, so the backup process remains valid.
.TP
.B \fBbreak\-snapshot\fP
continue guest write. Doing so will make the provided
snapshot state invalid and any backup or export
process based on it will finally fail.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBBlockdevOptionsCbw\fP (Object)
.sp
Driver specific block device options for the copy\-before\-write driver,
which does so called copy\-before\-write operations: when data is
written to the filter, the filter first reads corresponding blocks
from its file child and copies them to \fBtarget\fP child. After successfully
copying, the write request is propagated to file child. If copying
fails, the original write request is failed too and no data is written
to file child.
.SS Members
.INDENT 0.0
.TP
.B \fBtarget\fP: \fBBlockdevRef\fP
The target for copy\-before\-write operations.
.TP
.B \fBbitmap\fP: \fBBlockDirtyBitmap\fP (optional)
If specified, copy\-before\-write filter will do
copy\-before\-write operations only for dirty regions of the
bitmap. Bitmap size must be equal to length of file and
target child of the filter. Note also, that bitmap is used
only to initialize internal bitmap of the process, so further
modifications (or removing) of specified bitmap doesn\(aqt
influence the filter. (Since 7.0)
.TP
.B \fBon\-cbw\-error\fP: \fBOnCbwError\fP (optional)
Behavior on failure of copy\-before\-write operation.
Default is \fBbreak\-guest\-write\fP\&. (Since 7.1)
.TP
.B \fBcbw\-timeout\fP: \fBint\fP (optional)
Zero means no limit. Non\-zero sets the timeout in seconds
for copy\-before\-write operation. When a timeout occurs,
the respective copy\-before\-write operation will fail, and
the \fBon\-cbw\-error\fP parameter will decide how this failure
is handled. Default 0. (Since 7.1)
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP
.UNINDENT
.SS Since
.sp
6.2
.SS \fBBlockdevOptions\fP (Object)
.sp
Options for creating a block device.  Many options are available for all
block devices, independent of the block driver:
.SS Members
.INDENT 0.0
.TP
.B \fBdriver\fP: \fBBlockdevDriver\fP
block driver name
.TP
.B \fBnode\-name\fP: \fBstring\fP (optional)
the node name of the new node (Since 2.0).
This option is required on the top level of blockdev\-add.
Valid node names start with an alphabetic character and may
contain only alphanumeric characters, \(aq\-\(aq, \(aq.\(aq and \(aq_\(aq. Their
maximum length is 31 characters.
.TP
.B \fBdiscard\fP: \fBBlockdevDiscardOptions\fP (optional)
discard\-related options (default: ignore)
.TP
.B \fBcache\fP: \fBBlockdevCacheOptions\fP (optional)
cache\-related options
.TP
.B \fBread\-only\fP: \fBboolean\fP (optional)
whether the block device should be read\-only (default: false).
Note that some block drivers support only read\-only access,
either generally or in certain configurations. In this case,
the default value does not work and the option must be
specified explicitly.
.TP
.B \fBauto\-read\-only\fP: \fBboolean\fP (optional)
if true and \fBread\-only\fP is false, QEMU may automatically
decide not to open the image read\-write as requested, but
fall back to read\-only instead (and switch between the modes
later), e.g. depending on whether the image file is writable
or whether a writing user is attached to the node
(default: false, since 3.1)
.TP
.B \fBdetect\-zeroes\fP: \fBBlockdevDetectZeroesOptions\fP (optional)
detect and optimize zero writes (Since 2.1)
(default: off)
.TP
.B \fBforce\-share\fP: \fBboolean\fP (optional)
force share all permission on added nodes.
Requires read\-only=true. (Since 2.10)
.TP
.B The members of \fBBlockdevOptionsBlkdebug\fP when \fBdriver\fP is \fB"blkdebug"\fP
.TP
.B The members of \fBBlockdevOptionsBlklogwrites\fP when \fBdriver\fP is \fB"blklogwrites"\fP
.TP
.B The members of \fBBlockdevOptionsBlkverify\fP when \fBdriver\fP is \fB"blkverify"\fP
.TP
.B The members of \fBBlockdevOptionsBlkreplay\fP when \fBdriver\fP is \fB"blkreplay"\fP
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP when \fBdriver\fP is \fB"bochs"\fP
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP when \fBdriver\fP is \fB"cloop"\fP
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP when \fBdriver\fP is \fB"compress"\fP
.TP
.B The members of \fBBlockdevOptionsCbw\fP when \fBdriver\fP is \fB"copy\-before\-write"\fP
.TP
.B The members of \fBBlockdevOptionsCor\fP when \fBdriver\fP is \fB"copy\-on\-read"\fP
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP when \fBdriver\fP is \fB"dmg"\fP
.TP
.B The members of \fBBlockdevOptionsFile\fP when \fBdriver\fP is \fB"file"\fP
.TP
.B The members of \fBBlockdevOptionsCurlFtp\fP when \fBdriver\fP is \fB"ftp"\fP
.TP
.B The members of \fBBlockdevOptionsCurlFtps\fP when \fBdriver\fP is \fB"ftps"\fP
.TP
.B The members of \fBBlockdevOptionsGluster\fP when \fBdriver\fP is \fB"gluster"\fP
.TP
The members of \fBBlockdevOptionsFile\fP when \fBdriver\fP is \fB"host_cdrom"\fP (\fBIf: \fP\fBHAVE_HOST_BLOCK_DEVICE\fP)
.TP
The members of \fBBlockdevOptionsFile\fP when \fBdriver\fP is \fB"host_device"\fP (\fBIf: \fP\fBHAVE_HOST_BLOCK_DEVICE\fP)
.TP
.B The members of \fBBlockdevOptionsCurlHttp\fP when \fBdriver\fP is \fB"http"\fP
.TP
.B The members of \fBBlockdevOptionsCurlHttps\fP when \fBdriver\fP is \fB"https"\fP
.TP
The members of \fBBlockdevOptionsIoUring\fP when \fBdriver\fP is \fB"io_uring"\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
.TP
.B The members of \fBBlockdevOptionsIscsi\fP when \fBdriver\fP is \fB"iscsi"\fP
.TP
.B The members of \fBBlockdevOptionsLUKS\fP when \fBdriver\fP is \fB"luks"\fP
.TP
.B The members of \fBBlockdevOptionsNbd\fP when \fBdriver\fP is \fB"nbd"\fP
.TP
.B The members of \fBBlockdevOptionsNfs\fP when \fBdriver\fP is \fB"nfs"\fP
.TP
.B The members of \fBBlockdevOptionsNull\fP when \fBdriver\fP is \fB"null\-aio"\fP
.TP
.B The members of \fBBlockdevOptionsNull\fP when \fBdriver\fP is \fB"null\-co"\fP
.TP
.B The members of \fBBlockdevOptionsNVMe\fP when \fBdriver\fP is \fB"nvme"\fP
.TP
The members of \fBBlockdevOptionsNvmeIoUring\fP when \fBdriver\fP is \fB"nvme\-io_uring"\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP when \fBdriver\fP is \fB"parallels"\fP
.TP
.B The members of \fBBlockdevOptionsPreallocate\fP when \fBdriver\fP is \fB"preallocate"\fP
.TP
.B The members of \fBBlockdevOptionsQcow2\fP when \fBdriver\fP is \fB"qcow2"\fP
.TP
.B The members of \fBBlockdevOptionsQcow\fP when \fBdriver\fP is \fB"qcow"\fP
.TP
.B The members of \fBBlockdevOptionsGenericCOWFormat\fP when \fBdriver\fP is \fB"qed"\fP
.TP
.B The members of \fBBlockdevOptionsQuorum\fP when \fBdriver\fP is \fB"quorum"\fP
.TP
.B The members of \fBBlockdevOptionsRaw\fP when \fBdriver\fP is \fB"raw"\fP
.TP
.B The members of \fBBlockdevOptionsRbd\fP when \fBdriver\fP is \fB"rbd"\fP
.TP
The members of \fBBlockdevOptionsReplication\fP when \fBdriver\fP is \fB"replication"\fP (\fBIf: \fP\fBCONFIG_REPLICATION\fP)
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP when \fBdriver\fP is \fB"snapshot\-access"\fP
.TP
.B The members of \fBBlockdevOptionsSsh\fP when \fBdriver\fP is \fB"ssh"\fP
.TP
.B The members of \fBBlockdevOptionsThrottle\fP when \fBdriver\fP is \fB"throttle"\fP
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP when \fBdriver\fP is \fB"vdi"\fP
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP when \fBdriver\fP is \fB"vhdx"\fP
.TP
The members of \fBBlockdevOptionsVirtioBlkVfioPci\fP when \fBdriver\fP is \fB"virtio\-blk\-vfio\-pci"\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
.TP
The members of \fBBlockdevOptionsVirtioBlkVhostUser\fP when \fBdriver\fP is \fB"virtio\-blk\-vhost\-user"\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
.TP
The members of \fBBlockdevOptionsVirtioBlkVhostVdpa\fP when \fBdriver\fP is \fB"virtio\-blk\-vhost\-vdpa"\fP (\fBIf: \fP\fBCONFIG_BLKIO\fP)
.TP
.B The members of \fBBlockdevOptionsGenericCOWFormat\fP when \fBdriver\fP is \fB"vmdk"\fP
.TP
.B The members of \fBBlockdevOptionsGenericFormat\fP when \fBdriver\fP is \fB"vpc"\fP
.TP
.B The members of \fBBlockdevOptionsVVFAT\fP when \fBdriver\fP is \fB"vvfat"\fP
.UNINDENT
Remaining options are determined by the block driver.
.SS Since
.sp
2.9
.SS \fBBlockdevRef\fP (Alternate)
.sp
Reference to a block device.
.SS Members
.INDENT 0.0
.TP
.B \fBdefinition\fP: \fBBlockdevOptions\fP
defines a new block device inline
.TP
.B \fBreference\fP: \fBstring\fP
references the ID of an existing block device
.UNINDENT
.SS Since
.sp
2.9
.SS \fBBlockdevRefOrNull\fP (Alternate)
.sp
Reference to a block device.
.SS Members
.INDENT 0.0
.TP
.B \fBdefinition\fP: \fBBlockdevOptions\fP
defines a new block device inline
.TP
.B \fBreference\fP: \fBstring\fP
references the ID of an existing block device.
An empty string means that no block device should
be referenced.  Deprecated; use null instead.
.TP
.B \fBnull\fP: \fBnull\fP
No block device should be referenced (since 2.10)
.UNINDENT
.SS Since
.sp
2.9
.SS \fBblockdev\-add\fP (Command)
.sp
Creates a new block device.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBBlockdevOptions\fP
.UNINDENT
.SS Since
.sp
2.9
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1.
\-> { "execute": "blockdev\-add",
     "arguments": {
          "driver": "qcow2",
          "node\-name": "test1",
          "file": {
              "driver": "file",
              "filename": "test.qcow2"
           }
      }
    }
<\- { "return": {} }

2.
\-> { "execute": "blockdev\-add",
     "arguments": {
          "driver": "qcow2",
          "node\-name": "node0",
          "discard": "unmap",
          "cache": {
             "direct": true
           },
           "file": {
             "driver": "file",
             "filename": "/tmp/test.qcow2"
           },
           "backing": {
              "driver": "raw",
              "file": {
                 "driver": "file",
                 "filename": "/dev/fdset/4"
               }
           }
       }
     }

<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblockdev\-reopen\fP (Command)
.sp
Reopens one or more block devices using the given set of options.
Any option not specified will be reset to its default value regardless
of its previous status. If an option cannot be changed or a particular
driver does not support reopening then the command will return an
error. All devices in the list are reopened in one transaction, so
if one of them fails then the whole transaction is cancelled.
.sp
The command receives a list of block devices to reopen. For each one
of them, the top\-level \fBnode\-name\fP option (from BlockdevOptions) must be
specified and is used to select the block device to be reopened.
Other \fBnode\-name\fP options must be either omitted or set to the
current name of the appropriate node. This command won\(aqt change any
node name and any attempt to do it will result in an error.
.sp
In the case of options that refer to child nodes, the behavior of
this command depends on the value:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
A set of options (BlockdevOptions): the child is reopened with
the specified set of options.
.IP 2. 3
A reference to the current child: the child is reopened using
its existing set of options.
.IP 3. 3
A reference to a different node: the current child is replaced
with the specified one.
.IP 4. 3
NULL: the current child (if any) is detached.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Options (1) and (2) are supported in all cases. Option (3) is
supported for \fBfile\fP and \fBbacking\fP, and option (4) for \fBbacking\fP only.
.sp
Unlike with blockdev\-add, the \fBbacking\fP option must always be present
unless the node being reopened does not have a backing file and its
image does not have a default backing file name as part of its
metadata.
.SS Arguments
.INDENT 0.0
.TP
.B \fBoptions\fP: \fBarray of BlockdevOptions\fP
Not documented
.UNINDENT
.SS Since
.sp
6.1
.SS \fBblockdev\-del\fP (Command)
.sp
Deletes a block device that has been added using blockdev\-add.
The command will fail if the node is attached to a device or is
otherwise being used.
.SS Arguments
.INDENT 0.0
.TP
.B \fBnode\-name\fP: \fBstring\fP
Name of the graph node to delete.
.UNINDENT
.SS Since
.sp
2.9
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-add",
     "arguments": {
          "driver": "qcow2",
          "node\-name": "node0",
          "file": {
              "driver": "file",
              "filename": "test.qcow2"
          }
     }
   }
<\- { "return": {} }

\-> { "execute": "blockdev\-del",
     "arguments": { "node\-name": "node0" }
   }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBlockdevCreateOptionsFile\fP (Object)
.sp
Driver specific image creation options for file.
.SS Members
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
Filename for the new image file
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBpreallocation\fP: \fBPreallocMode\fP (optional)
Preallocation mode for the new image (default: off;
allowed values: off,
falloc (if CONFIG_POSIX_FALLOCATE),
full (if CONFIG_POSIX))
.TP
.B \fBnocow\fP: \fBboolean\fP (optional)
Turn off copy\-on\-write (valid only on btrfs; default: off)
.TP
.B \fBextent\-size\-hint\fP: \fBint\fP (optional)
Extent size hint to add to the image file; 0 for not
adding an extent size hint (default: 1 MB, since 5.1)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsGluster\fP (Object)
.sp
Driver specific image creation options for gluster.
.SS Members
.INDENT 0.0
.TP
.B \fBlocation\fP: \fBBlockdevOptionsGluster\fP
Where to store the new image file
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBpreallocation\fP: \fBPreallocMode\fP (optional)
Preallocation mode for the new image (default: off;
allowed values: off,
falloc (if CONFIG_GLUSTERFS_FALLOCATE),
full (if CONFIG_GLUSTERFS_ZEROFILL))
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsLUKS\fP (Object)
.sp
Driver specific image creation options for LUKS.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
Node to create the image format on
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBpreallocation\fP: \fBPreallocMode\fP (optional)
Preallocation mode for the new image
(since: 4.2)
(default: off; allowed values: off, metadata, falloc, full)
.TP
.B The members of \fBQCryptoBlockCreateOptionsLUKS\fP
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsNfs\fP (Object)
.sp
Driver specific image creation options for NFS.
.SS Members
.INDENT 0.0
.TP
.B \fBlocation\fP: \fBBlockdevOptionsNfs\fP
Where to store the new image file
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsParallels\fP (Object)
.sp
Driver specific image creation options for parallels.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
Node to create the image format on
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBcluster\-size\fP: \fBint\fP (optional)
Cluster size in bytes (default: 1 MB)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsQcow\fP (Object)
.sp
Driver specific image creation options for qcow.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
Node to create the image format on
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBbacking\-file\fP: \fBstring\fP (optional)
File name of the backing file if a backing file
should be used
.TP
.B \fBencrypt\fP: \fBQCryptoBlockCreateOptions\fP (optional)
Encryption options if the image should be encrypted
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevQcow2Version\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBv2\fP
The original QCOW2 format as introduced in qemu 0.10 (version 2)
.TP
.B \fBv3\fP
The extended QCOW2 format as introduced in qemu 1.1 (version 3)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBQcow2CompressionType\fP (Enum)
.sp
Compression type used in qcow2 image file
.SS Values
.INDENT 0.0
.TP
.B \fBzlib\fP
zlib compression, see <\fI\%http://zlib.net/\fP>
.TP
\fBzstd\fP (\fBIf: \fP\fBCONFIG_ZSTD\fP)
zstd compression, see <\fI\%http://github.com/facebook/zstd\fP>
.UNINDENT
.SS Since
.sp
5.1
.SS \fBBlockdevCreateOptionsQcow2\fP (Object)
.sp
Driver specific image creation options for qcow2.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
Node to create the image format on
.TP
.B \fBdata\-file\fP: \fBBlockdevRef\fP (optional)
Node to use as an external data file in which all guest
data is stored so that only metadata remains in the qcow2
file (since: 4.0)
.TP
.B \fBdata\-file\-raw\fP: \fBboolean\fP (optional)
True if the external data file must stay valid as a
standalone (read\-only) raw image without looking at qcow2
metadata (default: false; since: 4.0)
.TP
.B \fBextended\-l2\fP: \fBboolean\fP (optional)
True to make the image have extended L2 entries
(default: false; since 5.2)
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBversion\fP: \fBBlockdevQcow2Version\fP (optional)
Compatibility level (default: v3)
.TP
.B \fBbacking\-file\fP: \fBstring\fP (optional)
File name of the backing file if a backing file
should be used
.TP
.B \fBbacking\-fmt\fP: \fBBlockdevDriver\fP (optional)
Name of the block driver to use for the backing file
.TP
.B \fBencrypt\fP: \fBQCryptoBlockCreateOptions\fP (optional)
Encryption options if the image should be encrypted
.TP
.B \fBcluster\-size\fP: \fBint\fP (optional)
qcow2 cluster size in bytes (default: 65536)
.TP
.B \fBpreallocation\fP: \fBPreallocMode\fP (optional)
Preallocation mode for the new image (default: off;
allowed values: off, falloc, full, metadata)
.TP
.B \fBlazy\-refcounts\fP: \fBboolean\fP (optional)
True if refcounts may be updated lazily (default: off)
.TP
.B \fBrefcount\-bits\fP: \fBint\fP (optional)
Width of reference counts in bits (default: 16)
.TP
.B \fBcompression\-type\fP: \fBQcow2CompressionType\fP (optional)
The image cluster compression method
(default: zlib, since 5.1)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsQed\fP (Object)
.sp
Driver specific image creation options for qed.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
Node to create the image format on
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBbacking\-file\fP: \fBstring\fP (optional)
File name of the backing file if a backing file
should be used
.TP
.B \fBbacking\-fmt\fP: \fBBlockdevDriver\fP (optional)
Name of the block driver to use for the backing file
.TP
.B \fBcluster\-size\fP: \fBint\fP (optional)
Cluster size in bytes (default: 65536)
.TP
.B \fBtable\-size\fP: \fBint\fP (optional)
L1/L2 table size (in clusters)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsRbd\fP (Object)
.sp
Driver specific image creation options for rbd/Ceph.
.SS Members
.INDENT 0.0
.TP
.B \fBlocation\fP: \fBBlockdevOptionsRbd\fP
Where to store the new image file. This location cannot
point to a snapshot.
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBcluster\-size\fP: \fBint\fP (optional)
RBD object size
.TP
.B \fBencrypt\fP: \fBRbdEncryptionCreateOptions\fP (optional)
Image encryption options. (Since 6.1)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevVmdkSubformat\fP (Enum)
.sp
Subformat options for VMDK images
.SS Values
.INDENT 0.0
.TP
.B \fBmonolithicSparse\fP
Single file image with sparse cluster allocation
.TP
.B \fBmonolithicFlat\fP
Single flat data image and a descriptor file
.TP
.B \fBtwoGbMaxExtentSparse\fP
Data is split into 2GB (per virtual LBA) sparse extent
files, in addition to a descriptor file
.TP
.B \fBtwoGbMaxExtentFlat\fP
Data is split into 2GB (per virtual LBA) flat extent
files, in addition to a descriptor file
.TP
.B \fBstreamOptimized\fP
Single file image sparse cluster allocation, optimized
for streaming over network.
.UNINDENT
.SS Since
.sp
4.0
.SS \fBBlockdevVmdkAdapterType\fP (Enum)
.sp
Adapter type info for VMDK images
.SS Values
.INDENT 0.0
.TP
.B \fBide\fP
Not documented
.TP
.B \fBbuslogic\fP
Not documented
.TP
.B \fBlsilogic\fP
Not documented
.TP
.B \fBlegacyESX\fP
Not documented
.UNINDENT
.SS Since
.sp
4.0
.SS \fBBlockdevCreateOptionsVmdk\fP (Object)
.sp
Driver specific image creation options for VMDK.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
Where to store the new image file. This refers to the image
file for monolithcSparse and streamOptimized format, or the
descriptor file for other formats.
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBextents\fP: \fBarray of BlockdevRef\fP (optional)
Where to store the data extents. Required for monolithcFlat,
twoGbMaxExtentSparse and twoGbMaxExtentFlat formats. For
monolithicFlat, only one entry is required; for
twoGbMaxExtent* formats, the number of entries required is
calculated as extent_number = virtual_size / 2GB. Providing
more extents than will be used is an error.
.TP
.B \fBsubformat\fP: \fBBlockdevVmdkSubformat\fP (optional)
The subformat of the VMDK image. Default: "monolithicSparse".
.TP
.B \fBbacking\-file\fP: \fBstring\fP (optional)
The path of backing file. Default: no backing file is used.
.TP
.B \fBadapter\-type\fP: \fBBlockdevVmdkAdapterType\fP (optional)
The adapter type used to fill in the descriptor. Default: ide.
.TP
.B \fBhwversion\fP: \fBstring\fP (optional)
Hardware version. The meaningful options are "4" or "6".
Default: "4".
.TP
.B \fBtoolsversion\fP: \fBstring\fP (optional)
VMware guest tools version.
Default: "2147483647" (Since 6.2)
.TP
.B \fBzeroed\-grain\fP: \fBboolean\fP (optional)
Whether to enable zeroed\-grain feature for sparse subformats.
Default: false.
.UNINDENT
.SS Since
.sp
4.0
.SS \fBBlockdevCreateOptionsSsh\fP (Object)
.sp
Driver specific image creation options for SSH.
.SS Members
.INDENT 0.0
.TP
.B \fBlocation\fP: \fBBlockdevOptionsSsh\fP
Where to store the new image file
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsVdi\fP (Object)
.sp
Driver specific image creation options for VDI.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
Node to create the image format on
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBpreallocation\fP: \fBPreallocMode\fP (optional)
Preallocation mode for the new image (default: off;
allowed values: off, metadata)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevVhdxSubformat\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBdynamic\fP
Growing image file
.TP
.B \fBfixed\fP
Preallocated fixed\-size image file
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsVhdx\fP (Object)
.sp
Driver specific image creation options for vhdx.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
Node to create the image format on
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBlog\-size\fP: \fBint\fP (optional)
Log size in bytes, must be a multiple of 1 MB
(default: 1 MB)
.TP
.B \fBblock\-size\fP: \fBint\fP (optional)
Block size in bytes, must be a multiple of 1 MB and not
larger than 256 MB (default: automatically choose a block
size depending on the image size)
.TP
.B \fBsubformat\fP: \fBBlockdevVhdxSubformat\fP (optional)
vhdx subformat (default: dynamic)
.TP
.B \fBblock\-state\-zero\fP: \fBboolean\fP (optional)
Force use of payload blocks of type \(aqZERO\(aq. Non\-standard,
but default.  Do not set to \(aqoff\(aq when using \(aqqemu\-img
convert\(aq with subformat=dynamic.
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevVpcSubformat\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBdynamic\fP
Growing image file
.TP
.B \fBfixed\fP
Preallocated fixed\-size image file
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptionsVpc\fP (Object)
.sp
Driver specific image creation options for vpc (VHD).
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBBlockdevRef\fP
Node to create the image format on
.TP
.B \fBsize\fP: \fBint\fP
Size of the virtual disk in bytes
.TP
.B \fBsubformat\fP: \fBBlockdevVpcSubformat\fP (optional)
vhdx subformat (default: dynamic)
.TP
.B \fBforce\-size\fP: \fBboolean\fP (optional)
Force use of the exact byte size instead of rounding to the
next size that can be represented in CHS geometry
(default: false)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBBlockdevCreateOptions\fP (Object)
.sp
Options for creating an image format on a given node.
.SS Members
.INDENT 0.0
.TP
.B \fBdriver\fP: \fBBlockdevDriver\fP
block driver to create the image format
.TP
.B The members of \fBBlockdevCreateOptionsFile\fP when \fBdriver\fP is \fB"file"\fP
.TP
.B The members of \fBBlockdevCreateOptionsGluster\fP when \fBdriver\fP is \fB"gluster"\fP
.TP
.B The members of \fBBlockdevCreateOptionsLUKS\fP when \fBdriver\fP is \fB"luks"\fP
.TP
.B The members of \fBBlockdevCreateOptionsNfs\fP when \fBdriver\fP is \fB"nfs"\fP
.TP
.B The members of \fBBlockdevCreateOptionsParallels\fP when \fBdriver\fP is \fB"parallels"\fP
.TP
.B The members of \fBBlockdevCreateOptionsQcow\fP when \fBdriver\fP is \fB"qcow"\fP
.TP
.B The members of \fBBlockdevCreateOptionsQcow2\fP when \fBdriver\fP is \fB"qcow2"\fP
.TP
.B The members of \fBBlockdevCreateOptionsQed\fP when \fBdriver\fP is \fB"qed"\fP
.TP
.B The members of \fBBlockdevCreateOptionsRbd\fP when \fBdriver\fP is \fB"rbd"\fP
.TP
.B The members of \fBBlockdevCreateOptionsSsh\fP when \fBdriver\fP is \fB"ssh"\fP
.TP
.B The members of \fBBlockdevCreateOptionsVdi\fP when \fBdriver\fP is \fB"vdi"\fP
.TP
.B The members of \fBBlockdevCreateOptionsVhdx\fP when \fBdriver\fP is \fB"vhdx"\fP
.TP
.B The members of \fBBlockdevCreateOptionsVmdk\fP when \fBdriver\fP is \fB"vmdk"\fP
.TP
.B The members of \fBBlockdevCreateOptionsVpc\fP when \fBdriver\fP is \fB"vpc"\fP
.UNINDENT
.SS Since
.sp
2.12
.SS \fBblockdev\-create\fP (Command)
.sp
Starts a job to create an image format on a given node. The job is
automatically finalized, but a manual job\-dismiss is required.
.SS Arguments
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP
Identifier for the newly created job.
.TP
.B \fBoptions\fP: \fBBlockdevCreateOptions\fP
Options for the image creation.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBBlockdevAmendOptionsLUKS\fP (Object)
.sp
Driver specific image amend options for LUKS.
.SS Members
.INDENT 0.0
.TP
.B The members of \fBQCryptoBlockAmendOptionsLUKS\fP
.UNINDENT
.SS Since
.sp
5.1
.SS \fBBlockdevAmendOptionsQcow2\fP (Object)
.sp
Driver specific image amend options for qcow2.
For now, only encryption options can be amended
.sp
\fBencrypt\fP          Encryption options to be amended
.SS Members
.INDENT 0.0
.TP
.B \fBencrypt\fP: \fBQCryptoBlockAmendOptions\fP (optional)
Not documented
.UNINDENT
.SS Since
.sp
5.1
.SS \fBBlockdevAmendOptions\fP (Object)
.sp
Options for amending an image format
.SS Members
.INDENT 0.0
.TP
.B \fBdriver\fP: \fBBlockdevDriver\fP
Block driver of the node to amend.
.TP
.B The members of \fBBlockdevAmendOptionsLUKS\fP when \fBdriver\fP is \fB"luks"\fP
.TP
.B The members of \fBBlockdevAmendOptionsQcow2\fP when \fBdriver\fP is \fB"qcow2"\fP
.UNINDENT
.SS Since
.sp
5.1
.SS \fBx\-blockdev\-amend\fP (Command)
.sp
Starts a job to amend format specific options of an existing open block device
The job is automatically finalized, but a manual job\-dismiss is required.
.SS Arguments
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP
Identifier for the newly created job.
.TP
.B \fBnode\-name\fP: \fBstring\fP
Name of the block node to work on
.TP
.B \fBoptions\fP: \fBBlockdevAmendOptions\fP
Options (driver specific)
.TP
.B \fBforce\fP: \fBboolean\fP (optional)
Allow unsafe operations, format specific
For luks that allows erase of the last active keyslot
(permanent loss of data),
and replacement of an active keyslot
(possible loss of data if IO error happens)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is experimental.
.UNINDENT
.SS Since
.sp
5.1
.SS \fBBlockErrorAction\fP (Enum)
.sp
An enumeration of action that has been taken when a DISK I/O occurs
.SS Values
.INDENT 0.0
.TP
.B \fBignore\fP
error has been ignored
.TP
.B \fBreport\fP
error has been reported to the device
.TP
.B \fBstop\fP
error caused VM to be stopped
.UNINDENT
.SS Since
.sp
2.1
.SS \fBBLOCK_IMAGE_CORRUPTED\fP (Event)
.sp
Emitted when a disk image is being marked corrupt. The image can be
identified by its device or node name. The \(aqdevice\(aq field is always
present for compatibility reasons, but it can be empty ("") if the
image does not have a device name associated.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
device name. This is always present for compatibility
reasons, but it can be empty ("") if the image does not
have a device name associated.
.TP
.B \fBnode\-name\fP: \fBstring\fP (optional)
node name (Since: 2.4)
.TP
.B \fBmsg\fP: \fBstring\fP
informative message for human consumption, such as the kind of
corruption being detected. It should not be parsed by machine as it is
not guaranteed to be stable
.TP
.B \fBoffset\fP: \fBint\fP (optional)
if the corruption resulted from an image access, this is
the host\(aqs access offset into the image
.TP
.B \fBsize\fP: \fBint\fP (optional)
if the corruption resulted from an image access, this is
the access size
.TP
.B \fBfatal\fP: \fBboolean\fP
if set, the image is marked corrupt and therefore unusable after this
event and must be repaired (Since 2.2; before, every
BLOCK_IMAGE_CORRUPTED event was fatal)
.UNINDENT
.SS Note
.sp
If action is "stop", a STOP event will eventually follow the
BLOCK_IO_ERROR event.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "BLOCK_IMAGE_CORRUPTED",
     "data": { "device": "", "node\-name": "drive", "fatal": false,
               "msg": "L2 table offset 0x2a2a2a00 unaligned (L1 index: 0)" },
     "timestamp": { "seconds": 1648243240, "microseconds": 906060 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
1.7
.SS \fBBLOCK_IO_ERROR\fP (Event)
.sp
Emitted when a disk I/O error occurs
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
device name. This is always present for compatibility
reasons, but it can be empty ("") if the image does not
have a device name associated.
.TP
.B \fBnode\-name\fP: \fBstring\fP (optional)
node name. Note that errors may be reported for the root node
that is directly attached to a guest device rather than for the
node where the error occurred. The node name is not present if
the drive is empty. (Since: 2.8)
.TP
.B \fBoperation\fP: \fBIoOperationType\fP
I/O operation
.TP
.B \fBaction\fP: \fBBlockErrorAction\fP
action that has been taken
.TP
.B \fBnospace\fP: \fBboolean\fP (optional)
true if I/O error was caused due to a no\-space
condition. This key is only present if query\-block\(aqs
io\-status is present, please see query\-block documentation
for more information (since: 2.2)
.TP
.B \fBreason\fP: \fBstring\fP
human readable string describing the error cause.
(This field is a debugging aid for humans, it should not
be parsed by applications) (since: 2.2)
.UNINDENT
.SS Note
.sp
If action is "stop", a STOP event will eventually follow the
BLOCK_IO_ERROR event
.SS Since
.sp
0.13
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "BLOCK_IO_ERROR",
     "data": { "device": "ide0\-hd1",
               "node\-name": "#block212",
               "operation": "write",
               "action": "stop",
               "reason": "No space left on device" },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBLOCK_JOB_COMPLETED\fP (Event)
.sp
Emitted when a block job has completed
.SS Arguments
.INDENT 0.0
.TP
.B \fBtype\fP: \fBJobType\fP
job type
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
.TP
.B \fBlen\fP: \fBint\fP
maximum progress value
.TP
.B \fBoffset\fP: \fBint\fP
current progress value. On success this is equal to len.
On failure this is less than len
.TP
.B \fBspeed\fP: \fBint\fP
rate limit, bytes per second
.TP
.B \fBerror\fP: \fBstring\fP (optional)
error message. Only present on failure. This field
contains a human\-readable error message. There are no semantics
other than that streaming has failed and clients should not try to
interpret the error string
.UNINDENT
.SS Since
.sp
1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "BLOCK_JOB_COMPLETED",
     "data": { "type": "stream", "device": "virtio\-disk0",
               "len": 10737418240, "offset": 10737418240,
               "speed": 0 },
     "timestamp": { "seconds": 1267061043, "microseconds": 959568 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBLOCK_JOB_CANCELLED\fP (Event)
.sp
Emitted when a block job has been cancelled
.SS Arguments
.INDENT 0.0
.TP
.B \fBtype\fP: \fBJobType\fP
job type
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
.TP
.B \fBlen\fP: \fBint\fP
maximum progress value
.TP
.B \fBoffset\fP: \fBint\fP
current progress value. On success this is equal to len.
On failure this is less than len
.TP
.B \fBspeed\fP: \fBint\fP
rate limit, bytes per second
.UNINDENT
.SS Since
.sp
1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "BLOCK_JOB_CANCELLED",
     "data": { "type": "stream", "device": "virtio\-disk0",
               "len": 10737418240, "offset": 134217728,
               "speed": 0 },
     "timestamp": { "seconds": 1267061043, "microseconds": 959568 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBLOCK_JOB_ERROR\fP (Event)
.sp
Emitted when a block job encounters an error
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
.TP
.B \fBoperation\fP: \fBIoOperationType\fP
I/O operation
.TP
.B \fBaction\fP: \fBBlockErrorAction\fP
action that has been taken
.UNINDENT
.SS Since
.sp
1.3
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "BLOCK_JOB_ERROR",
     "data": { "device": "ide0\-hd1",
               "operation": "write",
               "action": "stop" },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBLOCK_JOB_READY\fP (Event)
.sp
Emitted when a block job is ready to complete
.SS Arguments
.INDENT 0.0
.TP
.B \fBtype\fP: \fBJobType\fP
job type
.TP
.B \fBdevice\fP: \fBstring\fP
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
.TP
.B \fBlen\fP: \fBint\fP
maximum progress value
.TP
.B \fBoffset\fP: \fBint\fP
current progress value. On success this is equal to len.
On failure this is less than len
.TP
.B \fBspeed\fP: \fBint\fP
rate limit, bytes per second
.UNINDENT
.SS Note
.sp
The "ready to complete" status is always reset by a \fBBLOCK_JOB_ERROR\fP
event
.SS Since
.sp
1.3
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "BLOCK_JOB_READY",
     "data": { "device": "drive0", "type": "mirror", "speed": 0,
               "len": 2097152, "offset": 2097152 },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBLOCK_JOB_PENDING\fP (Event)
.sp
Emitted when a block job is awaiting explicit authorization to finalize graph
changes via \fBblock\-job\-finalize\fP\&. If this job is part of a transaction, it will
not emit this event until the transaction has converged first.
.SS Arguments
.INDENT 0.0
.TP
.B \fBtype\fP: \fBJobType\fP
job type
.TP
.B \fBid\fP: \fBstring\fP
The job identifier.
.UNINDENT
.SS Since
.sp
2.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "BLOCK_JOB_PENDING",
     "data": { "type": "mirror", "id": "backup_1" },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBPreallocMode\fP (Enum)
.sp
Preallocation mode of QEMU image file
.SS Values
.INDENT 0.0
.TP
.B \fBoff\fP
no preallocation
.TP
.B \fBmetadata\fP
preallocate only for metadata
.TP
.B \fBfalloc\fP
like \fBfull\fP preallocation but allocate disk space by
posix_fallocate() rather than writing data.
.TP
.B \fBfull\fP
preallocate all data by writing it to the device to ensure
disk space is really available. This data may or may not be
zero, depending on the image format and storage.
\fBfull\fP preallocation also sets up metadata correctly.
.UNINDENT
.SS Since
.sp
2.2
.SS \fBBLOCK_WRITE_THRESHOLD\fP (Event)
.sp
Emitted when writes on block device reaches or exceeds the
configured write threshold. For thin\-provisioned devices, this
means the device should be extended to avoid pausing for
disk exhaustion.
The event is one shot. Once triggered, it needs to be
re\-registered with another block\-set\-write\-threshold command.
.SS Arguments
.INDENT 0.0
.TP
.B \fBnode\-name\fP: \fBstring\fP
graph node name on which the threshold was exceeded.
.TP
.B \fBamount\-exceeded\fP: \fBint\fP
amount of data which exceeded the threshold, in bytes.
.TP
.B \fBwrite\-threshold\fP: \fBint\fP
last configured threshold, in bytes.
.UNINDENT
.SS Since
.sp
2.3
.SS \fBblock\-set\-write\-threshold\fP (Command)
.sp
Change the write threshold for a block drive. An event will be
delivered if a write to this block drive crosses the configured
threshold.  The threshold is an offset, thus must be
non\-negative. Default is no write threshold. Setting the threshold
to zero disables it.
.sp
This is useful to transparently resize thin\-provisioned drives without
the guest OS noticing.
.SS Arguments
.INDENT 0.0
.TP
.B \fBnode\-name\fP: \fBstring\fP
graph node name on which the threshold must be set.
.TP
.B \fBwrite\-threshold\fP: \fBint\fP
configured threshold for the block device, bytes.
Use 0 to disable the threshold.
.UNINDENT
.SS Since
.sp
2.3
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block\-set\-write\-threshold",
     "arguments": { "node\-name": "mydev",
                    "write\-threshold": 17179869184 } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBx\-blockdev\-change\fP (Command)
.sp
Dynamically reconfigure the block driver state graph. It can be used
to add, remove, insert or replace a graph node. Currently only the
Quorum driver implements this feature to add or remove its child. This
is useful to fix a broken quorum child.
.sp
If \fBnode\fP is specified, it will be inserted under \fBparent\fP\&. \fBchild\fP
may not be specified in this case. If both \fBparent\fP and \fBchild\fP are
specified but \fBnode\fP is not, \fBchild\fP will be detached from \fBparent\fP\&.
.SS Arguments
.INDENT 0.0
.TP
.B \fBparent\fP: \fBstring\fP
the id or name of the parent node.
.TP
.B \fBchild\fP: \fBstring\fP (optional)
the name of a child under the given parent node.
.TP
.B \fBnode\fP: \fBstring\fP (optional)
the name of the node that will be added.
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is experimental, and its API is not stable.  It
does not support all kinds of operations, all kinds of
children, nor all block drivers.
.sp
FIXME Removing children from a quorum node means introducing
gaps in the child indices. This cannot be represented in the
\(aqchildren\(aq list of BlockdevOptionsQuorum, as returned by
\&.bdrv_refresh_filename().
.sp
Warning: The data in a new quorum child MUST be consistent
with that of the rest of the array.
.UNINDENT
.SS Since
.sp
2.7
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Add a new node to a quorum
\-> { "execute": "blockdev\-add",
     "arguments": {
         "driver": "raw",
         "node\-name": "new_node",
         "file": { "driver": "file",
                   "filename": "test.raw" } } }
<\- { "return": {} }
\-> { "execute": "x\-blockdev\-change",
     "arguments": { "parent": "disk1",
                    "node": "new_node" } }
<\- { "return": {} }

2. Delete a quorum\(aqs node
\-> { "execute": "x\-blockdev\-change",
     "arguments": { "parent": "disk1",
                    "child": "children.1" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBx\-blockdev\-set\-iothread\fP (Command)
.sp
Move \fBnode\fP and its children into the \fBiothread\fP\&.  If \fBiothread\fP is null then
move \fBnode\fP and its children into the main loop.
.sp
The node must not be attached to a BlockBackend.
.SS Arguments
.INDENT 0.0
.TP
.B \fBnode\-name\fP: \fBstring\fP
the name of the block driver node
.TP
.B \fBiothread\fP: \fBStrOrNull\fP
the name of the IOThread object or null for the main loop
.TP
.B \fBforce\fP: \fBboolean\fP (optional)
true if the node and its children should be moved when a BlockBackend
is already attached
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is experimental and intended for test cases that
need control over IOThreads only.
.UNINDENT
.SS Since
.sp
2.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Move a node into an IOThread
\-> { "execute": "x\-blockdev\-set\-iothread",
     "arguments": { "node\-name": "disk1",
                    "iothread": "iothread0" } }
<\- { "return": {} }

2. Move a node into the main loop
\-> { "execute": "x\-blockdev\-set\-iothread",
     "arguments": { "node\-name": "disk1",
                    "iothread": null } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBQuorumOpType\fP (Enum)
.sp
An enumeration of the quorum operation types
.SS Values
.INDENT 0.0
.TP
.B \fBread\fP
read operation
.TP
.B \fBwrite\fP
write operation
.TP
.B \fBflush\fP
flush operation
.UNINDENT
.SS Since
.sp
2.6
.SS \fBQUORUM_FAILURE\fP (Event)
.sp
Emitted by the Quorum block driver if it fails to establish a quorum
.SS Arguments
.INDENT 0.0
.TP
.B \fBreference\fP: \fBstring\fP
device name if defined else node name
.TP
.B \fBsector\-num\fP: \fBint\fP
number of the first sector of the failed read operation
.TP
.B \fBsectors\-count\fP: \fBint\fP
failed read operation sector count
.UNINDENT
.SS Note
.sp
This event is rate\-limited.
.SS Since
.sp
2.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "QUORUM_FAILURE",
     "data": { "reference": "usr1", "sector\-num": 345435, "sectors\-count": 5 },
     "timestamp": { "seconds": 1344522075, "microseconds": 745528 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBQUORUM_REPORT_BAD\fP (Event)
.sp
Emitted to report a corruption of a Quorum file
.SS Arguments
.INDENT 0.0
.TP
.B \fBtype\fP: \fBQuorumOpType\fP
quorum operation type (Since 2.6)
.TP
.B \fBerror\fP: \fBstring\fP (optional)
error message. Only present on failure. This field
contains a human\-readable error message. There are no semantics other
than that the block layer reported an error and clients should not
try to interpret the error string.
.TP
.B \fBnode\-name\fP: \fBstring\fP
the graph node name of the block driver state
.TP
.B \fBsector\-num\fP: \fBint\fP
number of the first sector of the failed read operation
.TP
.B \fBsectors\-count\fP: \fBint\fP
failed read operation sector count
.UNINDENT
.SS Note
.sp
This event is rate\-limited.
.SS Since
.sp
2.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Read operation

{ "event": "QUORUM_REPORT_BAD",
     "data": { "node\-name": "node0", "sector\-num": 345435, "sectors\-count": 5,
               "type": "read" },
     "timestamp": { "seconds": 1344522075, "microseconds": 745528 } }

2. Flush operation

{ "event": "QUORUM_REPORT_BAD",
     "data": { "node\-name": "node0", "sector\-num": 0, "sectors\-count": 2097120,
               "type": "flush", "error": "Broken pipe" },
     "timestamp": { "seconds": 1456406829, "microseconds": 291763 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBlockdevSnapshotInternal\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
the device name or node\-name of a root node to generate the snapshot
from
.TP
.B \fBname\fP: \fBstring\fP
the name of the internal snapshot to be created
.UNINDENT
.SS Notes
.sp
In transaction, if \fBname\fP is empty, or any snapshot matching \fBname\fP
exists, the operation will fail. Only some image formats support it,
for example, qcow2, and rbd.
.SS Since
.sp
1.7
.SS \fBblockdev\-snapshot\-internal\-sync\fP (Command)
.sp
Synchronously take an internal snapshot of a block device, when the
format of the image used supports it. If the name is an empty
string, or a snapshot with name already exists, the operation will
fail.
.sp
For the arguments, see the documentation of BlockdevSnapshotInternal.
.SS Returns
.INDENT 0.0
.IP \(bu 2
nothing on success
.IP \(bu 2
If \fBdevice\fP is not a valid block device, GenericError
.IP \(bu 2
If any snapshot matching \fBname\fP exists, or \fBname\fP is empty,
GenericError
.IP \(bu 2
If the format of the image used does not support it,
BlockFormatFeatureNotSupported
.UNINDENT
.SS Since
.sp
1.7
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-snapshot\-internal\-sync",
     "arguments": { "device": "ide\-hd0",
                    "name": "snapshot0" }
   }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblockdev\-snapshot\-delete\-internal\-sync\fP (Command)
.sp
Synchronously delete an internal snapshot of a block device, when the format
of the image used support it. The snapshot is identified by name or id or
both. One of the name or id is required. Return SnapshotInfo for the
successfully deleted snapshot.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
the device name or node\-name of a root node to delete the snapshot
from
.TP
.B \fBid\fP: \fBstring\fP (optional)
optional the snapshot\(aqs ID to be deleted
.TP
.B \fBname\fP: \fBstring\fP (optional)
optional the snapshot\(aqs name to be deleted
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
SnapshotInfo on success
.IP \(bu 2
If \fBdevice\fP is not a valid block device, GenericError
.IP \(bu 2
If snapshot not found, GenericError
.IP \(bu 2
If the format of the image used does not support it,
BlockFormatFeatureNotSupported
.IP \(bu 2
If \fBid\fP and \fBname\fP are both not specified, GenericError
.UNINDENT
.SS Since
.sp
1.7
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-snapshot\-delete\-internal\-sync",
     "arguments": { "device": "ide\-hd0",
                    "name": "snapshot0" }
   }
<\- { "return": {
                   "id": "1",
                   "name": "snapshot0",
                   "vm\-state\-size": 0,
                   "date\-sec": 1000012,
                   "date\-nsec": 10,
                   "vm\-clock\-sec": 100,
                   "vm\-clock\-nsec": 20,
                   "icount": 220414
     }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Additional block stuff (VM related)
.SS \fBBiosAtaTranslation\fP (Enum)
.sp
Policy that BIOS should use to interpret cylinder/head/sector
addresses.  Note that Bochs BIOS and SeaBIOS will not actually
translate logical CHS to physical; instead, they will use logical
block addressing.
.SS Values
.INDENT 0.0
.TP
.B \fBauto\fP
If cylinder/heads/sizes are passed, choose between none and LBA
depending on the size of the disk.  If they are not passed,
choose none if QEMU can guess that the disk had 16 or fewer
heads, large if QEMU can guess that the disk had 131072 or
fewer tracks across all heads (i.e. cylinders*heads<131072),
otherwise LBA.
.TP
.B \fBnone\fP
The physical disk geometry is equal to the logical geometry.
.TP
.B \fBlba\fP
Assume 63 sectors per track and one of 16, 32, 64, 128 or 255
heads (if fewer than 255 are enough to cover the whole disk
with 1024 cylinders/head).  The number of cylinders/head is
then computed based on the number of sectors and heads.
.TP
.B \fBlarge\fP
The number of cylinders per head is scaled down to 1024
by correspondingly scaling up the number of heads.
.TP
.B \fBrechs\fP
Same as \fBlarge\fP, but first convert a 16\-head geometry to
15\-head, by proportionally scaling up the number of
cylinders/head.
.UNINDENT
.SS Since
.sp
2.0
.SS \fBFloppyDriveType\fP (Enum)
.sp
Type of Floppy drive to be emulated by the Floppy Disk Controller.
.SS Values
.INDENT 0.0
.TP
.B \fB144\fP
1.44MB 3.5" drive
.TP
.B \fB288\fP
2.88MB 3.5" drive
.TP
.B \fB120\fP
1.2MB 5.25" drive
.TP
.B \fBnone\fP
No drive connected
.TP
.B \fBauto\fP
Automatically determined by inserted media at boot
.UNINDENT
.SS Since
.sp
2.6
.SS \fBPRManagerInfo\fP (Object)
.sp
Information about a persistent reservation manager
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the identifier of the persistent reservation manager
.TP
.B \fBconnected\fP: \fBboolean\fP
true if the persistent reservation manager is connected to
the underlying storage or helper
.UNINDENT
.SS Since
.sp
3.0
.SS \fBquery\-pr\-managers\fP (Command)
.sp
Returns a list of information about each persistent reservation manager.
.SS Returns
.sp
a list of \fBPRManagerInfo\fP for each persistent reservation manager
.SS Since
.sp
3.0
.SS \fBeject\fP (Command)
.sp
Ejects the medium from a removable drive.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
Block device name
.TP
.B \fBid\fP: \fBstring\fP (optional)
The name or QOM path of the guest device (since: 2.8)
.TP
.B \fBforce\fP: \fBboolean\fP (optional)
If true, eject regardless of whether the drive is locked.
If not specified, the default value is false.
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBdevice\fP is deprecated.  Use \fBid\fP instead.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If \fBdevice\fP is not a valid block device, DeviceNotFound
.UNINDENT
.SS Notes
.sp
Ejecting a device with no media results in success
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "eject", "arguments": { "id": "ide1\-0\-1" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblockdev\-open\-tray\fP (Command)
.sp
Opens a block device\(aqs tray. If there is a block driver state tree inserted as
a medium, it will become inaccessible to the guest (but it will remain
associated to the block device, so closing the tray will make it accessible
again).
.sp
If the tray was already open before, this will be a no\-op.
.sp
Once the tray opens, a DEVICE_TRAY_MOVED event is emitted. There are cases in
which no such event will be generated, these include:
.INDENT 0.0
.IP \(bu 2
if the guest has locked the tray, \fBforce\fP is false and the guest does not
respond to the eject request
.IP \(bu 2
if the BlockBackend denoted by \fBdevice\fP does not have a guest device attached
to it
.IP \(bu 2
if the guest device does not have an actual tray
.UNINDENT
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
Block device name
.TP
.B \fBid\fP: \fBstring\fP (optional)
The name or QOM path of the guest device (since: 2.8)
.TP
.B \fBforce\fP: \fBboolean\fP (optional)
if false (the default), an eject request will be sent to
the guest if it has locked the tray (and the tray will not be opened
immediately); if true, the tray will be opened regardless of whether
it is locked
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBdevice\fP is deprecated.  Use \fBid\fP instead.
.UNINDENT
.SS Since
.sp
2.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-open\-tray",
     "arguments": { "id": "ide0\-1\-0" } }

<\- { "timestamp": { "seconds": 1418751016,
                    "microseconds": 716996 },
     "event": "DEVICE_TRAY_MOVED",
     "data": { "device": "ide1\-cd0",
               "id": "ide0\-1\-0",
               "tray\-open": true } }

<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblockdev\-close\-tray\fP (Command)
.sp
Closes a block device\(aqs tray. If there is a block driver state tree associated
with the block device (which is currently ejected), that tree will be loaded
as the medium.
.sp
If the tray was already closed before, this will be a no\-op.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
Block device name
.TP
.B \fBid\fP: \fBstring\fP (optional)
The name or QOM path of the guest device (since: 2.8)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBdevice\fP is deprecated.  Use \fBid\fP instead.
.UNINDENT
.SS Since
.sp
2.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-close\-tray",
     "arguments": { "id": "ide0\-1\-0" } }

<\- { "timestamp": { "seconds": 1418751345,
                    "microseconds": 272147 },
     "event": "DEVICE_TRAY_MOVED",
     "data": { "device": "ide1\-cd0",
               "id": "ide0\-1\-0",
               "tray\-open": false } }

<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblockdev\-remove\-medium\fP (Command)
.sp
Removes a medium (a block driver state tree) from a block device. That block
device\(aqs tray must currently be open (unless there is no attached guest
device).
.sp
If the tray is open and there is no medium inserted, this will be a no\-op.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The name or QOM path of the guest device
.UNINDENT
.SS Since
.sp
2.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-remove\-medium",
     "arguments": { "id": "ide0\-1\-0" } }

<\- { "error": { "class": "GenericError",
                "desc": "Tray of device \(aqide0\-1\-0\(aq is not open" } }

\-> { "execute": "blockdev\-open\-tray",
     "arguments": { "id": "ide0\-1\-0" } }

<\- { "timestamp": { "seconds": 1418751627,
                    "microseconds": 549958 },
     "event": "DEVICE_TRAY_MOVED",
     "data": { "device": "ide1\-cd0",
               "id": "ide0\-1\-0",
               "tray\-open": true } }

<\- { "return": {} }

\-> { "execute": "blockdev\-remove\-medium",
     "arguments": { "id": "ide0\-1\-0" } }

<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblockdev\-insert\-medium\fP (Command)
.sp
Inserts a medium (a block driver state tree) into a block device. That block
device\(aqs tray must currently be open (unless there is no attached guest
device) and there must be no medium inserted already.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The name or QOM path of the guest device
.TP
.B \fBnode\-name\fP: \fBstring\fP
name of a node in the block driver state graph
.UNINDENT
.SS Since
.sp
2.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "blockdev\-add",
     "arguments": {
         "node\-name": "node0",
         "driver": "raw",
         "file": { "driver": "file",
                   "filename": "fedora.iso" } } }
<\- { "return": {} }

\-> { "execute": "blockdev\-insert\-medium",
     "arguments": { "id": "ide0\-1\-0",
                    "node\-name": "node0" } }

<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBlockdevChangeReadOnlyMode\fP (Enum)
.sp
Specifies the new read\-only mode of a block device subject to the
\fBblockdev\-change\-medium\fP command.
.SS Values
.INDENT 0.0
.TP
.B \fBretain\fP
Retains the current read\-only mode
.TP
.B \fBread\-only\fP
Makes the device read\-only
.TP
.B \fBread\-write\fP
Makes the device writable
.UNINDENT
.SS Since
.sp
2.3
.SS \fBblockdev\-change\-medium\fP (Command)
.sp
Changes the medium inserted into a block device by ejecting the current medium
and loading a new image file which is inserted as the new medium (this command
combines blockdev\-open\-tray, blockdev\-remove\-medium, blockdev\-insert\-medium
and blockdev\-close\-tray).
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
Block device name
.TP
.B \fBid\fP: \fBstring\fP (optional)
The name or QOM path of the guest device
(since: 2.8)
.TP
.B \fBfilename\fP: \fBstring\fP
filename of the new image to be loaded
.TP
.B \fBformat\fP: \fBstring\fP (optional)
format to open the new image with (defaults to
the probed format)
.TP
.B \fBread\-only\-mode\fP: \fBBlockdevChangeReadOnlyMode\fP (optional)
change the read\-only mode of the device; defaults
to \(aqretain\(aq
.TP
.B \fBforce\fP: \fBboolean\fP (optional)
if false (the default), an eject request through blockdev\-open\-tray
will be sent to the guest if it has locked the tray (and the tray
will not be opened immediately); if true, the tray will be opened
regardless of whether it is locked. (since 7.1)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBdevice\fP is deprecated.  Use \fBid\fP instead.
.UNINDENT
.SS Since
.sp
2.5
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Change a removable medium

\-> { "execute": "blockdev\-change\-medium",
     "arguments": { "id": "ide0\-1\-0",
                    "filename": "/srv/images/Fedora\-12\-x86_64\-DVD.iso",
                    "format": "raw" } }
<\- { "return": {} }

2. Load a read\-only medium into a writable drive

\-> { "execute": "blockdev\-change\-medium",
     "arguments": { "id": "floppyA",
                    "filename": "/srv/images/ro.img",
                    "format": "raw",
                    "read\-only\-mode": "retain" } }

<\- { "error":
     { "class": "GenericError",
       "desc": "Could not open \(aq/srv/images/ro.img\(aq: Permission denied" } }

\-> { "execute": "blockdev\-change\-medium",
     "arguments": { "id": "floppyA",
                    "filename": "/srv/images/ro.img",
                    "format": "raw",
                    "read\-only\-mode": "read\-only" } }

<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDEVICE_TRAY_MOVED\fP (Event)
.sp
Emitted whenever the tray of a removable device is moved by the guest or by
HMP/QMP commands
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
Block device name. This is always present for compatibility
reasons, but it can be empty ("") if the image does not
have a device name associated.
.TP
.B \fBid\fP: \fBstring\fP
The name or QOM path of the guest device (since 2.8)
.TP
.B \fBtray\-open\fP: \fBboolean\fP
true if the tray has been opened or false if it has been closed
.UNINDENT
.SS Since
.sp
1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "DEVICE_TRAY_MOVED",
     "data": { "device": "ide1\-cd0",
               "id": "/machine/unattached/device[22]",
               "tray\-open": true
     },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBPR_MANAGER_STATUS_CHANGED\fP (Event)
.sp
Emitted whenever the connected status of a persistent reservation
manager changes.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The id of the PR manager object
.TP
.B \fBconnected\fP: \fBboolean\fP
true if the PR manager is connected to a backend
.UNINDENT
.SS Since
.sp
3.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "PR_MANAGER_STATUS_CHANGED",
     "data": { "id": "pr\-helper0",
               "connected": true
     },
     "timestamp": { "seconds": 1519840375, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblock_set_io_throttle\fP (Command)
.sp
Change I/O throttle limits for a block drive.
.sp
Since QEMU 2.4, each device with I/O limits is member of a throttle
group.
.sp
If two or more devices are members of the same group, the limits
will apply to the combined I/O of the whole group in a round\-robin
fashion. Therefore, setting new I/O limits to a device will affect
the whole group.
.sp
The name of the group can be specified using the \(aqgroup\(aq parameter.
If the parameter is unset, it is assumed to be the current group of
that device. If it\(aqs not in any group yet, the name of the device
will be used as the name for its group.
.sp
The \(aqgroup\(aq parameter can also be used to move a device to a
different group. In this case the limits specified in the parameters
will be applied to the new group only.
.sp
I/O limits can be disabled by setting all of them to 0. In this case
the device will be removed from its group and the rest of its
members will not be affected. The \(aqgroup\(aq parameter is ignored.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBBlockIOThrottle\fP
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If \fBdevice\fP is not a valid block device, DeviceNotFound
.UNINDENT
.SS Since
.sp
1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "block_set_io_throttle",
     "arguments": { "id": "virtio\-blk\-pci0/virtio\-backend",
                    "bps": 0,
                    "bps_rd": 0,
                    "bps_wr": 0,
                    "iops": 512,
                    "iops_rd": 0,
                    "iops_wr": 0,
                    "bps_max": 0,
                    "bps_rd_max": 0,
                    "bps_wr_max": 0,
                    "iops_max": 0,
                    "iops_rd_max": 0,
                    "iops_wr_max": 0,
                    "bps_max_length": 0,
                    "iops_size": 0 } }
<\- { "return": {} }

\-> { "execute": "block_set_io_throttle",
     "arguments": { "id": "ide0\-1\-0",
                    "bps": 1000000,
                    "bps_rd": 0,
                    "bps_wr": 0,
                    "iops": 0,
                    "iops_rd": 0,
                    "iops_wr": 0,
                    "bps_max": 8000000,
                    "bps_rd_max": 0,
                    "bps_wr_max": 0,
                    "iops_max": 0,
                    "iops_rd_max": 0,
                    "iops_wr_max": 0,
                    "bps_max_length": 60,
                    "iops_size": 0 } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBblock\-latency\-histogram\-set\fP (Command)
.sp
Manage read, write and flush latency histograms for the device.
.sp
If only \fBid\fP parameter is specified, remove all present latency histograms
for the device. Otherwise, add/reset some of (or all) latency histograms.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The name or QOM path of the guest device.
.TP
.B \fBboundaries\fP: \fBarray of int\fP (optional)
list of interval boundary values (see description in
BlockLatencyHistogramInfo definition). If specified, all
latency histograms are removed, and empty ones created for all
io types with intervals corresponding to \fBboundaries\fP (except for
io types, for which specific boundaries are set through the
following parameters).
.TP
.B \fBboundaries\-read\fP: \fBarray of int\fP (optional)
list of interval boundary values for read latency
histogram. If specified, old read latency histogram is
removed, and empty one created with intervals
corresponding to \fBboundaries\-read\fP\&. The parameter has higher
priority then \fBboundaries\fP\&.
.TP
.B \fBboundaries\-write\fP: \fBarray of int\fP (optional)
list of interval boundary values for write latency
histogram.
.TP
.B \fBboundaries\-flush\fP: \fBarray of int\fP (optional)
list of interval boundary values for flush latency
histogram.
.UNINDENT
.SS Returns
.sp
error if device is not found or any boundary arrays are invalid.
.SS Since
.sp
4.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set new histograms for all io types with intervals
[0, 10), [10, 50), [50, 100), [100, +inf):

\-> { "execute": "block\-latency\-histogram\-set",
     "arguments": { "id": "drive0",
                    "boundaries": [10, 50, 100] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set new histogram only for write, other histograms will remain
not changed (or not created):

\-> { "execute": "block\-latency\-histogram\-set",
     "arguments": { "id": "drive0",
                    "boundaries\-write": [10, 50, 100] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
set new histograms with the following intervals:
  read, flush: [0, 10), [10, 50), [50, 100), [100, +inf)
  write: [0, 1000), [1000, 5000), [5000, +inf)

\-> { "execute": "block\-latency\-histogram\-set",
     "arguments": { "id": "drive0",
                    "boundaries": [10, 50, 100],
                    "boundaries\-write": [1000, 5000] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
remove all latency histograms:

\-> { "execute": "block\-latency\-histogram\-set",
     "arguments": { "id": "drive0" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Block device exports
.SS \fBNbdServerOptions\fP (Object)
.sp
Keep this type consistent with the nbd\-server\-start arguments. The only
intended difference is using SocketAddress instead of SocketAddressLegacy.
.SS Members
.INDENT 0.0
.TP
.B \fBaddr\fP: \fBSocketAddress\fP
Address on which to listen.
.TP
.B \fBtls\-creds\fP: \fBstring\fP (optional)
ID of the TLS credentials object (since 2.6).
.TP
.B \fBtls\-authz\fP: \fBstring\fP (optional)
ID of the QAuthZ authorization object used to validate
the client\(aqs x509 distinguished name. This object is
is only resolved at time of use, so can be deleted and
recreated on the fly while the NBD server is active.
If missing, it will default to denying access (since 4.0).
.TP
.B \fBmax\-connections\fP: \fBint\fP (optional)
The maximum number of connections to allow at the same
time, 0 for unlimited. Setting this to 1 also stops
the server from advertising multiple client support
(since 5.2; default: 0)
.UNINDENT
.SS Since
.sp
4.2
.SS \fBnbd\-server\-start\fP (Command)
.sp
Start an NBD server listening on the given host and port.  Block
devices can then be exported using \fBnbd\-server\-add\fP\&.  The NBD
server will present them as named exports; for example, another
QEMU instance could refer to them as "nbd:HOST:PORT:exportname=NAME".
.sp
Keep this type consistent with the NbdServerOptions type. The only intended
difference is using SocketAddressLegacy instead of SocketAddress.
.SS Arguments
.INDENT 0.0
.TP
.B \fBaddr\fP: \fBSocketAddressLegacy\fP
Address on which to listen.
.TP
.B \fBtls\-creds\fP: \fBstring\fP (optional)
ID of the TLS credentials object (since 2.6).
.TP
.B \fBtls\-authz\fP: \fBstring\fP (optional)
ID of the QAuthZ authorization object used to validate
the client\(aqs x509 distinguished name. This object is
is only resolved at time of use, so can be deleted and
recreated on the fly while the NBD server is active.
If missing, it will default to denying access (since 4.0).
.TP
.B \fBmax\-connections\fP: \fBint\fP (optional)
The maximum number of connections to allow at the same
time, 0 for unlimited. Setting this to 1 also stops
the server from advertising multiple client support
(since 5.2; default: 0).
.UNINDENT
.SS Returns
.sp
error if the server is already running.
.SS Since
.sp
1.3
.SS \fBBlockExportOptionsNbdBase\fP (Object)
.sp
An NBD block export (common options shared between nbd\-server\-add and
the NBD branch of block\-export\-add).
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP (optional)
Export name. If unspecified, the \fBdevice\fP parameter is used as the
export name. (Since 2.12)
.TP
.B \fBdescription\fP: \fBstring\fP (optional)
Free\-form description of the export, up to 4096 bytes.
(Since 5.0)
.UNINDENT
.SS Since
.sp
5.0
.SS \fBBlockExportOptionsNbd\fP (Object)
.sp
An NBD block export (distinct options used in the NBD branch of
block\-export\-add).
.SS Members
.INDENT 0.0
.TP
.B \fBbitmaps\fP: \fBarray of BlockDirtyBitmapOrStr\fP (optional)
Also export each of the named dirty bitmaps reachable from
\fBdevice\fP, so the NBD client can use NBD_OPT_SET_META_CONTEXT with
the metadata context name "qemu:dirty\-bitmap:BITMAP" to inspect
each bitmap.
Since 7.1 bitmap may be specified by node/name pair.
.TP
.B \fBallocation\-depth\fP: \fBboolean\fP (optional)
Also export the allocation depth map for \fBdevice\fP, so
the NBD client can use NBD_OPT_SET_META_CONTEXT with
the metadata context name "qemu:allocation\-depth" to
inspect allocation details. (since 5.2)
.TP
.B The members of \fBBlockExportOptionsNbdBase\fP
.UNINDENT
.SS Since
.sp
5.2
.SS \fBBlockExportOptionsVhostUserBlk\fP (Object)
.sp
A vhost\-user\-blk block export.
.SS Members
.INDENT 0.0
.TP
.B \fBaddr\fP: \fBSocketAddress\fP
The vhost\-user socket on which to listen. Both \(aqunix\(aq and \(aqfd\(aq
SocketAddress types are supported. Passed fds must be UNIX domain
sockets.
.TP
.B \fBlogical\-block\-size\fP: \fBint\fP (optional)
Logical block size in bytes. Defaults to 512 bytes.
.TP
.B \fBnum\-queues\fP: \fBint\fP (optional)
Number of request virtqueues. Must be greater than 0. Defaults
to 1.
.UNINDENT
.SS Since
.sp
5.2
.SS \fBFuseExportAllowOther\fP (Enum)
.sp
Possible allow_other modes for FUSE exports.
.SS Values
.INDENT 0.0
.TP
.B \fBoff\fP
Do not pass allow_other as a mount option.
.TP
.B \fBon\fP
Pass allow_other as a mount option.
.TP
.B \fBauto\fP
Try mounting with allow_other first, and if that fails, retry
without allow_other.
.UNINDENT
.SS Since
.sp
6.1
.SS \fBBlockExportOptionsFuse\fP (Object)
.sp
Options for exporting a block graph node on some (file) mountpoint
as a raw image.
.SS Members
.INDENT 0.0
.TP
.B \fBmountpoint\fP: \fBstring\fP
Path on which to export the block device via FUSE.
This must point to an existing regular file.
.TP
.B \fBgrowable\fP: \fBboolean\fP (optional)
Whether writes beyond the EOF should grow the block node
accordingly. (default: false)
.TP
.B \fBallow\-other\fP: \fBFuseExportAllowOther\fP (optional)
If this is off, only qemu\(aqs user is allowed access to
this export.  That cannot be changed even with chmod or
chown.
Enabling this option will allow other users access to
the export with the FUSE mount option "allow_other".
Note that using allow_other as a non\-root user requires
user_allow_other to be enabled in the global fuse.conf
configuration file.
In auto mode (the default), the FUSE export driver will
first attempt to mount the export with allow_other, and
if that fails, try again without.
(since 6.1; default: auto)
.UNINDENT
.SS Since
.sp
6.0
.SS If
.sp
\fBCONFIG_FUSE\fP
.SS \fBBlockExportOptionsVduseBlk\fP (Object)
.sp
A vduse\-blk block export.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the name of VDUSE device (must be unique across the host).
.TP
.B \fBnum\-queues\fP: \fBint\fP (optional)
the number of virtqueues. Defaults to 1.
.TP
.B \fBqueue\-size\fP: \fBint\fP (optional)
the size of virtqueue. Defaults to 256.
.TP
.B \fBlogical\-block\-size\fP: \fBint\fP (optional)
Logical block size in bytes. Range [512, PAGE_SIZE]
and must be power of 2. Defaults to 512 bytes.
.TP
.B \fBserial\fP: \fBstring\fP (optional)
the serial number of virtio block device. Defaults to empty string.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBNbdServerAddOptions\fP (Object)
.sp
An NBD block export, per legacy nbd\-server\-add command.
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
The device name or node name of the node to be exported
.TP
.B \fBwritable\fP: \fBboolean\fP (optional)
Whether clients should be able to write to the device via the
NBD connection (default false).
.TP
.B \fBbitmap\fP: \fBstring\fP (optional)
Also export a single dirty bitmap reachable from \fBdevice\fP, so the
NBD client can use NBD_OPT_SET_META_CONTEXT with the metadata
context name "qemu:dirty\-bitmap:BITMAP" to inspect the bitmap
(since 4.0).
.TP
.B The members of \fBBlockExportOptionsNbdBase\fP
.UNINDENT
.SS Since
.sp
5.0
.SS \fBnbd\-server\-add\fP (Command)
.sp
Export a block node to QEMU\(aqs embedded NBD server.
.sp
The export name will be used as the id for the resulting block export.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBNbdServerAddOptions\fP
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
This command is deprecated. Use \fBblock\-export\-add\fP instead.
.UNINDENT
.SS Returns
.sp
error if the server is not running, or export with the same name
already exists.
.SS Since
.sp
1.3
.SS \fBBlockExportRemoveMode\fP (Enum)
.sp
Mode for removing a block export.
.SS Values
.INDENT 0.0
.TP
.B \fBsafe\fP
Remove export if there are no existing connections, fail otherwise.
.TP
.B \fBhard\fP
Drop all connections immediately and remove export.
.UNINDENT
.SS TODO
.sp
Potential additional modes to be added in the future:
.sp
hide: Just hide export from new clients, leave existing connections as is.
Remove export after all clients are disconnected.
.sp
soft: Hide export from new clients, answer with ESHUTDOWN for all further
requests from existing clients.
.SS Since
.sp
2.12
.SS \fBnbd\-server\-remove\fP (Command)
.sp
Remove NBD export by name.
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
Block export id.
.TP
.B \fBmode\fP: \fBBlockExportRemoveMode\fP (optional)
Mode of command operation. See \fBBlockExportRemoveMode\fP description.
Default is \(aqsafe\(aq.
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
This command is deprecated. Use \fBblock\-export\-del\fP instead.
.UNINDENT
.SS Returns
.INDENT 0.0
.TP
.B error if
.INDENT 7.0
.IP \(bu 2
the server is not running
.IP \(bu 2
export is not found
.IP \(bu 2
mode is \(aqsafe\(aq and there are existing connections
.UNINDENT
.UNINDENT
.SS Since
.sp
2.12
.SS \fBnbd\-server\-stop\fP (Command)
.sp
Stop QEMU\(aqs embedded NBD server, and unregister all devices previously
added via \fBnbd\-server\-add\fP\&.
.SS Since
.sp
1.3
.SS \fBBlockExportType\fP (Enum)
.sp
An enumeration of block export types
.SS Values
.INDENT 0.0
.TP
.B \fBnbd\fP
NBD export
.TP
\fBvhost\-user\-blk\fP (\fBIf: \fP\fBCONFIG_VHOST_USER_BLK_SERVER\fP)
vhost\-user\-blk export (since 5.2)
.TP
\fBfuse\fP (\fBIf: \fP\fBCONFIG_FUSE\fP)
FUSE export (since: 6.0)
.TP
\fBvduse\-blk\fP (\fBIf: \fP\fBCONFIG_VDUSE_BLK_EXPORT\fP)
vduse\-blk export (since 7.1)
.UNINDENT
.SS Since
.sp
4.2
.SS \fBBlockExportOptions\fP (Object)
.sp
Describes a block export, i.e. how single node should be exported on an
external interface.
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
A unique identifier for the block export (across all export types)
.TP
.B \fBnode\-name\fP: \fBstring\fP
The node name of the block node to be exported (since: 5.2)
.TP
.B \fBwritable\fP: \fBboolean\fP (optional)
True if clients should be able to write to the export
(default false)
.TP
.B \fBwritethrough\fP: \fBboolean\fP (optional)
If true, caches are flushed after every write request to the
export before completion is signalled. (since: 5.2;
default: false)
.TP
.B \fBiothread\fP: \fBstring\fP (optional)
The name of the iothread object where the export will run. The
default is to use the thread currently associated with the
block node. (since: 5.2)
.TP
.B \fBfixed\-iothread\fP: \fBboolean\fP (optional)
True prevents the block node from being moved to another
thread while the export is active. If true and \fBiothread\fP is
given, export creation fails if the block node cannot be
moved to the iothread. The default is false. (since: 5.2)
.TP
.B \fBtype\fP: \fBBlockExportType\fP
Not documented
.TP
.B The members of \fBBlockExportOptionsNbd\fP when \fBtype\fP is \fB"nbd"\fP
.TP
The members of \fBBlockExportOptionsVhostUserBlk\fP when \fBtype\fP is \fB"vhost\-user\-blk"\fP (\fBIf: \fP\fBCONFIG_VHOST_USER_BLK_SERVER\fP)
.TP
The members of \fBBlockExportOptionsFuse\fP when \fBtype\fP is \fB"fuse"\fP (\fBIf: \fP\fBCONFIG_FUSE\fP)
.TP
The members of \fBBlockExportOptionsVduseBlk\fP when \fBtype\fP is \fB"vduse\-blk"\fP (\fBIf: \fP\fBCONFIG_VDUSE_BLK_EXPORT\fP)
.UNINDENT
.SS Since
.sp
4.2
.SS \fBblock\-export\-add\fP (Command)
.sp
Creates a new block export.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBBlockExportOptions\fP
.UNINDENT
.SS Since
.sp
5.2
.SS \fBblock\-export\-del\fP (Command)
.sp
Request to remove a block export. This drops the user\(aqs reference to the
export, but the export may still stay around after this command returns until
the shutdown of the export has completed.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
Block export id.
.TP
.B \fBmode\fP: \fBBlockExportRemoveMode\fP (optional)
Mode of command operation. See \fBBlockExportRemoveMode\fP description.
Default is \(aqsafe\(aq.
.UNINDENT
.SS Returns
.sp
Error if the export is not found or \fBmode\fP is \(aqsafe\(aq and the export
is still in use (e.g. by existing client connections)
.SS Since
.sp
5.2
.SS \fBBLOCK_EXPORT_DELETED\fP (Event)
.sp
Emitted when a block export is removed and its id can be reused.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
Block export id.
.UNINDENT
.SS Since
.sp
5.2
.SS \fBBlockExportInfo\fP (Object)
.sp
Information about a single block export.
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The unique identifier for the block export
.TP
.B \fBtype\fP: \fBBlockExportType\fP
The block export type
.TP
.B \fBnode\-name\fP: \fBstring\fP
The node name of the block node that is exported
.TP
.B \fBshutting\-down\fP: \fBboolean\fP
True if the export is shutting down (e.g. after a
block\-export\-del command, but before the shutdown has
completed)
.UNINDENT
.SS Since
.sp
5.2
.SS \fBquery\-block\-exports\fP (Command)
.SS Returns
.sp
A list of BlockExportInfo describing all block exports
.SS Since
.sp
5.2
.SH CHARACTER DEVICES
.SS \fBChardevInfo\fP (Object)
.sp
Information about a character device.
.SS Members
.INDENT 0.0
.TP
.B \fBlabel\fP: \fBstring\fP
the label of the character device
.TP
.B \fBfilename\fP: \fBstring\fP
the filename of the character device
.TP
.B \fBfrontend\-open\fP: \fBboolean\fP
shows whether the frontend device attached to this backend
(eg. with the chardev=... option) is in open or closed state
(since 2.1)
.UNINDENT
.SS Notes
.sp
\fBfilename\fP is encoded using the QEMU command line character device
encoding.  See the QEMU man page for details.
.SS Since
.sp
0.14
.SS \fBquery\-chardev\fP (Command)
.sp
Returns information about current character devices.
.SS Returns
.sp
a list of \fBChardevInfo\fP
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-chardev" }
<\- {
      "return": [
         {
            "label": "charchannel0",
            "filename": "unix:/var/lib/libvirt/qemu/seabios.rhel6.agent,server=on",
            "frontend\-open": false
         },
         {
            "label": "charmonitor",
            "filename": "unix:/var/lib/libvirt/qemu/seabios.rhel6.monitor,server=on",
            "frontend\-open": true
         },
         {
            "label": "charserial0",
            "filename": "pty:/dev/pts/2",
            "frontend\-open": true
         }
      ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBChardevBackendInfo\fP (Object)
.sp
Information about a character device backend
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
The backend name
.UNINDENT
.SS Since
.sp
2.0
.SS \fBquery\-chardev\-backends\fP (Command)
.sp
Returns information about character device backends.
.SS Returns
.sp
a list of \fBChardevBackendInfo\fP
.SS Since
.sp
2.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-chardev\-backends" }
<\- {
      "return":[
         {
            "name":"udp"
         },
         {
            "name":"tcp"
         },
         {
            "name":"unix"
         },
         {
            "name":"spiceport"
         }
      ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDataFormat\fP (Enum)
.sp
An enumeration of data format.
.SS Values
.INDENT 0.0
.TP
.B \fButf8\fP
Data is a UTF\-8 string (RFC 3629)
.TP
.B \fBbase64\fP
Data is Base64 encoded binary (RFC 3548)
.UNINDENT
.SS Since
.sp
1.4
.SS \fBringbuf\-write\fP (Command)
.sp
Write to a ring buffer character device.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
the ring buffer character device name
.TP
.B \fBdata\fP: \fBstring\fP
data to write
.TP
.B \fBformat\fP: \fBDataFormat\fP (optional)
data encoding (default \(aqutf8\(aq).
.INDENT 7.0
.IP \(bu 2
base64: data must be base64 encoded text.  Its binary
decoding gets written.
.IP \(bu 2
utf8: data\(aqs UTF\-8 encoding is written
.IP \(bu 2
data itself is always Unicode regardless of format, like
any other string.
.UNINDENT
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
1.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "ringbuf\-write",
     "arguments": { "device": "foo",
                    "data": "abcdefgh",
                    "format": "utf8" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBringbuf\-read\fP (Command)
.sp
Read from a ring buffer character device.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
the ring buffer character device name
.TP
.B \fBsize\fP: \fBint\fP
how many bytes to read at most
.TP
.B \fBformat\fP: \fBDataFormat\fP (optional)
data encoding (default \(aqutf8\(aq).
.INDENT 7.0
.IP \(bu 2
base64: the data read is returned in base64 encoding.
.IP \(bu 2
utf8: the data read is interpreted as UTF\-8.
Bug: can screw up when the buffer contains invalid UTF\-8
sequences, NUL characters, after the ring buffer lost
data, and when reading stops because the size limit is
reached.
.IP \(bu 2
The return value is always Unicode regardless of format,
like any other string.
.UNINDENT
.UNINDENT
.SS Returns
.sp
data read from the device
.SS Since
.sp
1.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "ringbuf\-read",
     "arguments": { "device": "foo",
                    "size": 1000,
                    "format": "utf8" } }
<\- { "return": "abcdefgh" }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBChardevCommon\fP (Object)
.sp
Configuration shared across all chardev backends
.SS Members
.INDENT 0.0
.TP
.B \fBlogfile\fP: \fBstring\fP (optional)
The name of a logfile to save output
.TP
.B \fBlogappend\fP: \fBboolean\fP (optional)
true to append instead of truncate
(default to false to truncate)
.UNINDENT
.SS Since
.sp
2.6
.SS \fBChardevFile\fP (Object)
.sp
Configuration info for file chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBstring\fP (optional)
The name of the input file
.TP
.B \fBout\fP: \fBstring\fP
The name of the output file
.TP
.B \fBappend\fP: \fBboolean\fP (optional)
Open the file in append mode (default false to
truncate) (Since 2.6)
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.4
.SS \fBChardevHostdev\fP (Object)
.sp
Configuration info for device and pipe chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
The name of the special file for the device,
i.e. /dev/ttyS0 on Unix or COM1: on Windows
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.4
.SS \fBChardevSocket\fP (Object)
.sp
Configuration info for (stream) socket chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBaddr\fP: \fBSocketAddressLegacy\fP
socket address to listen on (server=true)
or connect to (server=false)
.TP
.B \fBtls\-creds\fP: \fBstring\fP (optional)
the ID of the TLS credentials object (since 2.6)
.TP
.B \fBtls\-authz\fP: \fBstring\fP (optional)
the ID of the QAuthZ authorization object against which
the client\(aqs x509 distinguished name will be validated. This
object is only resolved at time of use, so can be deleted
and recreated on the fly while the chardev server is active.
If missing, it will default to denying access (since 4.0)
.TP
.B \fBserver\fP: \fBboolean\fP (optional)
create server socket (default: true)
.TP
.B \fBwait\fP: \fBboolean\fP (optional)
wait for incoming connection on server
sockets (default: false).
Silently ignored with server: false.  This use is deprecated.
.TP
.B \fBnodelay\fP: \fBboolean\fP (optional)
set TCP_NODELAY socket option (default: false)
.TP
.B \fBtelnet\fP: \fBboolean\fP (optional)
enable telnet protocol on server
sockets (default: false)
.TP
.B \fBtn3270\fP: \fBboolean\fP (optional)
enable tn3270 protocol on server
sockets (default: false) (Since: 2.10)
.TP
.B \fBwebsocket\fP: \fBboolean\fP (optional)
enable websocket protocol on server
sockets (default: false) (Since: 3.1)
.TP
.B \fBreconnect\fP: \fBint\fP (optional)
For a client socket, if a socket is disconnected,
then attempt a reconnect after the given number of seconds.
Setting this to zero disables this function. (default: 0)
(Since: 2.2)
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.4
.SS \fBChardevUdp\fP (Object)
.sp
Configuration info for datagram socket chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBremote\fP: \fBSocketAddressLegacy\fP
remote address
.TP
.B \fBlocal\fP: \fBSocketAddressLegacy\fP (optional)
local address
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevMux\fP (Object)
.sp
Configuration info for mux chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBchardev\fP: \fBstring\fP
name of the base chardev.
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevStdio\fP (Object)
.sp
Configuration info for stdio chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBsignal\fP: \fBboolean\fP (optional)
Allow signals (such as SIGINT triggered by ^C)
be delivered to qemu.  Default: true.
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevSpiceChannel\fP (Object)
.sp
Configuration info for spice vm channel chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBstring\fP
kind of channel (for example vdagent).
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBChardevSpicePort\fP (Object)
.sp
Configuration info for spice port chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBfqdn\fP: \fBstring\fP
name of the channel (see docs/spice\-port\-fqdn.txt)
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBChardevDBus\fP (Object)
.sp
Configuration info for DBus chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
name of the channel (following docs/spice\-port\-fqdn.txt)
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
7.0
.SS If
.sp
\fBCONFIG_DBUS_DISPLAY\fP
.SS \fBChardevVC\fP (Object)
.sp
Configuration info for virtual console chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBwidth\fP: \fBint\fP (optional)
console width, in pixels
.TP
.B \fBheight\fP: \fBint\fP (optional)
console height, in pixels
.TP
.B \fBcols\fP: \fBint\fP (optional)
console width, in chars
.TP
.B \fBrows\fP: \fBint\fP (optional)
console height, in chars
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevRingbuf\fP (Object)
.sp
Configuration info for ring buffer chardevs.
.SS Members
.INDENT 0.0
.TP
.B \fBsize\fP: \fBint\fP (optional)
ring buffer size, must be power of two, default is 65536
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevQemuVDAgent\fP (Object)
.sp
Configuration info for qemu vdagent implementation.
.SS Members
.INDENT 0.0
.TP
.B \fBmouse\fP: \fBboolean\fP (optional)
enable/disable mouse, default is enabled.
.TP
.B \fBclipboard\fP: \fBboolean\fP (optional)
enable/disable clipboard, default is disabled.
.TP
.B The members of \fBChardevCommon\fP
.UNINDENT
.SS Since
.sp
6.1
.SS If
.sp
\fBCONFIG_SPICE_PROTOCOL\fP
.SS \fBChardevBackendKind\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBpipe\fP
Since 1.5
.TP
.B \fBudp\fP
Since 1.5
.TP
.B \fBmux\fP
Since 1.5
.TP
.B \fBmsmouse\fP
Since 1.5
.TP
.B \fBwctablet\fP
Since 2.9
.TP
.B \fBbraille\fP
Since 1.5
.TP
.B \fBtestdev\fP
Since 2.2
.TP
.B \fBstdio\fP
Since 1.5
.TP
.B \fBconsole\fP
Since 1.5
.TP
\fBspicevmc\fP (\fBIf: \fP\fBCONFIG_SPICE\fP)
Since 1.5
.TP
\fBspiceport\fP (\fBIf: \fP\fBCONFIG_SPICE\fP)
Since 1.5
.TP
\fBqemu\-vdagent\fP (\fBIf: \fP\fBCONFIG_SPICE_PROTOCOL\fP)
Since 6.1
.TP
\fBdbus\fP (\fBIf: \fP\fBCONFIG_DBUS_DISPLAY\fP)
Since 7.0
.TP
.B \fBvc\fP
v1.5
.TP
.B \fBringbuf\fP
Since 1.6
.TP
.B \fBmemory\fP
Since 1.5
.TP
.B \fBfile\fP
Not documented
.TP
.B \fBserial\fP
Not documented
.TP
.B \fBparallel\fP
Not documented
.TP
.B \fBsocket\fP
Not documented
.TP
.B \fBpty\fP
Not documented
.TP
.B \fBnull\fP
Not documented
.UNINDENT
.SS Since
.sp
1.4
.SS \fBChardevFileWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevFile\fP
Not documented
.UNINDENT
.SS Since
.sp
1.4
.SS \fBChardevHostdevWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevHostdev\fP
Not documented
.UNINDENT
.SS Since
.sp
1.4
.SS \fBChardevSocketWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevSocket\fP
Not documented
.UNINDENT
.SS Since
.sp
1.4
.SS \fBChardevUdpWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevUdp\fP
Not documented
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevCommonWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevCommon\fP
Not documented
.UNINDENT
.SS Since
.sp
2.6
.SS \fBChardevMuxWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevMux\fP
Not documented
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevStdioWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevStdio\fP
Not documented
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevSpiceChannelWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevSpiceChannel\fP
Not documented
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBChardevSpicePortWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevSpicePort\fP
Not documented
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBChardevQemuVDAgentWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevQemuVDAgent\fP
Not documented
.UNINDENT
.SS Since
.sp
6.1
.SS If
.sp
\fBCONFIG_SPICE_PROTOCOL\fP
.SS \fBChardevDBusWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevDBus\fP
Not documented
.UNINDENT
.SS Since
.sp
7.0
.SS If
.sp
\fBCONFIG_DBUS_DISPLAY\fP
.SS \fBChardevVCWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevVC\fP
Not documented
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevRingbufWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBChardevRingbuf\fP
Not documented
.UNINDENT
.SS Since
.sp
1.5
.SS \fBChardevBackend\fP (Object)
.sp
Configuration info for the new chardev backend.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBChardevBackendKind\fP
Not documented
.TP
.B The members of \fBChardevFileWrapper\fP when \fBtype\fP is \fB"file"\fP
.TP
.B The members of \fBChardevHostdevWrapper\fP when \fBtype\fP is \fB"serial"\fP
.TP
.B The members of \fBChardevHostdevWrapper\fP when \fBtype\fP is \fB"parallel"\fP
.TP
.B The members of \fBChardevHostdevWrapper\fP when \fBtype\fP is \fB"pipe"\fP
.TP
.B The members of \fBChardevSocketWrapper\fP when \fBtype\fP is \fB"socket"\fP
.TP
.B The members of \fBChardevUdpWrapper\fP when \fBtype\fP is \fB"udp"\fP
.TP
.B The members of \fBChardevCommonWrapper\fP when \fBtype\fP is \fB"pty"\fP
.TP
.B The members of \fBChardevCommonWrapper\fP when \fBtype\fP is \fB"null"\fP
.TP
.B The members of \fBChardevMuxWrapper\fP when \fBtype\fP is \fB"mux"\fP
.TP
.B The members of \fBChardevCommonWrapper\fP when \fBtype\fP is \fB"msmouse"\fP
.TP
.B The members of \fBChardevCommonWrapper\fP when \fBtype\fP is \fB"wctablet"\fP
.TP
.B The members of \fBChardevCommonWrapper\fP when \fBtype\fP is \fB"braille"\fP
.TP
.B The members of \fBChardevCommonWrapper\fP when \fBtype\fP is \fB"testdev"\fP
.TP
.B The members of \fBChardevStdioWrapper\fP when \fBtype\fP is \fB"stdio"\fP
.TP
.B The members of \fBChardevCommonWrapper\fP when \fBtype\fP is \fB"console"\fP
.TP
The members of \fBChardevSpiceChannelWrapper\fP when \fBtype\fP is \fB"spicevmc"\fP (\fBIf: \fP\fBCONFIG_SPICE\fP)
.TP
The members of \fBChardevSpicePortWrapper\fP when \fBtype\fP is \fB"spiceport"\fP (\fBIf: \fP\fBCONFIG_SPICE\fP)
.TP
The members of \fBChardevQemuVDAgentWrapper\fP when \fBtype\fP is \fB"qemu\-vdagent"\fP (\fBIf: \fP\fBCONFIG_SPICE_PROTOCOL\fP)
.TP
The members of \fBChardevDBusWrapper\fP when \fBtype\fP is \fB"dbus"\fP (\fBIf: \fP\fBCONFIG_DBUS_DISPLAY\fP)
.TP
.B The members of \fBChardevVCWrapper\fP when \fBtype\fP is \fB"vc"\fP
.TP
.B The members of \fBChardevRingbufWrapper\fP when \fBtype\fP is \fB"ringbuf"\fP
.TP
.B The members of \fBChardevRingbufWrapper\fP when \fBtype\fP is \fB"memory"\fP
.UNINDENT
.SS Since
.sp
1.4
.SS \fBChardevReturn\fP (Object)
.sp
Return info about the chardev backend just created.
.SS Members
.INDENT 0.0
.TP
.B \fBpty\fP: \fBstring\fP (optional)
name of the slave pseudoterminal device, present if
and only if a chardev of type \(aqpty\(aq was created
.UNINDENT
.SS Since
.sp
1.4
.SS \fBchardev\-add\fP (Command)
.sp
Add a character device backend
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the chardev\(aqs ID, must be unique
.TP
.B \fBbackend\fP: \fBChardevBackend\fP
backend type and parameters
.UNINDENT
.SS Returns
.sp
ChardevReturn.
.SS Since
.sp
1.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute" : "chardev\-add",
     "arguments" : { "id" : "foo",
                     "backend" : { "type" : "null", "data" : {} } } }
<\- { "return": {} }

\-> { "execute" : "chardev\-add",
     "arguments" : { "id" : "bar",
                     "backend" : { "type" : "file",
                                   "data" : { "out" : "/tmp/bar.log" } } } }
<\- { "return": {} }

\-> { "execute" : "chardev\-add",
     "arguments" : { "id" : "baz",
                     "backend" : { "type" : "pty", "data" : {} } } }
<\- { "return": { "pty" : "/dev/pty/42" } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBchardev\-change\fP (Command)
.sp
Change a character device backend
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the chardev\(aqs ID, must exist
.TP
.B \fBbackend\fP: \fBChardevBackend\fP
new backend type and parameters
.UNINDENT
.SS Returns
.sp
ChardevReturn.
.SS Since
.sp
2.10
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute" : "chardev\-change",
     "arguments" : { "id" : "baz",
                     "backend" : { "type" : "pty", "data" : {} } } }
<\- { "return": { "pty" : "/dev/pty/42" } }

\-> {"execute" : "chardev\-change",
    "arguments" : {
        "id" : "charchannel2",
        "backend" : {
            "type" : "socket",
            "data" : {
                "addr" : {
                    "type" : "unix" ,
                    "data" : {
                        "path" : "/tmp/charchannel2.socket"
                    }
                 },
                 "server" : true,
                 "wait" : false }}}}
<\- {"return": {}}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBchardev\-remove\fP (Command)
.sp
Remove a character device backend
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the chardev\(aqs ID, must exist and not be in use
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
1.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "chardev\-remove", "arguments": { "id" : "foo" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBchardev\-send\-break\fP (Command)
.sp
Send a break to a character device
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the chardev\(aqs ID, must exist
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
2.10
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "chardev\-send\-break", "arguments": { "id" : "foo" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBVSERPORT_CHANGE\fP (Event)
.sp
Emitted when the guest opens or closes a virtio\-serial port.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
device identifier of the virtio\-serial port
.TP
.B \fBopen\fP: \fBboolean\fP
true if the guest has opened the virtio\-serial port
.UNINDENT
.SS Note
.sp
This event is rate\-limited.
.SS Since
.sp
2.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "VSERPORT_CHANGE",
     "data": { "id": "channel0", "open": true },
     "timestamp": { "seconds": 1401385907, "microseconds": 422329 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DUMP GUEST MEMORY
.SS \fBDumpGuestMemoryFormat\fP (Enum)
.sp
An enumeration of guest\-memory\-dump\(aqs format.
.SS Values
.INDENT 0.0
.TP
.B \fBelf\fP
elf format
.TP
.B \fBkdump\-zlib\fP
kdump\-compressed format with zlib\-compressed
.TP
.B \fBkdump\-lzo\fP
kdump\-compressed format with lzo\-compressed
.TP
.B \fBkdump\-snappy\fP
kdump\-compressed format with snappy\-compressed
.TP
.B \fBwin\-dmp\fP
Windows full crashdump format,
can be used instead of ELF converting (since 2.13)
.UNINDENT
.SS Since
.sp
2.0
.SS \fBdump\-guest\-memory\fP (Command)
.sp
Dump guest\(aqs memory to vmcore. It is a synchronous operation that can take
very long depending on the amount of guest memory.
.SS Arguments
.INDENT 0.0
.TP
.B \fBpaging\fP: \fBboolean\fP
if true, do paging to get guest\(aqs memory mapping. This allows
using gdb to process the core file.
.sp
IMPORTANT: this option can make QEMU allocate several gigabytes
of RAM. This can happen for a large guest, or a
malicious guest pretending to be large.
.sp
Also, paging=true has the following limitations:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
The guest may be in a catastrophic state or can have corrupted
memory, which cannot be trusted
.IP 2. 3
The guest can be in real\-mode even if paging is enabled. For
example, the guest uses ACPI to sleep, and ACPI sleep state
goes in real\-mode
.IP 3. 3
Currently only supported on i386 and x86_64.
.UNINDENT
.UNINDENT
.UNINDENT
.TP
.B \fBprotocol\fP: \fBstring\fP
the filename or file descriptor of the vmcore. The supported
protocols are:
.INDENT 7.0
.IP 1. 3
file: the protocol starts with "file:", and the following
string is the file\(aqs path.
.IP 2. 3
fd: the protocol starts with "fd:", and the following string
is the fd\(aqs name.
.UNINDENT
.TP
.B \fBdetach\fP: \fBboolean\fP (optional)
if true, QMP will return immediately rather than
waiting for the dump to finish. The user can track progress
using "query\-dump". (since 2.6).
.TP
.B \fBbegin\fP: \fBint\fP (optional)
if specified, the starting physical address.
.TP
.B \fBlength\fP: \fBint\fP (optional)
if specified, the memory size, in bytes. If you don\(aqt
want to dump all guest\(aqs memory, please specify the start \fBbegin\fP
and \fBlength\fP
.TP
.B \fBformat\fP: \fBDumpGuestMemoryFormat\fP (optional)
if specified, the format of guest memory dump. But non\-elf
format is conflict with paging and filter, ie. \fBpaging\fP, \fBbegin\fP and
\fBlength\fP is not allowed to be specified with non\-elf \fBformat\fP at the
same time (since 2.0)
.UNINDENT
.SS Note
.sp
All boolean arguments default to false
.SS Returns
.sp
nothing on success
.SS Since
.sp
1.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "dump\-guest\-memory",
     "arguments": { "paging": false, "protocol": "fd:dump" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDumpStatus\fP (Enum)
.sp
Describe the status of a long\-running background guest memory dump.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
no dump\-guest\-memory has started yet.
.TP
.B \fBactive\fP
there is one dump running in background.
.TP
.B \fBcompleted\fP
the last dump has finished successfully.
.TP
.B \fBfailed\fP
the last dump has failed.
.UNINDENT
.SS Since
.sp
2.6
.SS \fBDumpQueryResult\fP (Object)
.sp
The result format for \(aqquery\-dump\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBstatus\fP: \fBDumpStatus\fP
enum of \fBDumpStatus\fP, which shows current dump status
.TP
.B \fBcompleted\fP: \fBint\fP
bytes written in latest dump (uncompressed)
.TP
.B \fBtotal\fP: \fBint\fP
total bytes to be written in latest dump (uncompressed)
.UNINDENT
.SS Since
.sp
2.6
.SS \fBquery\-dump\fP (Command)
.sp
Query latest dump status.
.SS Returns
.sp
A \fBDumpStatus\fP object showing the dump status.
.SS Since
.sp
2.6
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-dump" }
<\- { "return": { "status": "active", "completed": 1024000,
                 "total": 2048000 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDUMP_COMPLETED\fP (Event)
.sp
Emitted when background dump has completed
.SS Arguments
.INDENT 0.0
.TP
.B \fBresult\fP: \fBDumpQueryResult\fP
final dump status
.TP
.B \fBerror\fP: \fBstring\fP (optional)
human\-readable error string that provides
hint on why dump failed. Only presents on failure. The
user should not try to interpret the error string.
.UNINDENT
.SS Since
.sp
2.6
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "DUMP_COMPLETED",
     "data": { "result": { "total": 1090650112, "status": "completed",
                           "completed": 1090650112 } },
     "timestamp": { "seconds": 1648244171, "microseconds": 950316 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDumpGuestMemoryCapability\fP (Object)
.sp
A list of the available formats for dump\-guest\-memory
.SS Members
.INDENT 0.0
.TP
.B \fBformats\fP: \fBarray of DumpGuestMemoryFormat\fP
Not documented
.UNINDENT
.SS Since
.sp
2.0
.SS \fBquery\-dump\-guest\-memory\-capability\fP (Command)
.sp
Returns the available formats for dump\-guest\-memory
.SS Returns
.sp
A \fBDumpGuestMemoryCapability\fP object listing available formats for
dump\-guest\-memory
.SS Since
.sp
2.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-dump\-guest\-memory\-capability" }
<\- { "return": { "formats":
                 ["elf", "kdump\-zlib", "kdump\-lzo", "kdump\-snappy"] } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH NET DEVICES
.SS \fBset_link\fP (Command)
.sp
Sets the link status of a virtual network adapter.
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the device name of the virtual network adapter
.TP
.B \fBup\fP: \fBboolean\fP
true to set the link status to be up
.UNINDENT
.SS Returns
.sp
Nothing on success
If \fBname\fP is not a valid network device, DeviceNotFound
.SS Since
.sp
0.14
.SS Notes
.sp
Not all network adapters support setting link status.  This command
will succeed even if the network adapter does not support link status
notification.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "set_link",
     "arguments": { "name": "e1000.0", "up": false } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBnetdev_add\fP (Command)
.sp
Add a network backend.
.sp
Additional arguments depend on the type.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBNetdev\fP
.UNINDENT
.SS Since
.sp
0.14
.SS Returns
.sp
Nothing on success
If \fBtype\fP is not a valid network backend, DeviceNotFound
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "netdev_add",
     "arguments": { "type": "user", "id": "netdev1",
                    "dnssearch": [ { "str": "example.org" } ] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBnetdev_del\fP (Command)
.sp
Remove a network backend.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the name of the network backend to remove
.UNINDENT
.SS Returns
.sp
Nothing on success
If \fBid\fP is not a valid network backend, DeviceNotFound
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "netdev_del", "arguments": { "id": "netdev1" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBNetLegacyNicOptions\fP (Object)
.sp
Create a new Network Interface Card.
.SS Members
.INDENT 0.0
.TP
.B \fBnetdev\fP: \fBstring\fP (optional)
id of \-netdev to connect to
.TP
.B \fBmacaddr\fP: \fBstring\fP (optional)
MAC address
.TP
.B \fBmodel\fP: \fBstring\fP (optional)
device model (e1000, rtl8139, virtio etc.)
.TP
.B \fBaddr\fP: \fBstring\fP (optional)
PCI device address
.TP
.B \fBvectors\fP: \fBint\fP (optional)
number of MSI\-x vectors, 0 to disable MSI\-X
.UNINDENT
.SS Since
.sp
1.2
.SS \fBNetdevUserOptions\fP (Object)
.sp
Use the user mode network stack which requires no administrator privilege to
run.
.SS Members
.INDENT 0.0
.TP
.B \fBhostname\fP: \fBstring\fP (optional)
client hostname reported by the builtin DHCP server
.TP
.B \fBrestrict\fP: \fBboolean\fP (optional)
isolate the guest from the host
.TP
.B \fBipv4\fP: \fBboolean\fP (optional)
whether to support IPv4, default true for enabled
(since 2.6)
.TP
.B \fBipv6\fP: \fBboolean\fP (optional)
whether to support IPv6, default true for enabled
(since 2.6)
.TP
.B \fBip\fP: \fBstring\fP (optional)
legacy parameter, use net= instead
.TP
.B \fBnet\fP: \fBstring\fP (optional)
IP network address that the guest will see, in the
form addr[/netmask] The netmask is optional, and can be
either in the form a.b.c.d or as a number of valid top\-most
bits. Default is 10.0.2.0/24.
.TP
.B \fBhost\fP: \fBstring\fP (optional)
guest\-visible address of the host
.TP
.B \fBtftp\fP: \fBstring\fP (optional)
root directory of the built\-in TFTP server
.TP
.B \fBbootfile\fP: \fBstring\fP (optional)
BOOTP filename, for use with tftp=
.TP
.B \fBdhcpstart\fP: \fBstring\fP (optional)
the first of the 16 IPs the built\-in DHCP server can
assign
.TP
.B \fBdns\fP: \fBstring\fP (optional)
guest\-visible address of the virtual nameserver
.TP
.B \fBdnssearch\fP: \fBarray of String\fP (optional)
list of DNS suffixes to search, passed as DHCP option
to the guest
.TP
.B \fBdomainname\fP: \fBstring\fP (optional)
guest\-visible domain name of the virtual nameserver
(since 3.0)
.TP
.B \fBipv6\-prefix\fP: \fBstring\fP (optional)
IPv6 network prefix (default is fec0::) (since
2.6). The network prefix is given in the usual
hexadecimal IPv6 address notation.
.TP
.B \fBipv6\-prefixlen\fP: \fBint\fP (optional)
IPv6 network prefix length (default is 64)
(since 2.6)
.TP
.B \fBipv6\-host\fP: \fBstring\fP (optional)
guest\-visible IPv6 address of the host (since 2.6)
.TP
.B \fBipv6\-dns\fP: \fBstring\fP (optional)
guest\-visible IPv6 address of the virtual
nameserver (since 2.6)
.TP
.B \fBsmb\fP: \fBstring\fP (optional)
root directory of the built\-in SMB server
.TP
.B \fBsmbserver\fP: \fBstring\fP (optional)
IP address of the built\-in SMB server
.TP
.B \fBhostfwd\fP: \fBarray of String\fP (optional)
redirect incoming TCP or UDP host connections to guest
endpoints
.TP
.B \fBguestfwd\fP: \fBarray of String\fP (optional)
forward guest TCP connections
.TP
.B \fBtftp\-server\-name\fP: \fBstring\fP (optional)
RFC2132 "TFTP server name" string (Since 3.1)
.UNINDENT
.SS Since
.sp
1.2
.SS \fBNetdevTapOptions\fP (Object)
.sp
Used to configure a host TAP network interface backend.
.SS Members
.INDENT 0.0
.TP
.B \fBifname\fP: \fBstring\fP (optional)
interface name
.TP
.B \fBfd\fP: \fBstring\fP (optional)
file descriptor of an already opened tap
.TP
.B \fBfds\fP: \fBstring\fP (optional)
multiple file descriptors of already opened multiqueue capable
tap
.TP
.B \fBscript\fP: \fBstring\fP (optional)
script to initialize the interface
.TP
.B \fBdownscript\fP: \fBstring\fP (optional)
script to shut down the interface
.TP
.B \fBbr\fP: \fBstring\fP (optional)
bridge name (since 2.8)
.TP
.B \fBhelper\fP: \fBstring\fP (optional)
command to execute to configure bridge
.TP
.B \fBsndbuf\fP: \fBint\fP (optional)
send buffer limit. Understands [TGMKkb] suffixes.
.TP
.B \fBvnet_hdr\fP: \fBboolean\fP (optional)
enable the IFF_VNET_HDR flag on the tap interface
.TP
.B \fBvhost\fP: \fBboolean\fP (optional)
enable vhost\-net network accelerator
.TP
.B \fBvhostfd\fP: \fBstring\fP (optional)
file descriptor of an already opened vhost net device
.TP
.B \fBvhostfds\fP: \fBstring\fP (optional)
file descriptors of multiple already opened vhost net
devices
.TP
.B \fBvhostforce\fP: \fBboolean\fP (optional)
vhost on for non\-MSIX virtio guests
.TP
.B \fBqueues\fP: \fBint\fP (optional)
number of queues to be created for multiqueue capable tap
.TP
.B \fBpoll\-us\fP: \fBint\fP (optional)
maximum number of microseconds that could
be spent on busy polling for tap (since 2.7)
.UNINDENT
.SS Since
.sp
1.2
.SS \fBNetdevSocketOptions\fP (Object)
.sp
Socket netdevs are used to establish a network connection to another
QEMU virtual machine via a TCP socket.
.SS Members
.INDENT 0.0
.TP
.B \fBfd\fP: \fBstring\fP (optional)
file descriptor of an already opened socket
.TP
.B \fBlisten\fP: \fBstring\fP (optional)
port number, and optional hostname, to listen on
.TP
.B \fBconnect\fP: \fBstring\fP (optional)
port number, and optional hostname, to connect to
.TP
.B \fBmcast\fP: \fBstring\fP (optional)
UDP multicast address and port number
.TP
.B \fBlocaladdr\fP: \fBstring\fP (optional)
source address and port for multicast and udp packets
.TP
.B \fBudp\fP: \fBstring\fP (optional)
UDP unicast address and port number
.UNINDENT
.SS Since
.sp
1.2
.SS \fBNetdevL2TPv3Options\fP (Object)
.sp
Configure an Ethernet over L2TPv3 tunnel.
.SS Members
.INDENT 0.0
.TP
.B \fBsrc\fP: \fBstring\fP
source address
.TP
.B \fBdst\fP: \fBstring\fP
destination address
.TP
.B \fBsrcport\fP: \fBstring\fP (optional)
source port \- mandatory for udp, optional for ip
.TP
.B \fBdstport\fP: \fBstring\fP (optional)
destination port \- mandatory for udp, optional for ip
.TP
.B \fBipv6\fP: \fBboolean\fP (optional)
force the use of ipv6
.TP
.B \fBudp\fP: \fBboolean\fP (optional)
use the udp version of l2tpv3 encapsulation
.TP
.B \fBcookie64\fP: \fBboolean\fP (optional)
use 64 bit cookies
.TP
.B \fBcounter\fP: \fBboolean\fP (optional)
have sequence counter
.TP
.B \fBpincounter\fP: \fBboolean\fP (optional)
pin sequence counter to zero \-
workaround for buggy implementations or
networks with packet reorder
.TP
.B \fBtxcookie\fP: \fBint\fP (optional)
32 or 64 bit transmit cookie
.TP
.B \fBrxcookie\fP: \fBint\fP (optional)
32 or 64 bit receive cookie
.TP
.B \fBtxsession\fP: \fBint\fP
32 bit transmit session
.TP
.B \fBrxsession\fP: \fBint\fP (optional)
32 bit receive session \- if not specified
set to the same value as transmit
.TP
.B \fBoffset\fP: \fBint\fP (optional)
additional offset \- allows the insertion of
additional application\-specific data before the packet payload
.UNINDENT
.SS Since
.sp
2.1
.SS \fBNetdevVdeOptions\fP (Object)
.sp
Connect to a vde switch running on the host.
.SS Members
.INDENT 0.0
.TP
.B \fBsock\fP: \fBstring\fP (optional)
socket path
.TP
.B \fBport\fP: \fBint\fP (optional)
port number
.TP
.B \fBgroup\fP: \fBstring\fP (optional)
group owner of socket
.TP
.B \fBmode\fP: \fBint\fP (optional)
permissions for socket
.UNINDENT
.SS Since
.sp
1.2
.SS \fBNetdevBridgeOptions\fP (Object)
.sp
Connect a host TAP network interface to a host bridge device.
.SS Members
.INDENT 0.0
.TP
.B \fBbr\fP: \fBstring\fP (optional)
bridge name
.TP
.B \fBhelper\fP: \fBstring\fP (optional)
command to execute to configure bridge
.UNINDENT
.SS Since
.sp
1.2
.SS \fBNetdevHubPortOptions\fP (Object)
.sp
Connect two or more net clients through a software hub.
.SS Members
.INDENT 0.0
.TP
.B \fBhubid\fP: \fBint\fP
hub identifier number
.TP
.B \fBnetdev\fP: \fBstring\fP (optional)
used to connect hub to a netdev instead of a device (since 2.12)
.UNINDENT
.SS Since
.sp
1.2
.SS \fBNetdevNetmapOptions\fP (Object)
.sp
Connect a client to a netmap\-enabled NIC or to a VALE switch port
.SS Members
.INDENT 0.0
.TP
.B \fBifname\fP: \fBstring\fP
Either the name of an existing network interface supported by
netmap, or the name of a VALE port (created on the fly).
A VALE port name is in the form \(aqvaleXXX:YYY\(aq, where XXX and
YYY are non\-negative integers. XXX identifies a switch and
YYY identifies a port of the switch. VALE ports having the
same XXX are therefore connected to the same switch.
.TP
.B \fBdevname\fP: \fBstring\fP (optional)
path of the netmap device (default: \(aq/dev/netmap\(aq).
.UNINDENT
.SS Since
.sp
2.0
.SS \fBNetdevVhostUserOptions\fP (Object)
.sp
Vhost\-user network backend
.SS Members
.INDENT 0.0
.TP
.B \fBchardev\fP: \fBstring\fP
name of a unix socket chardev
.TP
.B \fBvhostforce\fP: \fBboolean\fP (optional)
vhost on for non\-MSIX virtio guests (default: false).
.TP
.B \fBqueues\fP: \fBint\fP (optional)
number of queues to be created for multiqueue vhost\-user
(default: 1) (Since 2.5)
.UNINDENT
.SS Since
.sp
2.1
.SS \fBNetdevVhostVDPAOptions\fP (Object)
.sp
Vhost\-vdpa network backend
.sp
vDPA device is a device that uses a datapath which complies with the virtio
specifications with a vendor specific control path.
.SS Members
.INDENT 0.0
.TP
.B \fBvhostdev\fP: \fBstring\fP (optional)
path of vhost\-vdpa device
(default:\(aq/dev/vhost\-vdpa\-0\(aq)
.TP
.B \fBvhostfd\fP: \fBstring\fP (optional)
file descriptor of an already opened vhost vdpa device
.TP
.B \fBqueues\fP: \fBint\fP (optional)
number of queues to be created for multiqueue vhost\-vdpa
(default: 1)
.TP
.B \fBx\-svq\fP: \fBboolean\fP (optional)
Start device with (experimental) shadow virtqueue. (Since 7.1)
(default: false)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
Member \fBx\-svq\fP is experimental.
.UNINDENT
.SS Since
.sp
5.1
.SS \fBNetdevVmnetHostOptions\fP (Object)
.sp
vmnet (host mode) network backend.
.sp
Allows the vmnet interface to communicate with other vmnet
interfaces that are in host mode and also with the host.
.SS Members
.INDENT 0.0
.TP
.B \fBstart\-address\fP: \fBstring\fP (optional)
The starting IPv4 address to use for the interface.
Must be in the private IP range (RFC 1918). Must be
specified along with \fBend\-address\fP and \fBsubnet\-mask\fP\&.
This address is used as the gateway address. The
subsequent address up to and including end\-address are
placed in the DHCP pool.
.TP
.B \fBend\-address\fP: \fBstring\fP (optional)
The DHCP IPv4 range end address to use for the
interface. Must be in the private IP range (RFC 1918).
Must be specified along with \fBstart\-address\fP and
\fBsubnet\-mask\fP\&.
.TP
.B \fBsubnet\-mask\fP: \fBstring\fP (optional)
The IPv4 subnet mask to use on the interface. Must
be specified along with \fBstart\-address\fP and \fBsubnet\-mask\fP\&.
.TP
.B \fBisolated\fP: \fBboolean\fP (optional)
Enable isolation for this interface. Interface isolation
ensures that vmnet interface is not able to communicate
with any other vmnet interfaces. Only communication with
host is allowed. Requires at least macOS Big Sur 11.0.
.TP
.B \fBnet\-uuid\fP: \fBstring\fP (optional)
The identifier (UUID) to uniquely identify the isolated
network vmnet interface should be added to. If
set, no DHCP service is provided for this interface and
network communication is allowed only with other interfaces
added to this network identified by the UUID. Requires
at least macOS Big Sur 11.0.
.UNINDENT
.SS Since
.sp
7.1
.SS If
.sp
\fBCONFIG_VMNET\fP
.SS \fBNetdevVmnetSharedOptions\fP (Object)
.sp
vmnet (shared mode) network backend.
.sp
Allows traffic originating from the vmnet interface to reach the
Internet through a network address translator (NAT).
The vmnet interface can communicate with the host and with
other shared mode interfaces on the same subnet. If no DHCP
settings, subnet mask and IPv6 prefix specified, the interface can
communicate with any of other interfaces in shared mode.
.SS Members
.INDENT 0.0
.TP
.B \fBstart\-address\fP: \fBstring\fP (optional)
The starting IPv4 address to use for the interface.
Must be in the private IP range (RFC 1918). Must be
specified along with \fBend\-address\fP and \fBsubnet\-mask\fP\&.
This address is used as the gateway address. The
subsequent address up to and including end\-address are
placed in the DHCP pool.
.TP
.B \fBend\-address\fP: \fBstring\fP (optional)
The DHCP IPv4 range end address to use for the
interface. Must be in the private IP range (RFC 1918).
Must be specified along with \fBstart\-address\fP and \fBsubnet\-mask\fP\&.
.TP
.B \fBsubnet\-mask\fP: \fBstring\fP (optional)
.INDENT 7.0
.TP
.B The IPv4 subnet mask to use on the interface. Must
be specified along with \fBstart\-address\fP and \fBsubnet\-mask\fP\&.
.UNINDENT
.TP
.B \fBisolated\fP: \fBboolean\fP (optional)
Enable isolation for this interface. Interface isolation
ensures that vmnet interface is not able to communicate
with any other vmnet interfaces. Only communication with
host is allowed. Requires at least macOS Big Sur 11.0.
.TP
.B \fBnat66\-prefix\fP: \fBstring\fP (optional)
The IPv6 prefix to use into guest network. Must be a
unique local address i.e. start with fd00::/8 and have
length of 64.
.UNINDENT
.SS Since
.sp
7.1
.SS If
.sp
\fBCONFIG_VMNET\fP
.SS \fBNetdevVmnetBridgedOptions\fP (Object)
.sp
vmnet (bridged mode) network backend.
.sp
Bridges the vmnet interface with a physical network interface.
.SS Members
.INDENT 0.0
.TP
.B \fBifname\fP: \fBstring\fP
The name of the physical interface to be bridged.
.TP
.B \fBisolated\fP: \fBboolean\fP (optional)
Enable isolation for this interface. Interface isolation
ensures that vmnet interface is not able to communicate
with any other vmnet interfaces. Only communication with
host is allowed. Requires at least macOS Big Sur 11.0.
.UNINDENT
.SS Since
.sp
7.1
.SS If
.sp
\fBCONFIG_VMNET\fP
.SS \fBNetdevStreamOptions\fP (Object)
.sp
Configuration info for stream socket netdev
.SS Members
.INDENT 0.0
.TP
.B \fBaddr\fP: \fBSocketAddress\fP
socket address to listen on (server=true)
or connect to (server=false)
.TP
.B \fBserver\fP: \fBboolean\fP (optional)
create server socket (default: false)
.UNINDENT
Only SocketAddress types \(aqunix\(aq, \(aqinet\(aq and \(aqfd\(aq are supported.
.SS Since
.sp
7.2
.SS \fBNetdevDgramOptions\fP (Object)
.sp
Configuration info for datagram socket netdev.
.SS Members
.INDENT 0.0
.TP
.B \fBremote\fP: \fBSocketAddress\fP (optional)
remote address
.TP
.B \fBlocal\fP: \fBSocketAddress\fP (optional)
local address
.UNINDENT
Only SocketAddress types \(aqunix\(aq, \(aqinet\(aq and \(aqfd\(aq are supported.
.sp
If remote address is present and it\(aqs a multicast address, local address
is optional. Otherwise local address is required and remote address is
optional.
.SS Valid parameters combination table
.TS
center;
|l|l|l|.
_
T{
remote
T}	T{
local
T}	T{
okay?
T}
_
T{
absent
T}	T{
absent
T}	T{
no
T}
_
T{
absent
T}	T{
not fd
T}	T{
no
T}
_
T{
absent
T}	T{
fd
T}	T{
yes
T}
_
T{
multicast
T}	T{
absent
T}	T{
yes
T}
_
T{
multicast
T}	T{
present
T}	T{
yes
T}
_
T{
not multicast
T}	T{
absent
T}	T{
no
T}
_
T{
not multicast
T}	T{
present
T}	T{
yes
T}
_
.TE
.SS Since
.sp
7.2
.SS \fBNetClientDriver\fP (Enum)
.sp
Available netdev drivers.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
Not documented
.TP
.B \fBnic\fP
Not documented
.TP
.B \fBuser\fP
Not documented
.TP
.B \fBtap\fP
Not documented
.TP
.B \fBl2tpv3\fP
Not documented
.TP
.B \fBsocket\fP
Not documented
.TP
.B \fBstream\fP
Not documented
.TP
.B \fBdgram\fP
Not documented
.TP
.B \fBvde\fP
Not documented
.TP
.B \fBbridge\fP
Not documented
.TP
.B \fBhubport\fP
Not documented
.TP
.B \fBnetmap\fP
Not documented
.TP
.B \fBvhost\-user\fP
Not documented
.TP
.B \fBvhost\-vdpa\fP
Not documented
.TP
\fBvmnet\-host\fP (\fBIf: \fP\fBCONFIG_VMNET\fP)
Not documented
.TP
\fBvmnet\-shared\fP (\fBIf: \fP\fBCONFIG_VMNET\fP)
Not documented
.TP
\fBvmnet\-bridged\fP (\fBIf: \fP\fBCONFIG_VMNET\fP)
Not documented
.UNINDENT
.SS Since
.sp
2.7
.sp
\fBvhost\-vdpa\fP since 5.1
\fBvmnet\-host\fP since 7.1
\fBvmnet\-shared\fP since 7.1
\fBvmnet\-bridged\fP since 7.1
\fBstream\fP since 7.2
\fBdgram\fP since 7.2
.SS \fBNetdev\fP (Object)
.sp
Captures the configuration of a network device.
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
identifier for monitor commands.
.TP
.B \fBtype\fP: \fBNetClientDriver\fP
Specify the driver used for interpreting remaining arguments.
.TP
.B The members of \fBNetLegacyNicOptions\fP when \fBtype\fP is \fB"nic"\fP
.TP
.B The members of \fBNetdevUserOptions\fP when \fBtype\fP is \fB"user"\fP
.TP
.B The members of \fBNetdevTapOptions\fP when \fBtype\fP is \fB"tap"\fP
.TP
.B The members of \fBNetdevL2TPv3Options\fP when \fBtype\fP is \fB"l2tpv3"\fP
.TP
.B The members of \fBNetdevSocketOptions\fP when \fBtype\fP is \fB"socket"\fP
.TP
.B The members of \fBNetdevStreamOptions\fP when \fBtype\fP is \fB"stream"\fP
.TP
.B The members of \fBNetdevDgramOptions\fP when \fBtype\fP is \fB"dgram"\fP
.TP
.B The members of \fBNetdevVdeOptions\fP when \fBtype\fP is \fB"vde"\fP
.TP
.B The members of \fBNetdevBridgeOptions\fP when \fBtype\fP is \fB"bridge"\fP
.TP
.B The members of \fBNetdevHubPortOptions\fP when \fBtype\fP is \fB"hubport"\fP
.TP
.B The members of \fBNetdevNetmapOptions\fP when \fBtype\fP is \fB"netmap"\fP
.TP
.B The members of \fBNetdevVhostUserOptions\fP when \fBtype\fP is \fB"vhost\-user"\fP
.TP
.B The members of \fBNetdevVhostVDPAOptions\fP when \fBtype\fP is \fB"vhost\-vdpa"\fP
.TP
The members of \fBNetdevVmnetHostOptions\fP when \fBtype\fP is \fB"vmnet\-host"\fP (\fBIf: \fP\fBCONFIG_VMNET\fP)
.TP
The members of \fBNetdevVmnetSharedOptions\fP when \fBtype\fP is \fB"vmnet\-shared"\fP (\fBIf: \fP\fBCONFIG_VMNET\fP)
.TP
The members of \fBNetdevVmnetBridgedOptions\fP when \fBtype\fP is \fB"vmnet\-bridged"\fP (\fBIf: \fP\fBCONFIG_VMNET\fP)
.UNINDENT
.SS Since
.sp
1.2
.sp
\(aql2tpv3\(aq \- since 2.1
\(aqvmnet\-host\(aq \- since 7.1
\(aqvmnet\-shared\(aq \- since 7.1
\(aqvmnet\-bridged\(aq \- since 7.1
\(aqstream\(aq since 7.2
\(aqdgram\(aq since 7.2
.SS \fBRxState\fP (Enum)
.sp
Packets receiving state
.SS Values
.INDENT 0.0
.TP
.B \fBnormal\fP
filter assigned packets according to the mac\-table
.TP
.B \fBnone\fP
don\(aqt receive any assigned packet
.TP
.B \fBall\fP
receive all assigned packets
.UNINDENT
.SS Since
.sp
1.6
.SS \fBRxFilterInfo\fP (Object)
.sp
Rx\-filter information for a NIC.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
net client name
.TP
.B \fBpromiscuous\fP: \fBboolean\fP
whether promiscuous mode is enabled
.TP
.B \fBmulticast\fP: \fBRxState\fP
multicast receive state
.TP
.B \fBunicast\fP: \fBRxState\fP
unicast receive state
.TP
.B \fBvlan\fP: \fBRxState\fP
vlan receive state (Since 2.0)
.TP
.B \fBbroadcast\-allowed\fP: \fBboolean\fP
whether to receive broadcast
.TP
.B \fBmulticast\-overflow\fP: \fBboolean\fP
multicast table is overflowed or not
.TP
.B \fBunicast\-overflow\fP: \fBboolean\fP
unicast table is overflowed or not
.TP
.B \fBmain\-mac\fP: \fBstring\fP
the main macaddr string
.TP
.B \fBvlan\-table\fP: \fBarray of int\fP
a list of active vlan id
.TP
.B \fBunicast\-table\fP: \fBarray of string\fP
a list of unicast macaddr string
.TP
.B \fBmulticast\-table\fP: \fBarray of string\fP
a list of multicast macaddr string
.UNINDENT
.SS Since
.sp
1.6
.SS \fBquery\-rx\-filter\fP (Command)
.sp
Return rx\-filter information for all NICs (or for the given NIC).
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP (optional)
net client name
.UNINDENT
.SS Returns
.sp
list of \fBRxFilterInfo\fP for all NICs (or for the given NIC).
Returns an error if the given \fBname\fP doesn\(aqt exist, or given
NIC doesn\(aqt support rx\-filter querying, or given net client
isn\(aqt a NIC.
.SS Since
.sp
1.6
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-rx\-filter", "arguments": { "name": "vnet0" } }
<\- { "return": [
        {
            "promiscuous": true,
            "name": "vnet0",
            "main\-mac": "52:54:00:12:34:56",
            "unicast": "normal",
            "vlan": "normal",
            "vlan\-table": [
                4,
                0
            ],
            "unicast\-table": [
            ],
            "multicast": "normal",
            "multicast\-overflow": false,
            "unicast\-overflow": false,
            "multicast\-table": [
                "01:00:5e:00:00:01",
                "33:33:00:00:00:01",
                "33:33:ff:12:34:56"
            ],
            "broadcast\-allowed": false
        }
      ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBNIC_RX_FILTER_CHANGED\fP (Event)
.sp
Emitted once until the \(aqquery\-rx\-filter\(aq command is executed, the first event
will always be emitted
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP (optional)
net client name
.TP
.B \fBpath\fP: \fBstring\fP
device path
.UNINDENT
.SS Since
.sp
1.6
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "NIC_RX_FILTER_CHANGED",
     "data": { "name": "vnet0",
               "path": "/machine/peripheral/vnet0/virtio\-backend" },
     "timestamp": { "seconds": 1368697518, "microseconds": 326866 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBAnnounceParameters\fP (Object)
.sp
Parameters for self\-announce timers
.SS Members
.INDENT 0.0
.TP
.B \fBinitial\fP: \fBint\fP
Initial delay (in ms) before sending the first GARP/RARP
announcement
.TP
.B \fBmax\fP: \fBint\fP
Maximum delay (in ms) between GARP/RARP announcement packets
.TP
.B \fBrounds\fP: \fBint\fP
Number of self\-announcement attempts
.TP
.B \fBstep\fP: \fBint\fP
Delay increase (in ms) after each self\-announcement attempt
.TP
.B \fBinterfaces\fP: \fBarray of string\fP (optional)
An optional list of interface names, which restricts the
announcement to the listed interfaces. (Since 4.1)
.TP
.B \fBid\fP: \fBstring\fP (optional)
A name to be used to identify an instance of announce\-timers
and to allow it to modified later.  Not for use as
part of the migration parameters. (Since 4.1)
.UNINDENT
.SS Since
.sp
4.0
.SS \fBannounce\-self\fP (Command)
.sp
Trigger generation of broadcast RARP frames to update network switches.
This can be useful when network bonds fail\-over the active slave.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBAnnounceParameters\fP
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "announce\-self",
     "arguments": {
         "initial": 50, "max": 550, "rounds": 10, "step": 50,
         "interfaces": ["vn2", "vn3"], "id": "bob" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
4.0
.SS \fBFAILOVER_NEGOTIATED\fP (Event)
.sp
Emitted when VIRTIO_NET_F_STANDBY was enabled during feature negotiation.
Failover primary devices which were hidden (not hotplugged when requested)
before will now be hotplugged by the virtio\-net standby device.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\-id\fP: \fBstring\fP
QEMU device id of the unplugged device
.UNINDENT
.SS Since
.sp
4.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "FAILOVER_NEGOTIATED",
     "data": { "device\-id": "net1" },
     "timestamp": { "seconds": 1368697518, "microseconds": 326866 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBNETDEV_STREAM_CONNECTED\fP (Event)
.sp
Emitted when the netdev stream backend is connected
.SS Arguments
.INDENT 0.0
.TP
.B \fBnetdev\-id\fP: \fBstring\fP
QEMU netdev id that is connected
.TP
.B \fBaddr\fP: \fBSocketAddress\fP
The destination address
.UNINDENT
.SS Since
.sp
7.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "NETDEV_STREAM_CONNECTED",
     "data": { "netdev\-id": "netdev0",
               "addr": { "port": "47666", "ipv6": true,
                         "host": "::1", "type": "inet" } },
     "timestamp": { "seconds": 1666269863, "microseconds": 311222 } }

or

<\- { "event": "NETDEV_STREAM_CONNECTED",
     "data": { "netdev\-id": "netdev0",
               "addr": { "path": "/tmp/qemu0", "type": "unix" } },
     "timestamp": { "seconds": 1666269706, "microseconds": 413651 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBNETDEV_STREAM_DISCONNECTED\fP (Event)
.sp
Emitted when the netdev stream backend is disconnected
.SS Arguments
.INDENT 0.0
.TP
.B \fBnetdev\-id\fP: \fBstring\fP
QEMU netdev id that is disconnected
.UNINDENT
.SS Since
.sp
7.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { \(aqevent\(aq: \(aqNETDEV_STREAM_DISCONNECTED\(aq,
     \(aqdata\(aq: {\(aqnetdev\-id\(aq: \(aqnetdev0\(aq},
     \(aqtimestamp\(aq: {\(aqseconds\(aq: 1663330937, \(aqmicroseconds\(aq: 526695} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH RDMA DEVICE
.SS \fBRDMA_GID_STATUS_CHANGED\fP (Event)
.sp
Emitted when guest driver adds/deletes GID to/from device
.SS Arguments
.INDENT 0.0
.TP
.B \fBnetdev\fP: \fBstring\fP
RoCE Network Device name
.TP
.B \fBgid\-status\fP: \fBboolean\fP
Add or delete indication
.TP
.B \fBsubnet\-prefix\fP: \fBint\fP
Subnet Prefix
.TP
.B \fBinterface\-id\fP: \fBint\fP
Not documented
.UNINDENT
\fBinterface\-id\fP : Interface ID
.SS Since
.sp
4.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- {"timestamp": {"seconds": 1541579657, "microseconds": 986760},
    "event": "RDMA_GID_STATUS_CHANGED",
    "data":
        {"netdev": "bridge0",
        "interface\-id": 15880512517475447892,
        "gid\-status": true,
        "subnet\-prefix": 33022}}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH ROCKER SWITCH DEVICE
.SS \fBRockerSwitch\fP (Object)
.sp
Rocker switch information.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
switch name
.TP
.B \fBid\fP: \fBint\fP
switch ID
.TP
.B \fBports\fP: \fBint\fP
number of front\-panel ports
.UNINDENT
.SS Since
.sp
2.4
.SS \fBquery\-rocker\fP (Command)
.sp
Return rocker switch information.
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
Not documented
.UNINDENT
.SS Returns
.sp
\fBRocker\fP information
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-rocker", "arguments": { "name": "sw1" } }
<\- { "return": {"name": "sw1", "ports": 2, "id": 1327446905938}}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBRockerPortDuplex\fP (Enum)
.sp
An eumeration of port duplex states.
.SS Values
.INDENT 0.0
.TP
.B \fBhalf\fP
half duplex
.TP
.B \fBfull\fP
full duplex
.UNINDENT
.SS Since
.sp
2.4
.SS \fBRockerPortAutoneg\fP (Enum)
.sp
An eumeration of port autoneg states.
.SS Values
.INDENT 0.0
.TP
.B \fBoff\fP
autoneg is off
.TP
.B \fBon\fP
autoneg is on
.UNINDENT
.SS Since
.sp
2.4
.SS \fBRockerPort\fP (Object)
.sp
Rocker switch port information.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
port name
.TP
.B \fBenabled\fP: \fBboolean\fP
port is enabled for I/O
.TP
.B \fBlink\-up\fP: \fBboolean\fP
physical link is UP on port
.TP
.B \fBspeed\fP: \fBint\fP
port link speed in Mbps
.TP
.B \fBduplex\fP: \fBRockerPortDuplex\fP
port link duplex
.TP
.B \fBautoneg\fP: \fBRockerPortAutoneg\fP
port link autoneg
.UNINDENT
.SS Since
.sp
2.4
.SS \fBquery\-rocker\-ports\fP (Command)
.sp
Return rocker switch port information.
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
Not documented
.UNINDENT
.SS Returns
.sp
a list of \fBRockerPort\fP information
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-rocker\-ports", "arguments": { "name": "sw1" } }
<\- { "return": [ {"duplex": "full", "enabled": true, "name": "sw1.1",
                  "autoneg": "off", "link\-up": true, "speed": 10000},
                 {"duplex": "full", "enabled": true, "name": "sw1.2",
                  "autoneg": "off", "link\-up": true, "speed": 10000}
   ]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBRockerOfDpaFlowKey\fP (Object)
.sp
Rocker switch OF\-DPA flow key
.SS Members
.INDENT 0.0
.TP
.B \fBpriority\fP: \fBint\fP
key priority, 0 being lowest priority
.TP
.B \fBtbl\-id\fP: \fBint\fP
flow table ID
.TP
.B \fBin\-pport\fP: \fBint\fP (optional)
physical input port
.TP
.B \fBtunnel\-id\fP: \fBint\fP (optional)
tunnel ID
.TP
.B \fBvlan\-id\fP: \fBint\fP (optional)
VLAN ID
.TP
.B \fBeth\-type\fP: \fBint\fP (optional)
Ethernet header type
.TP
.B \fBeth\-src\fP: \fBstring\fP (optional)
Ethernet header source MAC address
.TP
.B \fBeth\-dst\fP: \fBstring\fP (optional)
Ethernet header destination MAC address
.TP
.B \fBip\-proto\fP: \fBint\fP (optional)
IP Header protocol field
.TP
.B \fBip\-tos\fP: \fBint\fP (optional)
IP header TOS field
.TP
.B \fBip\-dst\fP: \fBstring\fP (optional)
IP header destination address
.UNINDENT
.SS Note
.sp
optional members may or may not appear in the flow key
depending if they\(aqre relevant to the flow key.
.SS Since
.sp
2.4
.SS \fBRockerOfDpaFlowMask\fP (Object)
.sp
Rocker switch OF\-DPA flow mask
.SS Members
.INDENT 0.0
.TP
.B \fBin\-pport\fP: \fBint\fP (optional)
physical input port
.TP
.B \fBtunnel\-id\fP: \fBint\fP (optional)
tunnel ID
.TP
.B \fBvlan\-id\fP: \fBint\fP (optional)
VLAN ID
.TP
.B \fBeth\-src\fP: \fBstring\fP (optional)
Ethernet header source MAC address
.TP
.B \fBeth\-dst\fP: \fBstring\fP (optional)
Ethernet header destination MAC address
.TP
.B \fBip\-proto\fP: \fBint\fP (optional)
IP Header protocol field
.TP
.B \fBip\-tos\fP: \fBint\fP (optional)
IP header TOS field
.UNINDENT
.SS Note
.sp
optional members may or may not appear in the flow mask
depending if they\(aqre relevant to the flow mask.
.SS Since
.sp
2.4
.SS \fBRockerOfDpaFlowAction\fP (Object)
.sp
Rocker switch OF\-DPA flow action
.SS Members
.INDENT 0.0
.TP
.B \fBgoto\-tbl\fP: \fBint\fP (optional)
next table ID
.TP
.B \fBgroup\-id\fP: \fBint\fP (optional)
group ID
.TP
.B \fBtunnel\-lport\fP: \fBint\fP (optional)
tunnel logical port ID
.TP
.B \fBvlan\-id\fP: \fBint\fP (optional)
VLAN ID
.TP
.B \fBnew\-vlan\-id\fP: \fBint\fP (optional)
new VLAN ID
.TP
.B \fBout\-pport\fP: \fBint\fP (optional)
physical output port
.UNINDENT
.SS Note
.sp
optional members may or may not appear in the flow action
depending if they\(aqre relevant to the flow action.
.SS Since
.sp
2.4
.SS \fBRockerOfDpaFlow\fP (Object)
.sp
Rocker switch OF\-DPA flow
.SS Members
.INDENT 0.0
.TP
.B \fBcookie\fP: \fBint\fP
flow unique cookie ID
.TP
.B \fBhits\fP: \fBint\fP
count of matches (hits) on flow
.TP
.B \fBkey\fP: \fBRockerOfDpaFlowKey\fP
flow key
.TP
.B \fBmask\fP: \fBRockerOfDpaFlowMask\fP
flow mask
.TP
.B \fBaction\fP: \fBRockerOfDpaFlowAction\fP
flow action
.UNINDENT
.SS Since
.sp
2.4
.SS \fBquery\-rocker\-of\-dpa\-flows\fP (Command)
.sp
Return rocker OF\-DPA flow information.
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
switch name
.TP
.B \fBtbl\-id\fP: \fBint\fP (optional)
flow table ID.  If tbl\-id is not specified, returns
flow information for all tables.
.UNINDENT
.SS Returns
.sp
rocker OF\-DPA flow information
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-rocker\-of\-dpa\-flows",
     "arguments": { "name": "sw1" } }
<\- { "return": [ {"key": {"in\-pport": 0, "priority": 1, "tbl\-id": 0},
                  "hits": 138,
                  "cookie": 0,
                  "action": {"goto\-tbl": 10},
                  "mask": {"in\-pport": 4294901760}
                 },
                 {...more...},
   ]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBRockerOfDpaGroup\fP (Object)
.sp
Rocker switch OF\-DPA group
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBint\fP
group unique ID
.TP
.B \fBtype\fP: \fBint\fP
group type
.TP
.B \fBvlan\-id\fP: \fBint\fP (optional)
VLAN ID
.TP
.B \fBpport\fP: \fBint\fP (optional)
physical port number
.TP
.B \fBindex\fP: \fBint\fP (optional)
group index, unique with group type
.TP
.B \fBout\-pport\fP: \fBint\fP (optional)
output physical port number
.TP
.B \fBgroup\-id\fP: \fBint\fP (optional)
next group ID
.TP
.B \fBset\-vlan\-id\fP: \fBint\fP (optional)
VLAN ID to set
.TP
.B \fBpop\-vlan\fP: \fBint\fP (optional)
pop VLAN headr from packet
.TP
.B \fBgroup\-ids\fP: \fBarray of int\fP (optional)
list of next group IDs
.TP
.B \fBset\-eth\-src\fP: \fBstring\fP (optional)
set source MAC address in Ethernet header
.TP
.B \fBset\-eth\-dst\fP: \fBstring\fP (optional)
set destination MAC address in Ethernet header
.TP
.B \fBttl\-check\fP: \fBint\fP (optional)
perform TTL check
.UNINDENT
.SS Note
.sp
optional members may or may not appear in the group depending
if they\(aqre relevant to the group type.
.SS Since
.sp
2.4
.SS \fBquery\-rocker\-of\-dpa\-groups\fP (Command)
.sp
Return rocker OF\-DPA group information.
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
switch name
.TP
.B \fBtype\fP: \fBint\fP (optional)
group type.  If type is not specified, returns
group information for all group types.
.UNINDENT
.SS Returns
.sp
rocker OF\-DPA group information
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-rocker\-of\-dpa\-groups",
     "arguments": { "name": "sw1" } }
<\- { "return": [ {"type": 0, "out\-pport": 2,
                  "pport": 2, "vlan\-id": 3841,
                  "pop\-vlan": 1, "id": 251723778},
                 {"type": 0, "out\-pport": 0,
                  "pport": 0, "vlan\-id": 3841,
                  "pop\-vlan": 1, "id": 251723776},
                 {"type": 0, "out\-pport": 1,
                  "pport": 1, "vlan\-id": 3840,
                  "pop\-vlan": 1, "id": 251658241},
                 {"type": 0, "out\-pport": 0,
                  "pport": 0, "vlan\-id": 3840,
                  "pop\-vlan": 1, "id": 251658240}
   ]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH TPM (TRUSTED PLATFORM MODULE) DEVICES
.SS \fBTpmModel\fP (Enum)
.sp
An enumeration of TPM models
.SS Values
.INDENT 0.0
.TP
.B \fBtpm\-tis\fP
TPM TIS model
.TP
.B \fBtpm\-crb\fP
TPM CRB model (since 2.12)
.TP
.B \fBtpm\-spapr\fP
TPM SPAPR model (since 5.0)
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBquery\-tpm\-models\fP (Command)
.sp
Return a list of supported TPM models
.SS Returns
.sp
a list of TpmModel
.SS Since
.sp
1.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-tpm\-models" }
<\- { "return": [ "tpm\-tis", "tpm\-crb", "tpm\-spapr" ] }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBTpmType\fP (Enum)
.sp
An enumeration of TPM types
.SS Values
.INDENT 0.0
.TP
.B \fBpassthrough\fP
TPM passthrough type
.TP
.B \fBemulator\fP
Software Emulator TPM type
Since: 2.11
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBquery\-tpm\-types\fP (Command)
.sp
Return a list of supported TPM types
.SS Returns
.sp
a list of TpmType
.SS Since
.sp
1.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-tpm\-types" }
<\- { "return": [ "passthrough", "emulator" ] }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBTPMPassthroughOptions\fP (Object)
.sp
Information about the TPM passthrough type
.SS Members
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP (optional)
string describing the path used for accessing the TPM device
.TP
.B \fBcancel\-path\fP: \fBstring\fP (optional)
string showing the TPM\(aqs sysfs cancel file
for cancellation of TPM commands while they are executing
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBTPMEmulatorOptions\fP (Object)
.sp
Information about the TPM emulator type
.SS Members
.INDENT 0.0
.TP
.B \fBchardev\fP: \fBstring\fP
Name of a unix socket chardev
.UNINDENT
.SS Since
.sp
2.11
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBTPMPassthroughOptionsWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBTPMPassthroughOptions\fP
Not documented
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBTPMEmulatorOptionsWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBTPMEmulatorOptions\fP
Not documented
.UNINDENT
.SS Since
.sp
2.11
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBTpmTypeOptions\fP (Object)
.sp
A union referencing different TPM backend types\(aq configuration options
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBTpmType\fP
.INDENT 7.0
.IP \(bu 2
\(aqpassthrough\(aq The configuration options for the TPM passthrough type
.IP \(bu 2
\(aqemulator\(aq The configuration options for TPM emulator backend type
.UNINDENT
.TP
.B The members of \fBTPMPassthroughOptionsWrapper\fP when \fBtype\fP is \fB"passthrough"\fP
.TP
.B The members of \fBTPMEmulatorOptionsWrapper\fP when \fBtype\fP is \fB"emulator"\fP
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBTPMInfo\fP (Object)
.sp
Information about the TPM
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
The Id of the TPM
.TP
.B \fBmodel\fP: \fBTpmModel\fP
The TPM frontend model
.TP
.B \fBoptions\fP: \fBTpmTypeOptions\fP
The TPM (backend) type configuration options
.UNINDENT
.SS Since
.sp
1.5
.SS If
.sp
\fBCONFIG_TPM\fP
.SS \fBquery\-tpm\fP (Command)
.sp
Return information about the TPM device
.SS Returns
.sp
\fBTPMInfo\fP on success
.SS Since
.sp
1.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-tpm" }
<\- { "return":
     [
       { "model": "tpm\-tis",
         "options":
           { "type": "passthrough",
             "data":
               { "cancel\-path": "/sys/class/misc/tpm0/device/cancel",
                 "path": "/dev/tpm0"
               }
           },
         "id": "tpm0"
       }
     ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_TPM\fP
.SH REMOTE DESKTOP
.SS \fBDisplayProtocol\fP (Enum)
.sp
Display protocols which support changing password options.
.SS Values
.INDENT 0.0
.TP
.B \fBvnc\fP
Not documented
.TP
.B \fBspice\fP
Not documented
.UNINDENT
.SS Since
.sp
7.0
.SS \fBSetPasswordAction\fP (Enum)
.sp
An action to take on changing a password on a connection with active clients.
.SS Values
.INDENT 0.0
.TP
.B \fBkeep\fP
maintain existing clients
.TP
.B \fBfail\fP
fail the command if clients are connected
.TP
.B \fBdisconnect\fP
disconnect existing clients
.UNINDENT
.SS Since
.sp
7.0
.SS \fBSetPasswordOptions\fP (Object)
.sp
Options for set_password.
.SS Members
.INDENT 0.0
.TP
.B \fBprotocol\fP: \fBDisplayProtocol\fP
.INDENT 7.0
.IP \(bu 2
\(aqvnc\(aq to modify the VNC server password
.IP \(bu 2
\(aqspice\(aq to modify the Spice server password
.UNINDENT
.TP
.B \fBpassword\fP: \fBstring\fP
the new password
.TP
.B \fBconnected\fP: \fBSetPasswordAction\fP (optional)
How to handle existing clients when changing the
password. If nothing is specified, defaults to \(aqkeep\(aq.
For VNC, only \(aqkeep\(aq is currently implemented.
.TP
.B The members of \fBSetPasswordOptionsVnc\fP when \fBprotocol\fP is \fB"vnc"\fP
.UNINDENT
.SS Since
.sp
7.0
.SS \fBSetPasswordOptionsVnc\fP (Object)
.sp
Options for set_password specific to the VNC procotol.
.SS Members
.INDENT 0.0
.TP
.B \fBdisplay\fP: \fBstring\fP (optional)
The id of the display where the password should be changed.
Defaults to the first.
.UNINDENT
.SS Since
.sp
7.0
.SS \fBset_password\fP (Command)
.sp
Set the password of a remote display server.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBSetPasswordOptions\fP
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If Spice is not enabled, DeviceNotFound
.UNINDENT
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "set_password", "arguments": { "protocol": "vnc",
                                               "password": "secret" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBExpirePasswordOptions\fP (Object)
.sp
General options for expire_password.
.SS Members
.INDENT 0.0
.TP
.B \fBprotocol\fP: \fBDisplayProtocol\fP
.INDENT 7.0
.IP \(bu 2
\(aqvnc\(aq to modify the VNC server expiration
.IP \(bu 2
\(aqspice\(aq to modify the Spice server expiration
.UNINDENT
.TP
.B \fBtime\fP: \fBstring\fP
when to expire the password.
.INDENT 7.0
.IP \(bu 2
\(aqnow\(aq to expire the password immediately
.IP \(bu 2
\(aqnever\(aq to cancel password expiration
.IP \(bu 2
\(aq+INT\(aq where INT is the number of seconds from now (integer)
.IP \(bu 2
\(aqINT\(aq where INT is the absolute time in seconds
.UNINDENT
.TP
.B The members of \fBExpirePasswordOptionsVnc\fP when \fBprotocol\fP is \fB"vnc"\fP
.UNINDENT
.SS Notes
.sp
Time is relative to the server and currently there is no way to
coordinate server time with client time.  It is not recommended to
use the absolute time version of the \fBtime\fP parameter unless you\(aqre
sure you are on the same machine as the QEMU instance.
.SS Since
.sp
7.0
.SS \fBExpirePasswordOptionsVnc\fP (Object)
.sp
Options for expire_password specific to the VNC procotol.
.SS Members
.INDENT 0.0
.TP
.B \fBdisplay\fP: \fBstring\fP (optional)
The id of the display where the expiration should be changed.
Defaults to the first.
.UNINDENT
.SS Since
.sp
7.0
.SS \fBexpire_password\fP (Command)
.sp
Expire the password of a remote display server.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBExpirePasswordOptions\fP
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If \fBprotocol\fP is \(aqspice\(aq and Spice is not active, DeviceNotFound
.UNINDENT
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "expire_password", "arguments": { "protocol": "vnc",
                                                  "time": "+60" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBImageFormat\fP (Enum)
.sp
Supported image format types.
.SS Values
.INDENT 0.0
.TP
.B \fBpng\fP
PNG format
.TP
.B \fBppm\fP
PPM format
.UNINDENT
.SS Since
.sp
7.1
.SS \fBscreendump\fP (Command)
.sp
Capture the contents of a screen and write it to a file.
.SS Arguments
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
the path of a new file to store the image
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
ID of the display device that should be dumped. If this parameter
is missing, the primary display will be used. (Since 2.12)
.TP
.B \fBhead\fP: \fBint\fP (optional)
head to use in case the device supports multiple heads. If this
parameter is missing, head #0 will be used. Also note that the head
can only be specified in conjunction with the device ID. (Since 2.12)
.TP
.B \fBformat\fP: \fBImageFormat\fP (optional)
image format for screendump. (default: ppm) (Since 7.1)
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "screendump",
     "arguments": { "filename": "/tmp/image" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Spice
.SS \fBSpiceBasicInfo\fP (Object)
.sp
The basic information for SPICE network connection
.SS Members
.INDENT 0.0
.TP
.B \fBhost\fP: \fBstring\fP
IP address
.TP
.B \fBport\fP: \fBstring\fP
port number
.TP
.B \fBfamily\fP: \fBNetworkAddressFamily\fP
address family
.UNINDENT
.SS Since
.sp
2.1
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBSpiceServerInfo\fP (Object)
.sp
Information about a SPICE server
.SS Members
.INDENT 0.0
.TP
.B \fBauth\fP: \fBstring\fP (optional)
authentication method
.TP
.B The members of \fBSpiceBasicInfo\fP
.UNINDENT
.SS Since
.sp
2.1
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBSpiceChannel\fP (Object)
.sp
Information about a SPICE client channel.
.SS Members
.INDENT 0.0
.TP
.B \fBconnection\-id\fP: \fBint\fP
SPICE connection id number.  All channels with the same id
belong to the same SPICE session.
.TP
.B \fBchannel\-type\fP: \fBint\fP
SPICE channel type number.  "1" is the main control
channel, filter for this one if you want to track spice
sessions only
.TP
.B \fBchannel\-id\fP: \fBint\fP
SPICE channel ID number.  Usually "0", might be different when
multiple channels of the same type exist, such as multiple
display channels in a multihead setup
.TP
.B \fBtls\fP: \fBboolean\fP
true if the channel is encrypted, false otherwise.
.TP
.B The members of \fBSpiceBasicInfo\fP
.UNINDENT
.SS Since
.sp
0.14
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBSpiceQueryMouseMode\fP (Enum)
.sp
An enumeration of Spice mouse states.
.SS Values
.INDENT 0.0
.TP
.B \fBclient\fP
Mouse cursor position is determined by the client.
.TP
.B \fBserver\fP
Mouse cursor position is determined by the server.
.TP
.B \fBunknown\fP
No information is available about mouse mode used by
the spice server.
.UNINDENT
.SS Note
.sp
spice/enums.h has a SpiceMouseMode already, hence the name.
.SS Since
.sp
1.1
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBSpiceInfo\fP (Object)
.sp
Information about the SPICE session.
.SS Members
.INDENT 0.0
.TP
.B \fBenabled\fP: \fBboolean\fP
true if the SPICE server is enabled, false otherwise
.TP
.B \fBmigrated\fP: \fBboolean\fP
true if the last guest migration completed and spice
migration had completed as well. false otherwise. (since 1.4)
.TP
.B \fBhost\fP: \fBstring\fP (optional)
The hostname the SPICE server is bound to.  This depends on
the name resolution on the host and may be an IP address.
.TP
.B \fBport\fP: \fBint\fP (optional)
The SPICE server\(aqs port number.
.TP
.B \fBcompiled\-version\fP: \fBstring\fP (optional)
SPICE server version.
.TP
.B \fBtls\-port\fP: \fBint\fP (optional)
The SPICE server\(aqs TLS port number.
.TP
.B \fBauth\fP: \fBstring\fP (optional)
the current authentication type used by the server
.INDENT 7.0
.IP \(bu 2
\(aqnone\(aq  if no authentication is being used
.IP \(bu 2
\(aqspice\(aq uses SASL or direct TLS authentication, depending on command
line options
.UNINDENT
.TP
.B \fBmouse\-mode\fP: \fBSpiceQueryMouseMode\fP
The mode in which the mouse cursor is displayed currently. Can
be determined by the client or the server, or unknown if spice
server doesn\(aqt provide this information. (since: 1.1)
.TP
.B \fBchannels\fP: \fBarray of SpiceChannel\fP (optional)
a list of \fBSpiceChannel\fP for each active spice channel
.UNINDENT
.SS Since
.sp
0.14
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBquery\-spice\fP (Command)
.sp
Returns information about the current SPICE server
.SS Returns
.sp
\fBSpiceInfo\fP
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-spice" }
<\- { "return": {
         "enabled": true,
         "auth": "spice",
         "port": 5920,
         "migrated":false,
         "tls\-port": 5921,
         "host": "0.0.0.0",
         "mouse\-mode":"client",
         "channels": [
            {
               "port": "54924",
               "family": "ipv4",
               "channel\-type": 1,
               "connection\-id": 1804289383,
               "host": "127.0.0.1",
               "channel\-id": 0,
               "tls": true
            },
            {
               "port": "36710",
               "family": "ipv4",
               "channel\-type": 4,
               "connection\-id": 1804289383,
               "host": "127.0.0.1",
               "channel\-id": 0,
               "tls": false
            },
            [ ... more channels follow ... ]
         ]
      }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBSPICE_CONNECTED\fP (Event)
.sp
Emitted when a SPICE client establishes a connection
.SS Arguments
.INDENT 0.0
.TP
.B \fBserver\fP: \fBSpiceBasicInfo\fP
server information
.TP
.B \fBclient\fP: \fBSpiceBasicInfo\fP
client information
.UNINDENT
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "timestamp": {"seconds": 1290688046, "microseconds": 388707},
     "event": "SPICE_CONNECTED",
     "data": {
       "server": { "port": "5920", "family": "ipv4", "host": "127.0.0.1"},
       "client": {"port": "52873", "family": "ipv4", "host": "127.0.0.1"}
   }}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBSPICE_INITIALIZED\fP (Event)
.sp
Emitted after initial handshake and authentication takes place (if any)
and the SPICE channel is up and running
.SS Arguments
.INDENT 0.0
.TP
.B \fBserver\fP: \fBSpiceServerInfo\fP
server information
.TP
.B \fBclient\fP: \fBSpiceChannel\fP
client information
.UNINDENT
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "timestamp": {"seconds": 1290688046, "microseconds": 417172},
     "event": "SPICE_INITIALIZED",
     "data": {"server": {"auth": "spice", "port": "5921",
                         "family": "ipv4", "host": "127.0.0.1"},
              "client": {"port": "49004", "family": "ipv4", "channel\-type": 3,
                         "connection\-id": 1804289383, "host": "127.0.0.1",
                         "channel\-id": 0, "tls": true}
   }}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBSPICE_DISCONNECTED\fP (Event)
.sp
Emitted when the SPICE connection is closed
.SS Arguments
.INDENT 0.0
.TP
.B \fBserver\fP: \fBSpiceBasicInfo\fP
server information
.TP
.B \fBclient\fP: \fBSpiceBasicInfo\fP
client information
.UNINDENT
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "timestamp": {"seconds": 1290688046, "microseconds": 388707},
     "event": "SPICE_DISCONNECTED",
     "data": {
       "server": { "port": "5920", "family": "ipv4", "host": "127.0.0.1"},
       "client": {"port": "52873", "family": "ipv4", "host": "127.0.0.1"}
   }}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS \fBSPICE_MIGRATE_COMPLETED\fP (Event)
.sp
Emitted when SPICE migration has completed
.SS Since
.sp
1.3
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "timestamp": {"seconds": 1290688046, "microseconds": 417172},
     "event": "SPICE_MIGRATE_COMPLETED" }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_SPICE\fP
.SS VNC
.SS \fBVncBasicInfo\fP (Object)
.sp
The basic information for vnc network connection
.SS Members
.INDENT 0.0
.TP
.B \fBhost\fP: \fBstring\fP
IP address
.TP
.B \fBservice\fP: \fBstring\fP
The service name of the vnc port. This may depend on the host
system\(aqs service database so symbolic names should not be relied
on.
.TP
.B \fBfamily\fP: \fBNetworkAddressFamily\fP
address family
.TP
.B \fBwebsocket\fP: \fBboolean\fP
true in case the socket is a websocket (since 2.3).
.UNINDENT
.SS Since
.sp
2.1
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVncServerInfo\fP (Object)
.sp
The network connection information for server
.SS Members
.INDENT 0.0
.TP
.B \fBauth\fP: \fBstring\fP (optional)
authentication method used for
the plain (non\-websocket) VNC server
.TP
.B The members of \fBVncBasicInfo\fP
.UNINDENT
.SS Since
.sp
2.1
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVncClientInfo\fP (Object)
.sp
Information about a connected VNC client.
.SS Members
.INDENT 0.0
.TP
.B \fBx509_dname\fP: \fBstring\fP (optional)
If x509 authentication is in use, the Distinguished
Name of the client.
.TP
.B \fBsasl_username\fP: \fBstring\fP (optional)
If SASL authentication is in use, the SASL username
used for authentication.
.TP
.B The members of \fBVncBasicInfo\fP
.UNINDENT
.SS Since
.sp
0.14
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVncInfo\fP (Object)
.sp
Information about the VNC session.
.SS Members
.INDENT 0.0
.TP
.B \fBenabled\fP: \fBboolean\fP
true if the VNC server is enabled, false otherwise
.TP
.B \fBhost\fP: \fBstring\fP (optional)
The hostname the VNC server is bound to.  This depends on
the name resolution on the host and may be an IP address.
.TP
.B \fBfamily\fP: \fBNetworkAddressFamily\fP (optional)
.INDENT 7.0
.IP \(bu 2
\(aqipv6\(aq if the host is listening for IPv6 connections
.IP \(bu 2
\(aqipv4\(aq if the host is listening for IPv4 connections
.IP \(bu 2
\(aqunix\(aq if the host is listening on a unix domain socket
.IP \(bu 2
\(aqunknown\(aq otherwise
.UNINDENT
.TP
.B \fBservice\fP: \fBstring\fP (optional)
The service name of the server\(aqs port.  This may depends
on the host system\(aqs service database so symbolic names should not
be relied on.
.TP
.B \fBauth\fP: \fBstring\fP (optional)
the current authentication type used by the server
.INDENT 7.0
.IP \(bu 2
\(aqnone\(aq if no authentication is being used
.IP \(bu 2
\(aqvnc\(aq if VNC authentication is being used
.IP \(bu 2
\(aqvencrypt+plain\(aq if VEncrypt is used with plain text authentication
.IP \(bu 2
\(aqvencrypt+tls+none\(aq if VEncrypt is used with TLS and no authentication
.IP \(bu 2
\(aqvencrypt+tls+vnc\(aq if VEncrypt is used with TLS and VNC authentication
.IP \(bu 2
\(aqvencrypt+tls+plain\(aq if VEncrypt is used with TLS and plain text auth
.IP \(bu 2
\(aqvencrypt+x509+none\(aq if VEncrypt is used with x509 and no auth
.IP \(bu 2
\(aqvencrypt+x509+vnc\(aq if VEncrypt is used with x509 and VNC auth
.IP \(bu 2
\(aqvencrypt+x509+plain\(aq if VEncrypt is used with x509 and plain text auth
.IP \(bu 2
\(aqvencrypt+tls+sasl\(aq if VEncrypt is used with TLS and SASL auth
.IP \(bu 2
\(aqvencrypt+x509+sasl\(aq if VEncrypt is used with x509 and SASL auth
.UNINDENT
.TP
.B \fBclients\fP: \fBarray of VncClientInfo\fP (optional)
a list of \fBVncClientInfo\fP of all currently connected clients
.UNINDENT
.SS Since
.sp
0.14
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVncPrimaryAuth\fP (Enum)
.sp
vnc primary authentication method.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
Not documented
.TP
.B \fBvnc\fP
Not documented
.TP
.B \fBra2\fP
Not documented
.TP
.B \fBra2ne\fP
Not documented
.TP
.B \fBtight\fP
Not documented
.TP
.B \fBultra\fP
Not documented
.TP
.B \fBtls\fP
Not documented
.TP
.B \fBvencrypt\fP
Not documented
.TP
.B \fBsasl\fP
Not documented
.UNINDENT
.SS Since
.sp
2.3
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVncVencryptSubAuth\fP (Enum)
.sp
vnc sub authentication method with vencrypt.
.SS Values
.INDENT 0.0
.TP
.B \fBplain\fP
Not documented
.TP
.B \fBtls\-none\fP
Not documented
.TP
.B \fBx509\-none\fP
Not documented
.TP
.B \fBtls\-vnc\fP
Not documented
.TP
.B \fBx509\-vnc\fP
Not documented
.TP
.B \fBtls\-plain\fP
Not documented
.TP
.B \fBx509\-plain\fP
Not documented
.TP
.B \fBtls\-sasl\fP
Not documented
.TP
.B \fBx509\-sasl\fP
Not documented
.UNINDENT
.SS Since
.sp
2.3
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVncServerInfo2\fP (Object)
.sp
The network connection information for server
.SS Members
.INDENT 0.0
.TP
.B \fBauth\fP: \fBVncPrimaryAuth\fP
The current authentication type used by the servers
.TP
.B \fBvencrypt\fP: \fBVncVencryptSubAuth\fP (optional)
The vencrypt sub authentication type used by the
servers, only specified in case auth == vencrypt.
.TP
.B The members of \fBVncBasicInfo\fP
.UNINDENT
.SS Since
.sp
2.9
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVncInfo2\fP (Object)
.sp
Information about a vnc server
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
vnc server name.
.TP
.B \fBserver\fP: \fBarray of VncServerInfo2\fP
A list of \fBVncBasincInfo\fP describing all listening sockets.
The list can be empty (in case the vnc server is disabled).
It also may have multiple entries: normal + websocket,
possibly also ipv4 + ipv6 in the future.
.TP
.B \fBclients\fP: \fBarray of VncClientInfo\fP
A list of \fBVncClientInfo\fP of all currently connected clients.
The list can be empty, for obvious reasons.
.TP
.B \fBauth\fP: \fBVncPrimaryAuth\fP
The current authentication type used by the non\-websockets servers
.TP
.B \fBvencrypt\fP: \fBVncVencryptSubAuth\fP (optional)
The vencrypt authentication type used by the servers,
only specified in case auth == vencrypt.
.TP
.B \fBdisplay\fP: \fBstring\fP (optional)
The display device the vnc server is linked to.
.UNINDENT
.SS Since
.sp
2.3
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBquery\-vnc\fP (Command)
.sp
Returns information about the current VNC server
.SS Returns
.sp
\fBVncInfo\fP
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-vnc" }
<\- { "return": {
         "enabled":true,
         "host":"0.0.0.0",
         "service":"50402",
         "auth":"vnc",
         "family":"ipv4",
         "clients":[
            {
               "host":"127.0.0.1",
               "service":"50401",
               "family":"ipv4",
               "websocket":false
            }
         ]
      }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBquery\-vnc\-servers\fP (Command)
.sp
Returns a list of vnc servers.  The list can be empty.
.SS Returns
.sp
a list of \fBVncInfo2\fP
.SS Since
.sp
2.3
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBchange\-vnc\-password\fP (Command)
.sp
Change the VNC server password.
.SS Arguments
.INDENT 0.0
.TP
.B \fBpassword\fP: \fBstring\fP
the new password to use with VNC authentication
.UNINDENT
.SS Since
.sp
1.1
.SS Notes
.sp
An empty password in this command will set the password to the empty
string.  Existing clients are unaffected by executing this command.
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVNC_CONNECTED\fP (Event)
.sp
Emitted when a VNC client establishes a connection
.SS Arguments
.INDENT 0.0
.TP
.B \fBserver\fP: \fBVncServerInfo\fP
server information
.TP
.B \fBclient\fP: \fBVncBasicInfo\fP
client information
.UNINDENT
.SS Note
.sp
This event is emitted before any authentication takes place, thus
the authentication ID is not provided
.SS Since
.sp
0.13
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "VNC_CONNECTED",
     "data": {
           "server": { "auth": "sasl", "family": "ipv4", "websocket": false,
                       "service": "5901", "host": "0.0.0.0" },
           "client": { "family": "ipv4", "service": "58425",
                       "host": "127.0.0.1", "websocket": false } },
     "timestamp": { "seconds": 1262976601, "microseconds": 975795 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVNC_INITIALIZED\fP (Event)
.sp
Emitted after authentication takes place (if any) and the VNC session is
made active
.SS Arguments
.INDENT 0.0
.TP
.B \fBserver\fP: \fBVncServerInfo\fP
server information
.TP
.B \fBclient\fP: \fBVncClientInfo\fP
client information
.UNINDENT
.SS Since
.sp
0.13
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\-  { "event": "VNC_INITIALIZED",
      "data": {
           "server": { "auth": "sasl", "family": "ipv4", "websocket": false,
                       "service": "5901", "host": "0.0.0.0"},
           "client": { "family": "ipv4", "service": "46089", "websocket": false,
                       "host": "127.0.0.1", "sasl_username": "luiz" } },
      "timestamp": { "seconds": 1263475302, "microseconds": 150772 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_VNC\fP
.SS \fBVNC_DISCONNECTED\fP (Event)
.sp
Emitted when the connection is closed
.SS Arguments
.INDENT 0.0
.TP
.B \fBserver\fP: \fBVncServerInfo\fP
server information
.TP
.B \fBclient\fP: \fBVncClientInfo\fP
client information
.UNINDENT
.SS Since
.sp
0.13
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "VNC_DISCONNECTED",
     "data": {
           "server": { "auth": "sasl", "family": "ipv4", "websocket": false,
                       "service": "5901", "host": "0.0.0.0" },
           "client": { "family": "ipv4", "service": "58425", "websocket": false,
                       "host": "127.0.0.1", "sasl_username": "luiz" } },
     "timestamp": { "seconds": 1262976601, "microseconds": 975795 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_VNC\fP
.SH INPUT
.SS \fBMouseInfo\fP (Object)
.sp
Information about a mouse device.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the name of the mouse device
.TP
.B \fBindex\fP: \fBint\fP
the index of the mouse device
.TP
.B \fBcurrent\fP: \fBboolean\fP
true if this device is currently receiving mouse events
.TP
.B \fBabsolute\fP: \fBboolean\fP
true if this device supports absolute coordinates as input
.UNINDENT
.SS Since
.sp
0.14
.SS \fBquery\-mice\fP (Command)
.sp
Returns information about each active mouse device
.SS Returns
.sp
a list of \fBMouseInfo\fP for each device
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-mice" }
<\- { "return": [
         {
            "name":"QEMU Microsoft Mouse",
            "index":0,
            "current":false,
            "absolute":false
         },
         {
            "name":"QEMU PS/2 Mouse",
            "index":1,
            "current":true,
            "absolute":true
         }
      ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBQKeyCode\fP (Enum)
.sp
An enumeration of key name.
.sp
This is used by the \fBsend\-key\fP command.
.SS Values
.INDENT 0.0
.TP
.B \fBunmapped\fP
since 2.0
.TP
.B \fBpause\fP
since 2.0
.TP
.B \fBro\fP
since 2.4
.TP
.B \fBkp_comma\fP
since 2.4
.TP
.B \fBkp_equals\fP
since 2.6
.TP
.B \fBpower\fP
since 2.6
.TP
.B \fBhiragana\fP
since 2.9
.TP
.B \fBhenkan\fP
since 2.9
.TP
.B \fByen\fP
since 2.9
.TP
.B \fBsleep\fP
since 2.10
.TP
.B \fBwake\fP
since 2.10
.TP
.B \fBaudionext\fP
since 2.10
.TP
.B \fBaudioprev\fP
since 2.10
.TP
.B \fBaudiostop\fP
since 2.10
.TP
.B \fBaudioplay\fP
since 2.10
.TP
.B \fBaudiomute\fP
since 2.10
.TP
.B \fBvolumeup\fP
since 2.10
.TP
.B \fBvolumedown\fP
since 2.10
.TP
.B \fBmediaselect\fP
since 2.10
.TP
.B \fBmail\fP
since 2.10
.TP
.B \fBcalculator\fP
since 2.10
.TP
.B \fBcomputer\fP
since 2.10
.TP
.B \fBac_home\fP
since 2.10
.TP
.B \fBac_back\fP
since 2.10
.TP
.B \fBac_forward\fP
since 2.10
.TP
.B \fBac_refresh\fP
since 2.10
.TP
.B \fBac_bookmarks\fP
since 2.10
.TP
.B \fBmuhenkan\fP
since 2.12
.TP
.B \fBkatakanahiragana\fP
since 2.12
.TP
.B \fBlang1\fP
since 6.1
.TP
.B \fBlang2\fP
since 6.1
.TP
.B \fBshift\fP
Not documented
.TP
.B \fBshift_r\fP
Not documented
.TP
.B \fBalt\fP
Not documented
.TP
.B \fBalt_r\fP
Not documented
.TP
.B \fBctrl\fP
Not documented
.TP
.B \fBctrl_r\fP
Not documented
.TP
.B \fBmenu\fP
Not documented
.TP
.B \fBesc\fP
Not documented
.TP
.B \fB1\fP
Not documented
.TP
.B \fB2\fP
Not documented
.TP
.B \fB3\fP
Not documented
.TP
.B \fB4\fP
Not documented
.TP
.B \fB5\fP
Not documented
.TP
.B \fB6\fP
Not documented
.TP
.B \fB7\fP
Not documented
.TP
.B \fB8\fP
Not documented
.TP
.B \fB9\fP
Not documented
.TP
.B \fB0\fP
Not documented
.TP
.B \fBminus\fP
Not documented
.TP
.B \fBequal\fP
Not documented
.TP
.B \fBbackspace\fP
Not documented
.TP
.B \fBtab\fP
Not documented
.TP
.B \fBq\fP
Not documented
.TP
.B \fBw\fP
Not documented
.TP
.B \fBe\fP
Not documented
.TP
.B \fBr\fP
Not documented
.TP
.B \fBt\fP
Not documented
.TP
.B \fBy\fP
Not documented
.TP
.B \fBu\fP
Not documented
.TP
.B \fBi\fP
Not documented
.TP
.B \fBo\fP
Not documented
.TP
.B \fBp\fP
Not documented
.TP
.B \fBbracket_left\fP
Not documented
.TP
.B \fBbracket_right\fP
Not documented
.TP
.B \fBret\fP
Not documented
.TP
.B \fBa\fP
Not documented
.TP
.B \fBs\fP
Not documented
.TP
.B \fBd\fP
Not documented
.TP
.B \fBf\fP
Not documented
.TP
.B \fBg\fP
Not documented
.TP
.B \fBh\fP
Not documented
.TP
.B \fBj\fP
Not documented
.TP
.B \fBk\fP
Not documented
.TP
.B \fBl\fP
Not documented
.TP
.B \fBsemicolon\fP
Not documented
.TP
.B \fBapostrophe\fP
Not documented
.TP
.B \fBgrave_accent\fP
Not documented
.TP
.B \fBbackslash\fP
Not documented
.TP
.B \fBz\fP
Not documented
.TP
.B \fBx\fP
Not documented
.TP
.B \fBc\fP
Not documented
.TP
.B \fBv\fP
Not documented
.TP
.B \fBb\fP
Not documented
.TP
.B \fBn\fP
Not documented
.TP
.B \fBm\fP
Not documented
.TP
.B \fBcomma\fP
Not documented
.TP
.B \fBdot\fP
Not documented
.TP
.B \fBslash\fP
Not documented
.TP
.B \fBasterisk\fP
Not documented
.TP
.B \fBspc\fP
Not documented
.TP
.B \fBcaps_lock\fP
Not documented
.TP
.B \fBf1\fP
Not documented
.TP
.B \fBf2\fP
Not documented
.TP
.B \fBf3\fP
Not documented
.TP
.B \fBf4\fP
Not documented
.TP
.B \fBf5\fP
Not documented
.TP
.B \fBf6\fP
Not documented
.TP
.B \fBf7\fP
Not documented
.TP
.B \fBf8\fP
Not documented
.TP
.B \fBf9\fP
Not documented
.TP
.B \fBf10\fP
Not documented
.TP
.B \fBnum_lock\fP
Not documented
.TP
.B \fBscroll_lock\fP
Not documented
.TP
.B \fBkp_divide\fP
Not documented
.TP
.B \fBkp_multiply\fP
Not documented
.TP
.B \fBkp_subtract\fP
Not documented
.TP
.B \fBkp_add\fP
Not documented
.TP
.B \fBkp_enter\fP
Not documented
.TP
.B \fBkp_decimal\fP
Not documented
.TP
.B \fBsysrq\fP
Not documented
.TP
.B \fBkp_0\fP
Not documented
.TP
.B \fBkp_1\fP
Not documented
.TP
.B \fBkp_2\fP
Not documented
.TP
.B \fBkp_3\fP
Not documented
.TP
.B \fBkp_4\fP
Not documented
.TP
.B \fBkp_5\fP
Not documented
.TP
.B \fBkp_6\fP
Not documented
.TP
.B \fBkp_7\fP
Not documented
.TP
.B \fBkp_8\fP
Not documented
.TP
.B \fBkp_9\fP
Not documented
.TP
.B \fBless\fP
Not documented
.TP
.B \fBf11\fP
Not documented
.TP
.B \fBf12\fP
Not documented
.TP
.B \fBprint\fP
Not documented
.TP
.B \fBhome\fP
Not documented
.TP
.B \fBpgup\fP
Not documented
.TP
.B \fBpgdn\fP
Not documented
.TP
.B \fBend\fP
Not documented
.TP
.B \fBleft\fP
Not documented
.TP
.B \fBup\fP
Not documented
.TP
.B \fBdown\fP
Not documented
.TP
.B \fBright\fP
Not documented
.TP
.B \fBinsert\fP
Not documented
.TP
.B \fBdelete\fP
Not documented
.TP
.B \fBstop\fP
Not documented
.TP
.B \fBagain\fP
Not documented
.TP
.B \fBprops\fP
Not documented
.TP
.B \fBundo\fP
Not documented
.TP
.B \fBfront\fP
Not documented
.TP
.B \fBcopy\fP
Not documented
.TP
.B \fBopen\fP
Not documented
.TP
.B \fBpaste\fP
Not documented
.TP
.B \fBfind\fP
Not documented
.TP
.B \fBcut\fP
Not documented
.TP
.B \fBlf\fP
Not documented
.TP
.B \fBhelp\fP
Not documented
.TP
.B \fBmeta_l\fP
Not documented
.TP
.B \fBmeta_r\fP
Not documented
.TP
.B \fBcompose\fP
Not documented
.UNINDENT
\(aqsysrq\(aq was mistakenly added to hack around the fact that
the ps2 driver was not generating correct scancodes sequences
when \(aqalt+print\(aq was pressed. This flaw is now fixed and the
\(aqsysrq\(aq key serves no further purpose. Any further use of
\(aqsysrq\(aq will be transparently changed to \(aqprint\(aq, so they
are effectively synonyms.
.SS Since
.sp
1.3
.SS \fBKeyValueKind\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBnumber\fP
Not documented
.TP
.B \fBqcode\fP
Not documented
.UNINDENT
.SS Since
.sp
1.3
.SS \fBIntWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBint\fP
Not documented
.UNINDENT
.SS Since
.sp
1.3
.SS \fBQKeyCodeWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBQKeyCode\fP
Not documented
.UNINDENT
.SS Since
.sp
1.3
.SS \fBKeyValue\fP (Object)
.sp
Represents a keyboard key.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBKeyValueKind\fP
Not documented
.TP
.B The members of \fBIntWrapper\fP when \fBtype\fP is \fB"number"\fP
.TP
.B The members of \fBQKeyCodeWrapper\fP when \fBtype\fP is \fB"qcode"\fP
.UNINDENT
.SS Since
.sp
1.3
.SS \fBsend\-key\fP (Command)
.sp
Send keys to guest.
.SS Arguments
.INDENT 0.0
.TP
.B \fBkeys\fP: \fBarray of KeyValue\fP
An array of \fBKeyValue\fP elements. All \fBKeyValues\fP in this array are
simultaneously sent to the guest. A \fBKeyValue\fP\&.number value is sent
directly to the guest, while \fBKeyValue\fP\&.qcode must be a valid
\fBQKeyCode\fP value
.TP
.B \fBhold\-time\fP: \fBint\fP (optional)
time to delay key up events, milliseconds. Defaults
to 100
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If key is unknown or redundant, InvalidParameter
.UNINDENT
.SS Since
.sp
1.3
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "send\-key",
     "arguments": { "keys": [ { "type": "qcode", "data": "ctrl" },
                              { "type": "qcode", "data": "alt" },
                              { "type": "qcode", "data": "delete" } ] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBInputButton\fP (Enum)
.sp
Button of a pointer input device (mouse, tablet).
.SS Values
.INDENT 0.0
.TP
.B \fBside\fP
front side button of a 5\-button mouse (since 2.9)
.TP
.B \fBextra\fP
rear side button of a 5\-button mouse (since 2.9)
.TP
.B \fBleft\fP
Not documented
.TP
.B \fBmiddle\fP
Not documented
.TP
.B \fBright\fP
Not documented
.TP
.B \fBwheel\-up\fP
Not documented
.TP
.B \fBwheel\-down\fP
Not documented
.TP
.B \fBwheel\-left\fP
Not documented
.TP
.B \fBwheel\-right\fP
Not documented
.UNINDENT
.SS Since
.sp
2.0
.SS \fBInputAxis\fP (Enum)
.sp
Position axis of a pointer input device (mouse, tablet).
.SS Values
.INDENT 0.0
.TP
.B \fBx\fP
Not documented
.TP
.B \fBy\fP
Not documented
.UNINDENT
.SS Since
.sp
2.0
.SS \fBInputKeyEvent\fP (Object)
.sp
Keyboard input event.
.SS Members
.INDENT 0.0
.TP
.B \fBkey\fP: \fBKeyValue\fP
Which key this event is for.
.TP
.B \fBdown\fP: \fBboolean\fP
True for key\-down and false for key\-up events.
.UNINDENT
.SS Since
.sp
2.0
.SS \fBInputBtnEvent\fP (Object)
.sp
Pointer button input event.
.SS Members
.INDENT 0.0
.TP
.B \fBbutton\fP: \fBInputButton\fP
Which button this event is for.
.TP
.B \fBdown\fP: \fBboolean\fP
True for key\-down and false for key\-up events.
.UNINDENT
.SS Since
.sp
2.0
.SS \fBInputMoveEvent\fP (Object)
.sp
Pointer motion input event.
.SS Members
.INDENT 0.0
.TP
.B \fBaxis\fP: \fBInputAxis\fP
Which axis is referenced by \fBvalue\fP\&.
.TP
.B \fBvalue\fP: \fBint\fP
Pointer position.  For absolute coordinates the
valid range is 0 \-> 0x7ffff
.UNINDENT
.SS Since
.sp
2.0
.SS \fBInputEventKind\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBkey\fP
Not documented
.TP
.B \fBbtn\fP
Not documented
.TP
.B \fBrel\fP
Not documented
.TP
.B \fBabs\fP
Not documented
.UNINDENT
.SS Since
.sp
2.0
.SS \fBInputKeyEventWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBInputKeyEvent\fP
Not documented
.UNINDENT
.SS Since
.sp
2.0
.SS \fBInputBtnEventWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBInputBtnEvent\fP
Not documented
.UNINDENT
.SS Since
.sp
2.0
.SS \fBInputMoveEventWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBInputMoveEvent\fP
Not documented
.UNINDENT
.SS Since
.sp
2.0
.SS \fBInputEvent\fP (Object)
.sp
Input event union.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBInputEventKind\fP
the input type, one of:
.INDENT 7.0
.IP \(bu 2
\(aqkey\(aq: Input event of Keyboard
.IP \(bu 2
\(aqbtn\(aq: Input event of pointer buttons
.IP \(bu 2
\(aqrel\(aq: Input event of relative pointer motion
.IP \(bu 2
\(aqabs\(aq: Input event of absolute pointer motion
.UNINDENT
.TP
.B The members of \fBInputKeyEventWrapper\fP when \fBtype\fP is \fB"key"\fP
.TP
.B The members of \fBInputBtnEventWrapper\fP when \fBtype\fP is \fB"btn"\fP
.TP
.B The members of \fBInputMoveEventWrapper\fP when \fBtype\fP is \fB"rel"\fP
.TP
.B The members of \fBInputMoveEventWrapper\fP when \fBtype\fP is \fB"abs"\fP
.UNINDENT
.SS Since
.sp
2.0
.SS \fBinput\-send\-event\fP (Command)
.sp
Send input event(s) to guest.
.sp
The \fBdevice\fP and \fBhead\fP parameters can be used to send the input event
to specific input devices in case (a) multiple input devices of the
same kind are added to the virtual machine and (b) you have
configured input routing (see docs/multiseat.txt) for those input
devices.  The parameters work exactly like the device and head
properties of input devices.  If \fBdevice\fP is missing, only devices
that have no input routing config are admissible.  If \fBdevice\fP is
specified, both input devices with and without input routing config
are admissible, but devices with input routing config take
precedence.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
display device to send event(s) to.
.TP
.B \fBhead\fP: \fBint\fP (optional)
head to send event(s) to, in case the
display device supports multiple scanouts.
.TP
.B \fBevents\fP: \fBarray of InputEvent\fP
List of InputEvent union.
.UNINDENT
.SS Returns
.sp
Nothing on success.
.SS Since
.sp
2.6
.SS Note
.sp
The consoles are visible in the qom tree, under
/backend/console[$index]. They have a device link and head property,
so it is possible to map which console belongs to which device and
display.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Press left mouse button.

\-> { "execute": "input\-send\-event",
    "arguments": { "device": "video0",
                   "events": [ { "type": "btn",
                   "data" : { "down": true, "button": "left" } } ] } }
<\- { "return": {} }

\-> { "execute": "input\-send\-event",
    "arguments": { "device": "video0",
                   "events": [ { "type": "btn",
                   "data" : { "down": false, "button": "left" } } ] } }
<\- { "return": {} }

2. Press ctrl\-alt\-del.

\-> { "execute": "input\-send\-event",
     "arguments": { "events": [
        { "type": "key", "data" : { "down": true,
          "key": {"type": "qcode", "data": "ctrl" } } },
        { "type": "key", "data" : { "down": true,
          "key": {"type": "qcode", "data": "alt" } } },
        { "type": "key", "data" : { "down": true,
          "key": {"type": "qcode", "data": "delete" } } } ] } }
<\- { "return": {} }

3. Move mouse pointer to absolute coordinates (20000, 400).

\-> { "execute": "input\-send\-event" ,
  "arguments": { "events": [
               { "type": "abs", "data" : { "axis": "x", "value" : 20000 } },
               { "type": "abs", "data" : { "axis": "y", "value" : 400 } } ] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDisplayGTK\fP (Object)
.sp
GTK display options.
.SS Members
.INDENT 0.0
.TP
.B \fBgrab\-on\-hover\fP: \fBboolean\fP (optional)
Grab keyboard input on mouse hover.
.TP
.B \fBzoom\-to\-fit\fP: \fBboolean\fP (optional)
Zoom guest display to fit into the host window.  When
turned off the host window will be resized instead.
In case the display device can notify the guest on
window resizes (virtio\-gpu) this will default to "on",
assuming the guest will resize the display to match
the window size then.  Otherwise it defaults to "off".
Since 3.1
.TP
.B \fBshow\-tabs\fP: \fBboolean\fP (optional)
Display the tab bar for switching between the various graphical
interfaces (e.g. VGA and virtual console character devices)
by default.
Since 7.1
.TP
.B \fBshow\-menubar\fP: \fBboolean\fP (optional)
Display the main window menubar. Defaults to "on".
Since 8.0
.UNINDENT
.SS Since
.sp
2.12
.SS \fBDisplayEGLHeadless\fP (Object)
.sp
EGL headless display options.
.SS Members
.INDENT 0.0
.TP
.B \fBrendernode\fP: \fBstring\fP (optional)
Which DRM render node should be used. Default is the first
available node on the host.
.UNINDENT
.SS Since
.sp
3.1
.SS \fBDisplayDBus\fP (Object)
.sp
DBus display options.
.SS Members
.INDENT 0.0
.TP
.B \fBaddr\fP: \fBstring\fP (optional)
The D\-Bus bus address (default to the session bus).
.TP
.B \fBrendernode\fP: \fBstring\fP (optional)
Which DRM render node should be used. Default is the first
available node on the host.
.TP
.B \fBp2p\fP: \fBboolean\fP (optional)
Whether to use peer\-to\-peer connections (accepted through
\fBadd_client\fP).
.TP
.B \fBaudiodev\fP: \fBstring\fP (optional)
Use the specified DBus audiodev to export audio.
.UNINDENT
.SS Since
.sp
7.0
.SS \fBDisplayGLMode\fP (Enum)
.sp
Display OpenGL mode.
.SS Values
.INDENT 0.0
.TP
.B \fBoff\fP
Disable OpenGL (default).
.TP
.B \fBon\fP
Use OpenGL, pick context type automatically.
Would better be named \(aqauto\(aq but is called \(aqon\(aq for backward
compatibility with bool type.
.TP
.B \fBcore\fP
Use OpenGL with Core (desktop) Context.
.TP
.B \fBes\fP
Use OpenGL with ES (embedded systems) Context.
.UNINDENT
.SS Since
.sp
3.0
.SS \fBDisplayCurses\fP (Object)
.sp
Curses display options.
.SS Members
.INDENT 0.0
.TP
.B \fBcharset\fP: \fBstring\fP (optional)
Font charset used by guest (default: CP437).
.UNINDENT
.SS Since
.sp
4.0
.SS \fBDisplayCocoa\fP (Object)
.sp
Cocoa display options.
.SS Members
.INDENT 0.0
.TP
.B \fBleft\-command\-key\fP: \fBboolean\fP (optional)
Enable/disable forwarding of left command key to
guest. Allows command\-tab window switching on the
host without sending this key to the guest when
"off". Defaults to "on"
.TP
.B \fBfull\-grab\fP: \fBboolean\fP (optional)
Capture all key presses, including system combos. This
requires accessibility permissions, since it performs
a global grab on key events. (default: off)
See \fI\%https://support.apple.com/en\-in/guide/mac\-help/mh32356/mac\fP
.TP
.B \fBswap\-opt\-cmd\fP: \fBboolean\fP (optional)
Swap the Option and Command keys so that their key codes match
their position on non\-Mac keyboards and you can use Meta/Super
and Alt where you expect them. (default: off)
.UNINDENT
.SS Since
.sp
7.0
.SS \fBHotKeyMod\fP (Enum)
.sp
Set of modifier keys that need to be held for shortcut key actions.
.SS Values
.INDENT 0.0
.TP
.B \fBlctrl\-lalt\fP
Not documented
.TP
.B \fBlshift\-lctrl\-lalt\fP
Not documented
.TP
.B \fBrctrl\fP
Not documented
.UNINDENT
.SS Since
.sp
7.1
.SS \fBDisplaySDL\fP (Object)
.sp
SDL2 display options.
.SS Members
.INDENT 0.0
.TP
.B \fBgrab\-mod\fP: \fBHotKeyMod\fP (optional)
Modifier keys that should be pressed together with the
"G" key to release the mouse grab.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBDisplayType\fP (Enum)
.sp
Display (user interface) type.
.SS Values
.INDENT 0.0
.TP
.B \fBdefault\fP
The default user interface, selecting from the first available
of gtk, sdl, cocoa, and vnc.
.TP
.B \fBnone\fP
No user interface or video output display. The guest will
still see an emulated graphics card, but its output will not
be displayed to the QEMU user.
.TP
\fBgtk\fP (\fBIf: \fP\fBCONFIG_GTK\fP)
The GTK user interface.
.TP
\fBsdl\fP (\fBIf: \fP\fBCONFIG_SDL\fP)
The SDL user interface.
.TP
\fBegl\-headless\fP (\fBIf: \fP\fBCONFIG_OPENGL and CONFIG_GBM\fP)
No user interface, offload GL operations to a local
DRI device. Graphical display need to be paired with
VNC or Spice. (Since 3.1)
.TP
\fBcurses\fP (\fBIf: \fP\fBCONFIG_CURSES\fP)
Display video output via curses.  For graphics device
models which support a text mode, QEMU can display this
output using a curses/ncurses interface. Nothing is
displayed when the graphics device is in graphical mode or
if the graphics device does not support a text
mode. Generally only the VGA device models support text
mode.
.TP
\fBcocoa\fP (\fBIf: \fP\fBCONFIG_COCOA\fP)
The Cocoa user interface.
.TP
\fBspice\-app\fP (\fBIf: \fP\fBCONFIG_SPICE\fP)
Set up a Spice server and run the default associated
application to connect to it. The server will redirect
the serial console and QEMU monitors. (Since 4.0)
.TP
\fBdbus\fP (\fBIf: \fP\fBCONFIG_DBUS_DISPLAY\fP)
Start a D\-Bus service for the display. (Since 7.0)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBDisplayOptions\fP (Object)
.sp
Display (user interface) options.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBDisplayType\fP
Which DisplayType qemu should use.
.TP
.B \fBfull\-screen\fP: \fBboolean\fP (optional)
Start user interface in fullscreen mode (default: off).
.TP
.B \fBwindow\-close\fP: \fBboolean\fP (optional)
Allow to quit qemu with window close button (default: on).
.TP
.B \fBshow\-cursor\fP: \fBboolean\fP (optional)
Force showing the mouse cursor (default: off). (since: 5.0)
.TP
.B \fBgl\fP: \fBDisplayGLMode\fP (optional)
Enable OpenGL support (default: off).
.TP
The members of \fBDisplayGTK\fP when \fBtype\fP is \fB"gtk"\fP (\fBIf: \fP\fBCONFIG_GTK\fP)
.TP
The members of \fBDisplayCocoa\fP when \fBtype\fP is \fB"cocoa"\fP (\fBIf: \fP\fBCONFIG_COCOA\fP)
.TP
The members of \fBDisplayCurses\fP when \fBtype\fP is \fB"curses"\fP (\fBIf: \fP\fBCONFIG_CURSES\fP)
.TP
The members of \fBDisplayEGLHeadless\fP when \fBtype\fP is \fB"egl\-headless"\fP (\fBIf: \fP\fBCONFIG_OPENGL and CONFIG_GBM\fP)
.TP
The members of \fBDisplayDBus\fP when \fBtype\fP is \fB"dbus"\fP (\fBIf: \fP\fBCONFIG_DBUS_DISPLAY\fP)
.TP
The members of \fBDisplaySDL\fP when \fBtype\fP is \fB"sdl"\fP (\fBIf: \fP\fBCONFIG_SDL\fP)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBquery\-display\-options\fP (Command)
.sp
Returns information about display configuration
.SS Returns
.sp
\fBDisplayOptions\fP
.SS Since
.sp
3.1
.SS \fBDisplayReloadType\fP (Enum)
.sp
Available DisplayReload types.
.SS Values
.INDENT 0.0
.TP
.B \fBvnc\fP
VNC display
.UNINDENT
.SS Since
.sp
6.0
.SS \fBDisplayReloadOptionsVNC\fP (Object)
.sp
Specify the VNC reload options.
.SS Members
.INDENT 0.0
.TP
.B \fBtls\-certs\fP: \fBboolean\fP (optional)
reload tls certs or not.
.UNINDENT
.SS Since
.sp
6.0
.SS \fBDisplayReloadOptions\fP (Object)
.sp
Options of the display configuration reload.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBDisplayReloadType\fP
Specify the display type.
.TP
.B The members of \fBDisplayReloadOptionsVNC\fP when \fBtype\fP is \fB"vnc"\fP
.UNINDENT
.SS Since
.sp
6.0
.SS \fBdisplay\-reload\fP (Command)
.sp
Reload display configuration.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBDisplayReloadOptions\fP
.UNINDENT
.SS Returns
.sp
Nothing on success.
.SS Since
.sp
6.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "display\-reload",
     "arguments": { "type": "vnc", "tls\-certs": true  } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDisplayUpdateType\fP (Enum)
.sp
Available DisplayUpdate types.
.SS Values
.INDENT 0.0
.TP
.B \fBvnc\fP
VNC display
.UNINDENT
.SS Since
.sp
7.1
.SS \fBDisplayUpdateOptionsVNC\fP (Object)
.sp
Specify the VNC reload options.
.SS Members
.INDENT 0.0
.TP
.B \fBaddresses\fP: \fBarray of SocketAddress\fP (optional)
If specified, change set of addresses
to listen for connections. Addresses configured
for websockets are not touched.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBDisplayUpdateOptions\fP (Object)
.sp
Options of the display configuration reload.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBDisplayUpdateType\fP
Specify the display type.
.TP
.B The members of \fBDisplayUpdateOptionsVNC\fP when \fBtype\fP is \fB"vnc"\fP
.UNINDENT
.SS Since
.sp
7.1
.SS \fBdisplay\-update\fP (Command)
.sp
Update display configuration.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBDisplayUpdateOptions\fP
.UNINDENT
.SS Returns
.sp
Nothing on success.
.SS Since
.sp
7.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "display\-update",
     "arguments": { "type": "vnc", "addresses":
                    [ { "type": "inet", "host": "0.0.0.0",
                        "port": "5901" } ] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH USER AUTHORIZATION
.SS \fBQAuthZListPolicy\fP (Enum)
.sp
The authorization policy result
.SS Values
.INDENT 0.0
.TP
.B \fBdeny\fP
deny access
.TP
.B \fBallow\fP
allow access
.UNINDENT
.SS Since
.sp
4.0
.SS \fBQAuthZListFormat\fP (Enum)
.sp
The authorization policy match format
.SS Values
.INDENT 0.0
.TP
.B \fBexact\fP
an exact string match
.TP
.B \fBglob\fP
string with ? and * shell wildcard support
.UNINDENT
.SS Since
.sp
4.0
.SS \fBQAuthZListRule\fP (Object)
.sp
A single authorization rule.
.SS Members
.INDENT 0.0
.TP
.B \fBmatch\fP: \fBstring\fP
a string or glob to match against a user identity
.TP
.B \fBpolicy\fP: \fBQAuthZListPolicy\fP
the result to return if \fBmatch\fP evaluates to true
.TP
.B \fBformat\fP: \fBQAuthZListFormat\fP (optional)
the format of the \fBmatch\fP rule (default \(aqexact\(aq)
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAuthZListProperties\fP (Object)
.sp
Properties for authz\-list objects.
.SS Members
.INDENT 0.0
.TP
.B \fBpolicy\fP: \fBQAuthZListPolicy\fP (optional)
Default policy to apply when no rule matches (default: deny)
.TP
.B \fBrules\fP: \fBarray of QAuthZListRule\fP (optional)
Authorization rules based on matching user
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAuthZListFileProperties\fP (Object)
.sp
Properties for authz\-listfile objects.
.SS Members
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
File name to load the configuration from. The file must
contain valid JSON for AuthZListProperties.
.TP
.B \fBrefresh\fP: \fBboolean\fP (optional)
If true, inotify is used to monitor the file, automatically
reloading changes. If an error occurs during reloading, all
authorizations will fail until the file is next successfully
loaded. (default: true if the binary was built with
CONFIG_INOTIFY1, false otherwise)
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAuthZPAMProperties\fP (Object)
.sp
Properties for authz\-pam objects.
.SS Members
.INDENT 0.0
.TP
.B \fBservice\fP: \fBstring\fP
PAM service name to use for authorization
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAuthZSimpleProperties\fP (Object)
.sp
Properties for authz\-simple objects.
.SS Members
.INDENT 0.0
.TP
.B \fBidentity\fP: \fBstring\fP
Identifies the allowed user. Its format depends on the network
service that authorization object is associated with. For
authorizing based on TLS x509 certificates, the identity must be
the x509 distinguished name.
.UNINDENT
.SS Since
.sp
4.0
.SH MIGRATION
.SS \fBMigrationStats\fP (Object)
.sp
Detailed migration status.
.SS Members
.INDENT 0.0
.TP
.B \fBtransferred\fP: \fBint\fP
amount of bytes already transferred to the target VM
.TP
.B \fBremaining\fP: \fBint\fP
amount of bytes remaining to be transferred to the target VM
.TP
.B \fBtotal\fP: \fBint\fP
total amount of bytes involved in the migration process
.TP
.B \fBduplicate\fP: \fBint\fP
number of duplicate (zero) pages (since 1.2)
.TP
.B \fBskipped\fP: \fBint\fP
number of skipped zero pages (since 1.5)
.TP
.B \fBnormal\fP: \fBint\fP
number of normal pages (since 1.2)
.TP
.B \fBnormal\-bytes\fP: \fBint\fP
number of normal bytes sent (since 1.2)
.TP
.B \fBdirty\-pages\-rate\fP: \fBint\fP
number of pages dirtied by second by the
guest (since 1.3)
.TP
.B \fBmbps\fP: \fBnumber\fP
throughput in megabits/sec. (since 1.6)
.TP
.B \fBdirty\-sync\-count\fP: \fBint\fP
number of times that dirty ram was synchronized (since 2.1)
.TP
.B \fBpostcopy\-requests\fP: \fBint\fP
The number of page requests received from the destination
(since 2.7)
.TP
.B \fBpage\-size\fP: \fBint\fP
The number of bytes per page for the various page\-based
statistics (since 2.10)
.TP
.B \fBmultifd\-bytes\fP: \fBint\fP
The number of bytes sent through multifd (since 3.0)
.TP
.B \fBpages\-per\-second\fP: \fBint\fP
the number of memory pages transferred per second
(Since 4.0)
.TP
.B \fBprecopy\-bytes\fP: \fBint\fP
The number of bytes sent in the pre\-copy phase
(since 7.0).
.TP
.B \fBdowntime\-bytes\fP: \fBint\fP
The number of bytes sent while the guest is paused
(since 7.0).
.TP
.B \fBpostcopy\-bytes\fP: \fBint\fP
The number of bytes sent during the post\-copy phase
(since 7.0).
.TP
.B \fBdirty\-sync\-missed\-zero\-copy\fP: \fBint\fP
Number of times dirty RAM synchronization could
not avoid copying dirty pages. This is between
0 and \fBdirty\-sync\-count\fP * \fBmultifd\-channels\fP\&.
(since 7.1)
.UNINDENT
.SS Since
.sp
0.14
.SS \fBXBZRLECacheStats\fP (Object)
.sp
Detailed XBZRLE migration cache statistics
.SS Members
.INDENT 0.0
.TP
.B \fBcache\-size\fP: \fBint\fP
XBZRLE cache size
.TP
.B \fBbytes\fP: \fBint\fP
amount of bytes already transferred to the target VM
.TP
.B \fBpages\fP: \fBint\fP
amount of pages transferred to the target VM
.TP
.B \fBcache\-miss\fP: \fBint\fP
number of cache miss
.TP
.B \fBcache\-miss\-rate\fP: \fBnumber\fP
rate of cache miss (since 2.1)
.TP
.B \fBencoding\-rate\fP: \fBnumber\fP
rate of encoded bytes (since 5.1)
.TP
.B \fBoverflow\fP: \fBint\fP
number of overflows
.UNINDENT
.SS Since
.sp
1.2
.SS \fBCompressionStats\fP (Object)
.sp
Detailed migration compression statistics
.SS Members
.INDENT 0.0
.TP
.B \fBpages\fP: \fBint\fP
amount of pages compressed and transferred to the target VM
.TP
.B \fBbusy\fP: \fBint\fP
count of times that no free thread was available to compress data
.TP
.B \fBbusy\-rate\fP: \fBnumber\fP
rate of thread busy
.TP
.B \fBcompressed\-size\fP: \fBint\fP
amount of bytes after compression
.TP
.B \fBcompression\-rate\fP: \fBnumber\fP
rate of compressed size
.UNINDENT
.SS Since
.sp
3.1
.SS \fBMigrationStatus\fP (Enum)
.sp
An enumeration of migration status.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
no migration has ever happened.
.TP
.B \fBsetup\fP
migration process has been initiated.
.TP
.B \fBcancelling\fP
in the process of cancelling migration.
.TP
.B \fBcancelled\fP
cancelling migration is finished.
.TP
.B \fBactive\fP
in the process of doing migration.
.TP
.B \fBpostcopy\-active\fP
like active, but now in postcopy mode. (since 2.5)
.TP
.B \fBpostcopy\-paused\fP
during postcopy but paused. (since 3.0)
.TP
.B \fBpostcopy\-recover\fP
trying to recover from a paused postcopy. (since 3.0)
.TP
.B \fBcompleted\fP
migration is finished.
.TP
.B \fBfailed\fP
some error occurred during migration process.
.TP
.B \fBcolo\fP
VM is in the process of fault tolerance, VM can not get into this
state unless colo capability is enabled for migration. (since 2.8)
.TP
.B \fBpre\-switchover\fP
Paused before device serialisation. (since 2.11)
.TP
.B \fBdevice\fP
During device serialisation when pause\-before\-switchover is enabled
(since 2.11)
.TP
.B \fBwait\-unplug\fP
wait for device unplug request by guest OS to be completed.
(since 4.2)
.UNINDENT
.SS Since
.sp
2.3
.SS \fBVfioStats\fP (Object)
.sp
Detailed VFIO devices migration statistics
.SS Members
.INDENT 0.0
.TP
.B \fBtransferred\fP: \fBint\fP
amount of bytes transferred to the target VM by VFIO devices
.UNINDENT
.SS Since
.sp
5.2
.SS \fBMigrationInfo\fP (Object)
.sp
Information about current migration process.
.SS Members
.INDENT 0.0
.TP
.B \fBstatus\fP: \fBMigrationStatus\fP (optional)
\fBMigrationStatus\fP describing the current migration status.
If this field is not returned, no migration process
has been initiated
.TP
.B \fBram\fP: \fBMigrationStats\fP (optional)
\fBMigrationStats\fP containing detailed migration
status, only returned if status is \(aqactive\(aq or
\(aqcompleted\(aq(since 1.2)
.TP
.B \fBdisk\fP: \fBMigrationStats\fP (optional)
\fBMigrationStats\fP containing detailed disk migration
status, only returned if status is \(aqactive\(aq and it is a block
migration
.TP
.B \fBxbzrle\-cache\fP: \fBXBZRLECacheStats\fP (optional)
\fBXBZRLECacheStats\fP containing detailed XBZRLE
migration statistics, only returned if XBZRLE feature is on and
status is \(aqactive\(aq or \(aqcompleted\(aq (since 1.2)
.TP
.B \fBtotal\-time\fP: \fBint\fP (optional)
total amount of milliseconds since migration started.
If migration has ended, it returns the total migration
time. (since 1.2)
.TP
.B \fBdowntime\fP: \fBint\fP (optional)
only present when migration finishes correctly
total downtime in milliseconds for the guest.
(since 1.3)
.TP
.B \fBexpected\-downtime\fP: \fBint\fP (optional)
only present while migration is active
expected downtime in milliseconds for the guest in last walk
of the dirty bitmap. (since 1.3)
.TP
.B \fBsetup\-time\fP: \fBint\fP (optional)
amount of setup time in milliseconds \fIbefore\fP the
iterations begin but \fIafter\fP the QMP command is issued. This is designed
to provide an accounting of any activities (such as RDMA pinning) which
may be expensive, but do not actually occur during the iterative
migration rounds themselves. (since 1.6)
.TP
.B \fBcpu\-throttle\-percentage\fP: \fBint\fP (optional)
percentage of time guest cpus are being
throttled during auto\-converge. This is only present when auto\-converge
has started throttling guest cpus. (Since 2.7)
.TP
.B \fBerror\-desc\fP: \fBstring\fP (optional)
the human readable error description string, when
\fBstatus\fP is \(aqfailed\(aq. Clients should not attempt to parse the
error strings. (Since 2.7)
.TP
.B \fBpostcopy\-blocktime\fP: \fBint\fP (optional)
total time when all vCPU were blocked during postcopy
live migration. This is only present when the postcopy\-blocktime
migration capability is enabled. (Since 3.0)
.TP
.B \fBpostcopy\-vcpu\-blocktime\fP: \fBarray of int\fP (optional)
list of the postcopy blocktime per vCPU.  This is
only present when the postcopy\-blocktime migration capability
is enabled. (Since 3.0)
.TP
.B \fBcompression\fP: \fBCompressionStats\fP (optional)
migration compression statistics, only returned if compression
feature is on and status is \(aqactive\(aq or \(aqcompleted\(aq (Since 3.1)
.TP
.B \fBsocket\-address\fP: \fBarray of SocketAddress\fP (optional)
Only used for tcp, to know what the real port is (Since 4.0)
.TP
.B \fBvfio\fP: \fBVfioStats\fP (optional)
\fBVfioStats\fP containing detailed VFIO devices migration statistics,
only returned if VFIO device is present, migration is supported by all
VFIO devices and status is \(aqactive\(aq or \(aqcompleted\(aq (since 5.2)
.TP
.B \fBblocked\-reasons\fP: \fBarray of string\fP (optional)
A list of reasons an outgoing migration is blocked.
Present and non\-empty when migration is blocked.
(since 6.0)
.UNINDENT
.SS Since
.sp
0.14
.SS \fBquery\-migrate\fP (Command)
.sp
Returns information about current migration process. If migration
is active there will be another json\-object with RAM migration
status and if block migration is active another one with block
migration status.
.SS Returns
.sp
\fBMigrationInfo\fP
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Before the first migration

\-> { "execute": "query\-migrate" }
<\- { "return": {} }

2. Migration is done and has succeeded

\-> { "execute": "query\-migrate" }
<\- { "return": {
        "status": "completed",
        "total\-time":12345,
        "setup\-time":12345,
        "downtime":12345,
        "ram":{
          "transferred":123,
          "remaining":123,
          "total":246,
          "duplicate":123,
          "normal":123,
          "normal\-bytes":123456,
          "dirty\-sync\-count":15
        }
     }
   }

3. Migration is done and has failed

\-> { "execute": "query\-migrate" }
<\- { "return": { "status": "failed" } }

4. Migration is being performed and is not a block migration:

\-> { "execute": "query\-migrate" }
<\- {
      "return":{
         "status":"active",
         "total\-time":12345,
         "setup\-time":12345,
         "expected\-downtime":12345,
         "ram":{
            "transferred":123,
            "remaining":123,
            "total":246,
            "duplicate":123,
            "normal":123,
            "normal\-bytes":123456,
            "dirty\-sync\-count":15
         }
      }
   }

5. Migration is being performed and is a block migration:

\-> { "execute": "query\-migrate" }
<\- {
      "return":{
         "status":"active",
         "total\-time":12345,
         "setup\-time":12345,
         "expected\-downtime":12345,
         "ram":{
            "total":1057024,
            "remaining":1053304,
            "transferred":3720,
            "duplicate":123,
            "normal":123,
            "normal\-bytes":123456,
            "dirty\-sync\-count":15
         },
         "disk":{
            "total":20971520,
            "remaining":20880384,
            "transferred":91136
         }
      }
   }

6. Migration is being performed and XBZRLE is active:

\-> { "execute": "query\-migrate" }
<\- {
      "return":{
         "status":"active",
         "total\-time":12345,
         "setup\-time":12345,
         "expected\-downtime":12345,
         "ram":{
            "total":1057024,
            "remaining":1053304,
            "transferred":3720,
            "duplicate":10,
            "normal":3333,
            "normal\-bytes":3412992,
            "dirty\-sync\-count":15
         },
         "xbzrle\-cache":{
            "cache\-size":67108864,
            "bytes":20971520,
            "pages":2444343,
            "cache\-miss":2244,
            "cache\-miss\-rate":0.123,
            "encoding\-rate":80.1,
            "overflow":34434
         }
      }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMigrationCapability\fP (Enum)
.sp
Migration capabilities enumeration
.SS Values
.INDENT 0.0
.TP
.B \fBxbzrle\fP
Migration supports xbzrle (Xor Based Zero Run Length Encoding).
This feature allows us to minimize migration traffic for certain work
loads, by sending compressed difference of the pages
.TP
.B \fBrdma\-pin\-all\fP
Controls whether or not the entire VM memory footprint is
mlock()\(aqd on demand or all at once. Refer to docs/rdma.txt for usage.
Disabled by default. (since 2.0)
.TP
.B \fBzero\-blocks\fP
During storage migration encode blocks of zeroes efficiently. This
essentially saves 1MB of zeroes per block on the wire. Enabling requires
source and target VM to support this feature. To enable it is sufficient
to enable the capability on the source VM. The feature is disabled by
default. (since 1.6)
.TP
.B \fBcompress\fP
Use multiple compression threads to accelerate live migration.
This feature can help to reduce the migration traffic, by sending
compressed pages. Please note that if compress and xbzrle are both
on, compress only takes effect in the ram bulk stage, after that,
it will be disabled and only xbzrle takes effect, this can help to
minimize migration traffic. The feature is disabled by default.
(since 2.4 )
.TP
.B \fBevents\fP
generate events for each migration state change
(since 2.4 )
.TP
.B \fBauto\-converge\fP
If enabled, QEMU will automatically throttle down the guest
to speed up convergence of RAM migration. (since 1.6)
.TP
.B \fBpostcopy\-ram\fP
Start executing on the migration target before all of RAM has
been migrated, pulling the remaining pages along as needed. The
capacity must have the same setting on both source and target
or migration will not even start. NOTE: If the migration fails during
postcopy the VM will fail.  (since 2.6)
.TP
.B \fBx\-colo\fP
If enabled, migration will never end, and the state of the VM on the
primary side will be migrated continuously to the VM on secondary
side, this process is called COarse\-Grain LOck Stepping (COLO) for
Non\-stop Service. (since 2.8)
.TP
.B \fBrelease\-ram\fP
if enabled, qemu will free the migrated ram pages on the source
during postcopy\-ram migration. (since 2.9)
.TP
.B \fBblock\fP
If enabled, QEMU will also migrate the contents of all block
devices.  Default is disabled.  A possible alternative uses
mirror jobs to a builtin NBD server on the destination, which
offers more flexibility.
(Since 2.10)
.TP
.B \fBreturn\-path\fP
If enabled, migration will use the return path even
for precopy. (since 2.10)
.TP
.B \fBpause\-before\-switchover\fP
Pause outgoing migration before serialising device
state and before disabling block IO (since 2.11)
.TP
.B \fBmultifd\fP
Use more than one fd for migration (since 4.0)
.TP
.B \fBdirty\-bitmaps\fP
If enabled, QEMU will migrate named dirty bitmaps.
(since 2.12)
.TP
.B \fBpostcopy\-blocktime\fP
Calculate downtime for postcopy live migration
(since 3.0)
.TP
.B \fBlate\-block\-activate\fP
If enabled, the destination will not activate block
devices (and thus take locks) immediately at the end of migration.
(since 3.0)
.TP
.B \fBx\-ignore\-shared\fP
If enabled, QEMU will not migrate shared memory (since 4.0)
.TP
.B \fBvalidate\-uuid\fP
Send the UUID of the source to allow the destination
to ensure it is the same. (since 4.2)
.TP
.B \fBbackground\-snapshot\fP
If enabled, the migration stream will be a snapshot
of the VM exactly at the point when the migration
procedure starts. The VM RAM is saved with running VM.
(since 6.0)
.TP
.B \fBzero\-copy\-send\fP
Controls behavior on sending memory pages on migration.
When true, enables a zero\-copy mechanism for sending
memory pages, if host supports it.
Requires that QEMU be permitted to use locked memory
for guest RAM pages.
(since 7.1)
.TP
.B \fBpostcopy\-preempt\fP
If enabled, the migration process will allow postcopy
requests to preempt precopy stream, so postcopy requests
will be handled faster.  This is a performance feature and
should not affect the correctness of postcopy migration.
(since 7.1)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
Members \fBx\-colo\fP and \fBx\-ignore\-shared\fP are experimental.
.UNINDENT
.SS Since
.sp
1.2
.SS \fBMigrationCapabilityStatus\fP (Object)
.sp
Migration capability information
.SS Members
.INDENT 0.0
.TP
.B \fBcapability\fP: \fBMigrationCapability\fP
capability enum
.TP
.B \fBstate\fP: \fBboolean\fP
capability state bool
.UNINDENT
.SS Since
.sp
1.2
.SS \fBmigrate\-set\-capabilities\fP (Command)
.sp
Enable/Disable the following migration capabilities (like xbzrle)
.SS Arguments
.INDENT 0.0
.TP
.B \fBcapabilities\fP: \fBarray of MigrationCapabilityStatus\fP
json array of capability modifications to make
.UNINDENT
.SS Since
.sp
1.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "migrate\-set\-capabilities" , "arguments":
     { "capabilities": [ { "capability": "xbzrle", "state": true } ] } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBquery\-migrate\-capabilities\fP (Command)
.sp
Returns information about the current migration capabilities status
.SS Returns
.sp
\fBMigrationCapabilitiesStatus\fP
.SS Since
.sp
1.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-migrate\-capabilities" }
<\- { "return": [
      {"state": false, "capability": "xbzrle"},
      {"state": false, "capability": "rdma\-pin\-all"},
      {"state": false, "capability": "auto\-converge"},
      {"state": false, "capability": "zero\-blocks"},
      {"state": false, "capability": "compress"},
      {"state": true, "capability": "events"},
      {"state": false, "capability": "postcopy\-ram"},
      {"state": false, "capability": "x\-colo"}
   ]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMultiFDCompression\fP (Enum)
.sp
An enumeration of multifd compression methods.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
no compression.
.TP
.B \fBzlib\fP
use zlib compression method.
.TP
\fBzstd\fP (\fBIf: \fP\fBCONFIG_ZSTD\fP)
use zstd compression method.
.UNINDENT
.SS Since
.sp
5.0
.SS \fBBitmapMigrationBitmapAliasTransform\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBpersistent\fP: \fBboolean\fP (optional)
If present, the bitmap will be made persistent
or transient depending on this parameter.
.UNINDENT
.SS Since
.sp
6.0
.SS \fBBitmapMigrationBitmapAlias\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
The name of the bitmap.
.TP
.B \fBalias\fP: \fBstring\fP
An alias name for migration (for example the bitmap name on
the opposite site).
.TP
.B \fBtransform\fP: \fBBitmapMigrationBitmapAliasTransform\fP (optional)
Allows the modification of the migrated bitmap.
(since 6.0)
.UNINDENT
.SS Since
.sp
5.2
.SS \fBBitmapMigrationNodeAlias\fP (Object)
.sp
Maps a block node name and the bitmaps it has to aliases for dirty
bitmap migration.
.SS Members
.INDENT 0.0
.TP
.B \fBnode\-name\fP: \fBstring\fP
A block node name.
.TP
.B \fBalias\fP: \fBstring\fP
An alias block node name for migration (for example the
node name on the opposite site).
.TP
.B \fBbitmaps\fP: \fBarray of BitmapMigrationBitmapAlias\fP
Mappings for the bitmaps on this node.
.UNINDENT
.SS Since
.sp
5.2
.SS \fBMigrationParameter\fP (Enum)
.sp
Migration parameters enumeration
.SS Values
.INDENT 0.0
.TP
.B \fBannounce\-initial\fP
Initial delay (in milliseconds) before sending the first
announce (Since 4.0)
.TP
.B \fBannounce\-max\fP
Maximum delay (in milliseconds) between packets in the
announcement (Since 4.0)
.TP
.B \fBannounce\-rounds\fP
Number of self\-announce packets sent after migration
(Since 4.0)
.TP
.B \fBannounce\-step\fP
Increase in delay (in milliseconds) between subsequent
packets in the announcement (Since 4.0)
.TP
.B \fBcompress\-level\fP
Set the compression level to be used in live migration,
the compression level is an integer between 0 and 9, where 0 means
no compression, 1 means the best compression speed, and 9 means best
compression ratio which will consume more CPU.
.TP
.B \fBcompress\-threads\fP
Set compression thread count to be used in live migration,
the compression thread count is an integer between 1 and 255.
.TP
.B \fBcompress\-wait\-thread\fP
Controls behavior when all compression threads are
currently busy. If true (default), wait for a free
compression thread to become available; otherwise,
send the page uncompressed. (Since 3.1)
.TP
.B \fBdecompress\-threads\fP
Set decompression thread count to be used in live
migration, the decompression thread count is an integer between 1
and 255. Usually, decompression is at least 4 times as fast as
compression, so set the decompress\-threads to the number about 1/4
of compress\-threads is adequate.
.TP
.B \fBthrottle\-trigger\-threshold\fP
The ratio of bytes_dirty_period and bytes_xfer_period
to trigger throttling. It is expressed as percentage.
The default value is 50. (Since 5.0)
.TP
.B \fBcpu\-throttle\-initial\fP
Initial percentage of time guest cpus are throttled
when migration auto\-converge is activated. The
default value is 20. (Since 2.7)
.TP
.B \fBcpu\-throttle\-increment\fP
throttle percentage increase each time
auto\-converge detects that migration is not making
progress. The default value is 10. (Since 2.7)
.TP
.B \fBcpu\-throttle\-tailslow\fP
Make CPU throttling slower at tail stage
At the tail stage of throttling, the Guest is very
sensitive to CPU percentage while the \fBcpu\-throttle\fP
\-increment is excessive usually at tail stage.
If this parameter is true, we will compute the ideal
CPU percentage used by the Guest, which may exactly make
the dirty rate match the dirty rate threshold. Then we
will choose a smaller throttle increment between the
one specified by \fBcpu\-throttle\-increment\fP and the one
generated by ideal CPU percentage.
Therefore, it is compatible to traditional throttling,
meanwhile the throttle increment won\(aqt be excessive
at tail stage.
The default value is false. (Since 5.1)
.TP
.B \fBtls\-creds\fP
ID of the \(aqtls\-creds\(aq object that provides credentials for
establishing a TLS connection over the migration data channel.
On the outgoing side of the migration, the credentials must
be for a \(aqclient\(aq endpoint, while for the incoming side the
credentials must be for a \(aqserver\(aq endpoint. Setting this
will enable TLS for all migrations. The default is unset,
resulting in unsecured migration at the QEMU level. (Since 2.7)
.TP
.B \fBtls\-hostname\fP
hostname of the target host for the migration. This is
required when using x509 based TLS credentials and the
migration URI does not already include a hostname. For
example if using fd: or exec: based migration, the
hostname must be provided so that the server\(aqs x509
certificate identity can be validated. (Since 2.7)
.TP
.B \fBtls\-authz\fP
ID of the \(aqauthz\(aq object subclass that provides access control
checking of the TLS x509 certificate distinguished name.
This object is only resolved at time of use, so can be deleted
and recreated on the fly while the migration server is active.
If missing, it will default to denying access (Since 4.0)
.TP
.B \fBmax\-bandwidth\fP
to set maximum speed for migration. maximum speed in
bytes per second. (Since 2.8)
.TP
.B \fBdowntime\-limit\fP
set maximum tolerated downtime for migration. maximum
downtime in milliseconds (Since 2.8)
.TP
.B \fBx\-checkpoint\-delay\fP
The delay time (in ms) between two COLO checkpoints in
periodic mode. (Since 2.8)
.TP
.B \fBblock\-incremental\fP
Affects how much storage is migrated when the
block migration capability is enabled.  When false, the entire
storage backing chain is migrated into a flattened image at
the destination; when true, only the active qcow2 layer is
migrated and the destination must already have access to the
same backing chain as was used on the source.  (since 2.10)
.TP
.B \fBmultifd\-channels\fP
Number of channels used to migrate data in
parallel. This is the same number that the
number of sockets used for migration.  The
default value is 2 (since 4.0)
.TP
.B \fBxbzrle\-cache\-size\fP
cache size to be used by XBZRLE migration.  It
needs to be a multiple of the target page size
and a power of 2
(Since 2.11)
.TP
.B \fBmax\-postcopy\-bandwidth\fP
Background transfer bandwidth during postcopy.
Defaults to 0 (unlimited).  In bytes per second.
(Since 3.0)
.TP
.B \fBmax\-cpu\-throttle\fP
maximum cpu throttle percentage.
Defaults to 99. (Since 3.1)
.TP
.B \fBmultifd\-compression\fP
Which compression method to use.
Defaults to none. (Since 5.0)
.TP
.B \fBmultifd\-zlib\-level\fP
Set the compression level to be used in live
migration, the compression level is an integer between 0
and 9, where 0 means no compression, 1 means the best
compression speed, and 9 means best compression ratio which
will consume more CPU.
Defaults to 1. (Since 5.0)
.TP
.B \fBmultifd\-zstd\-level\fP
Set the compression level to be used in live
migration, the compression level is an integer between 0
and 20, where 0 means no compression, 1 means the best
compression speed, and 20 means best compression ratio which
will consume more CPU.
Defaults to 1. (Since 5.0)
.TP
.B \fBblock\-bitmap\-mapping\fP
Maps block nodes and bitmaps on them to
aliases for the purpose of dirty bitmap migration.  Such
aliases may for example be the corresponding names on the
opposite site.
The mapping must be one\-to\-one, but not necessarily
complete: On the source, unmapped bitmaps and all bitmaps
on unmapped nodes will be ignored.  On the destination,
encountering an unmapped alias in the incoming migration
stream will result in a report, and all further bitmap
migration data will then be discarded.
Note that the destination does not know about bitmaps it
does not receive, so there is no limitation or requirement
regarding the number of bitmaps received, or how they are
named, or on which nodes they are placed.
By default (when this parameter has never been set), bitmap
names are mapped to themselves.  Nodes are mapped to their
block device name if there is one, and to their node name
otherwise. (Since 5.2)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
Member \fBx\-checkpoint\-delay\fP is experimental.
.UNINDENT
.SS Since
.sp
2.4
.SS \fBMigrateSetParameters\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBannounce\-initial\fP: \fBint\fP (optional)
Initial delay (in milliseconds) before sending the first
announce (Since 4.0)
.TP
.B \fBannounce\-max\fP: \fBint\fP (optional)
Maximum delay (in milliseconds) between packets in the
announcement (Since 4.0)
.TP
.B \fBannounce\-rounds\fP: \fBint\fP (optional)
Number of self\-announce packets sent after migration
(Since 4.0)
.TP
.B \fBannounce\-step\fP: \fBint\fP (optional)
Increase in delay (in milliseconds) between subsequent
packets in the announcement (Since 4.0)
.TP
.B \fBcompress\-level\fP: \fBint\fP (optional)
compression level
.TP
.B \fBcompress\-threads\fP: \fBint\fP (optional)
compression thread count
.TP
.B \fBcompress\-wait\-thread\fP: \fBboolean\fP (optional)
Controls behavior when all compression threads are
currently busy. If true (default), wait for a free
compression thread to become available; otherwise,
send the page uncompressed. (Since 3.1)
.TP
.B \fBdecompress\-threads\fP: \fBint\fP (optional)
decompression thread count
.TP
.B \fBthrottle\-trigger\-threshold\fP: \fBint\fP (optional)
The ratio of bytes_dirty_period and bytes_xfer_period
to trigger throttling. It is expressed as percentage.
The default value is 50. (Since 5.0)
.TP
.B \fBcpu\-throttle\-initial\fP: \fBint\fP (optional)
Initial percentage of time guest cpus are
throttled when migration auto\-converge is activated.
The default value is 20. (Since 2.7)
.TP
.B \fBcpu\-throttle\-increment\fP: \fBint\fP (optional)
throttle percentage increase each time
auto\-converge detects that migration is not making
progress. The default value is 10. (Since 2.7)
.TP
.B \fBcpu\-throttle\-tailslow\fP: \fBboolean\fP (optional)
Make CPU throttling slower at tail stage
At the tail stage of throttling, the Guest is very
sensitive to CPU percentage while the \fBcpu\-throttle\fP
\-increment is excessive usually at tail stage.
If this parameter is true, we will compute the ideal
CPU percentage used by the Guest, which may exactly make
the dirty rate match the dirty rate threshold. Then we
will choose a smaller throttle increment between the
one specified by \fBcpu\-throttle\-increment\fP and the one
generated by ideal CPU percentage.
Therefore, it is compatible to traditional throttling,
meanwhile the throttle increment won\(aqt be excessive
at tail stage.
The default value is false. (Since 5.1)
.TP
.B \fBtls\-creds\fP: \fBStrOrNull\fP (optional)
ID of the \(aqtls\-creds\(aq object that provides credentials
for establishing a TLS connection over the migration data
channel. On the outgoing side of the migration, the credentials
must be for a \(aqclient\(aq endpoint, while for the incoming side the
credentials must be for a \(aqserver\(aq endpoint. Setting this
to a non\-empty string enables TLS for all migrations.
An empty string means that QEMU will use plain text mode for
migration, rather than TLS (Since 2.9)
Previously (since 2.7), this was reported by omitting
tls\-creds instead.
.TP
.B \fBtls\-hostname\fP: \fBStrOrNull\fP (optional)
hostname of the target host for the migration. This
is required when using x509 based TLS credentials and the
migration URI does not already include a hostname. For
example if using fd: or exec: based migration, the
hostname must be provided so that the server\(aqs x509
certificate identity can be validated. (Since 2.7)
An empty string means that QEMU will use the hostname
associated with the migration URI, if any. (Since 2.9)
Previously (since 2.7), this was reported by omitting
tls\-hostname instead.
.TP
.B \fBmax\-bandwidth\fP: \fBint\fP (optional)
to set maximum speed for migration. maximum speed in
bytes per second. (Since 2.8)
.TP
.B \fBdowntime\-limit\fP: \fBint\fP (optional)
set maximum tolerated downtime for migration. maximum
downtime in milliseconds (Since 2.8)
.TP
.B \fBx\-checkpoint\-delay\fP: \fBint\fP (optional)
the delay time between two COLO checkpoints. (Since 2.8)
.TP
.B \fBblock\-incremental\fP: \fBboolean\fP (optional)
Affects how much storage is migrated when the
block migration capability is enabled.  When false, the entire
storage backing chain is migrated into a flattened image at
the destination; when true, only the active qcow2 layer is
migrated and the destination must already have access to the
same backing chain as was used on the source.  (since 2.10)
.TP
.B \fBmultifd\-channels\fP: \fBint\fP (optional)
Number of channels used to migrate data in
parallel. This is the same number that the
number of sockets used for migration.  The
default value is 2 (since 4.0)
.TP
.B \fBxbzrle\-cache\-size\fP: \fBint\fP (optional)
cache size to be used by XBZRLE migration.  It
needs to be a multiple of the target page size
and a power of 2
(Since 2.11)
.TP
.B \fBmax\-postcopy\-bandwidth\fP: \fBint\fP (optional)
Background transfer bandwidth during postcopy.
Defaults to 0 (unlimited).  In bytes per second.
(Since 3.0)
.TP
.B \fBmax\-cpu\-throttle\fP: \fBint\fP (optional)
maximum cpu throttle percentage.
The default value is 99. (Since 3.1)
.TP
.B \fBmultifd\-compression\fP: \fBMultiFDCompression\fP (optional)
Which compression method to use.
Defaults to none. (Since 5.0)
.TP
.B \fBmultifd\-zlib\-level\fP: \fBint\fP (optional)
Set the compression level to be used in live
migration, the compression level is an integer between 0
and 9, where 0 means no compression, 1 means the best
compression speed, and 9 means best compression ratio which
will consume more CPU.
Defaults to 1. (Since 5.0)
.TP
.B \fBmultifd\-zstd\-level\fP: \fBint\fP (optional)
Set the compression level to be used in live
migration, the compression level is an integer between 0
and 20, where 0 means no compression, 1 means the best
compression speed, and 20 means best compression ratio which
will consume more CPU.
Defaults to 1. (Since 5.0)
.TP
.B \fBblock\-bitmap\-mapping\fP: \fBarray of BitmapMigrationNodeAlias\fP (optional)
Maps block nodes and bitmaps on them to
aliases for the purpose of dirty bitmap migration.  Such
aliases may for example be the corresponding names on the
opposite site.
The mapping must be one\-to\-one, but not necessarily
complete: On the source, unmapped bitmaps and all bitmaps
on unmapped nodes will be ignored.  On the destination,
encountering an unmapped alias in the incoming migration
stream will result in a report, and all further bitmap
migration data will then be discarded.
Note that the destination does not know about bitmaps it
does not receive, so there is no limitation or requirement
regarding the number of bitmaps received, or how they are
named, or on which nodes they are placed.
By default (when this parameter has never been set), bitmap
names are mapped to themselves.  Nodes are mapped to their
block device name if there is one, and to their node name
otherwise. (Since 5.2)
.TP
.B \fBtls\-authz\fP: \fBStrOrNull\fP (optional)
Not documented
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
Member \fBx\-checkpoint\-delay\fP is experimental.
.UNINDENT
.SS Since
.sp
2.4
.SS \fBmigrate\-set\-parameters\fP (Command)
.sp
Set various migration parameters.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBMigrateSetParameters\fP
.UNINDENT
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "migrate\-set\-parameters" ,
     "arguments": { "compress\-level": 1 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMigrationParameters\fP (Object)
.sp
The optional members aren\(aqt actually optional.
.SS Members
.INDENT 0.0
.TP
.B \fBannounce\-initial\fP: \fBint\fP (optional)
Initial delay (in milliseconds) before sending the
first announce (Since 4.0)
.TP
.B \fBannounce\-max\fP: \fBint\fP (optional)
Maximum delay (in milliseconds) between packets in the
announcement (Since 4.0)
.TP
.B \fBannounce\-rounds\fP: \fBint\fP (optional)
Number of self\-announce packets sent after migration
(Since 4.0)
.TP
.B \fBannounce\-step\fP: \fBint\fP (optional)
Increase in delay (in milliseconds) between subsequent
packets in the announcement (Since 4.0)
.TP
.B \fBcompress\-level\fP: \fBint\fP (optional)
compression level
.TP
.B \fBcompress\-threads\fP: \fBint\fP (optional)
compression thread count
.TP
.B \fBcompress\-wait\-thread\fP: \fBboolean\fP (optional)
Controls behavior when all compression threads are
currently busy. If true (default), wait for a free
compression thread to become available; otherwise,
send the page uncompressed. (Since 3.1)
.TP
.B \fBdecompress\-threads\fP: \fBint\fP (optional)
decompression thread count
.TP
.B \fBthrottle\-trigger\-threshold\fP: \fBint\fP (optional)
The ratio of bytes_dirty_period and bytes_xfer_period
to trigger throttling. It is expressed as percentage.
The default value is 50. (Since 5.0)
.TP
.B \fBcpu\-throttle\-initial\fP: \fBint\fP (optional)
Initial percentage of time guest cpus are
throttled when migration auto\-converge is activated.
(Since 2.7)
.TP
.B \fBcpu\-throttle\-increment\fP: \fBint\fP (optional)
throttle percentage increase each time
auto\-converge detects that migration is not making
progress. (Since 2.7)
.TP
.B \fBcpu\-throttle\-tailslow\fP: \fBboolean\fP (optional)
Make CPU throttling slower at tail stage
At the tail stage of throttling, the Guest is very
sensitive to CPU percentage while the \fBcpu\-throttle\fP
\-increment is excessive usually at tail stage.
If this parameter is true, we will compute the ideal
CPU percentage used by the Guest, which may exactly make
the dirty rate match the dirty rate threshold. Then we
will choose a smaller throttle increment between the
one specified by \fBcpu\-throttle\-increment\fP and the one
generated by ideal CPU percentage.
Therefore, it is compatible to traditional throttling,
meanwhile the throttle increment won\(aqt be excessive
at tail stage.
The default value is false. (Since 5.1)
.TP
.B \fBtls\-creds\fP: \fBstring\fP (optional)
ID of the \(aqtls\-creds\(aq object that provides credentials
for establishing a TLS connection over the migration data
channel. On the outgoing side of the migration, the credentials
must be for a \(aqclient\(aq endpoint, while for the incoming side the
credentials must be for a \(aqserver\(aq endpoint.
An empty string means that QEMU will use plain text mode for
migration, rather than TLS (Since 2.7)
Note: 2.8 reports this by omitting tls\-creds instead.
.TP
.B \fBtls\-hostname\fP: \fBstring\fP (optional)
hostname of the target host for the migration. This
is required when using x509 based TLS credentials and the
migration URI does not already include a hostname. For
example if using fd: or exec: based migration, the
hostname must be provided so that the server\(aqs x509
certificate identity can be validated. (Since 2.7)
An empty string means that QEMU will use the hostname
associated with the migration URI, if any. (Since 2.9)
Note: 2.8 reports this by omitting tls\-hostname instead.
.TP
.B \fBtls\-authz\fP: \fBstring\fP (optional)
ID of the \(aqauthz\(aq object subclass that provides access control
checking of the TLS x509 certificate distinguished name. (Since
4.0)
.TP
.B \fBmax\-bandwidth\fP: \fBint\fP (optional)
to set maximum speed for migration. maximum speed in
bytes per second. (Since 2.8)
.TP
.B \fBdowntime\-limit\fP: \fBint\fP (optional)
set maximum tolerated downtime for migration. maximum
downtime in milliseconds (Since 2.8)
.TP
.B \fBx\-checkpoint\-delay\fP: \fBint\fP (optional)
the delay time between two COLO checkpoints. (Since 2.8)
.TP
.B \fBblock\-incremental\fP: \fBboolean\fP (optional)
Affects how much storage is migrated when the
block migration capability is enabled.  When false, the entire
storage backing chain is migrated into a flattened image at
the destination; when true, only the active qcow2 layer is
migrated and the destination must already have access to the
same backing chain as was used on the source.  (since 2.10)
.TP
.B \fBmultifd\-channels\fP: \fBint\fP (optional)
Number of channels used to migrate data in
parallel. This is the same number that the
number of sockets used for migration.
The default value is 2 (since 4.0)
.TP
.B \fBxbzrle\-cache\-size\fP: \fBint\fP (optional)
cache size to be used by XBZRLE migration.  It
needs to be a multiple of the target page size
and a power of 2
(Since 2.11)
.TP
.B \fBmax\-postcopy\-bandwidth\fP: \fBint\fP (optional)
Background transfer bandwidth during postcopy.
Defaults to 0 (unlimited).  In bytes per second.
(Since 3.0)
.TP
.B \fBmax\-cpu\-throttle\fP: \fBint\fP (optional)
maximum cpu throttle percentage.
Defaults to 99.
(Since 3.1)
.TP
.B \fBmultifd\-compression\fP: \fBMultiFDCompression\fP (optional)
Which compression method to use.
Defaults to none. (Since 5.0)
.TP
.B \fBmultifd\-zlib\-level\fP: \fBint\fP (optional)
Set the compression level to be used in live
migration, the compression level is an integer between 0
and 9, where 0 means no compression, 1 means the best
compression speed, and 9 means best compression ratio which
will consume more CPU.
Defaults to 1. (Since 5.0)
.TP
.B \fBmultifd\-zstd\-level\fP: \fBint\fP (optional)
Set the compression level to be used in live
migration, the compression level is an integer between 0
and 20, where 0 means no compression, 1 means the best
compression speed, and 20 means best compression ratio which
will consume more CPU.
Defaults to 1. (Since 5.0)
.TP
.B \fBblock\-bitmap\-mapping\fP: \fBarray of BitmapMigrationNodeAlias\fP (optional)
Maps block nodes and bitmaps on them to
aliases for the purpose of dirty bitmap migration.  Such
aliases may for example be the corresponding names on the
opposite site.
The mapping must be one\-to\-one, but not necessarily
complete: On the source, unmapped bitmaps and all bitmaps
on unmapped nodes will be ignored.  On the destination,
encountering an unmapped alias in the incoming migration
stream will result in a report, and all further bitmap
migration data will then be discarded.
Note that the destination does not know about bitmaps it
does not receive, so there is no limitation or requirement
regarding the number of bitmaps received, or how they are
named, or on which nodes they are placed.
By default (when this parameter has never been set), bitmap
names are mapped to themselves.  Nodes are mapped to their
block device name if there is one, and to their node name
otherwise. (Since 5.2)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
Member \fBx\-checkpoint\-delay\fP is experimental.
.UNINDENT
.SS Since
.sp
2.4
.SS \fBquery\-migrate\-parameters\fP (Command)
.sp
Returns information about the current migration parameters
.SS Returns
.sp
\fBMigrationParameters\fP
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-migrate\-parameters" }
<\- { "return": {
         "decompress\-threads": 2,
         "cpu\-throttle\-increment": 10,
         "compress\-threads": 8,
         "compress\-level": 1,
         "cpu\-throttle\-initial": 20,
         "max\-bandwidth": 33554432,
         "downtime\-limit": 300
      }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBclient_migrate_info\fP (Command)
.sp
Set migration information for remote display.  This makes the server
ask the client to automatically reconnect using the new parameters
once migration finished successfully.  Only implemented for SPICE.
.SS Arguments
.INDENT 0.0
.TP
.B \fBprotocol\fP: \fBstring\fP
must be "spice"
.TP
.B \fBhostname\fP: \fBstring\fP
migration target hostname
.TP
.B \fBport\fP: \fBint\fP (optional)
spice tcp port for plaintext channels
.TP
.B \fBtls\-port\fP: \fBint\fP (optional)
spice tcp port for tls\-secured channels
.TP
.B \fBcert\-subject\fP: \fBstring\fP (optional)
server certificate subject
.UNINDENT
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "client_migrate_info",
     "arguments": { "protocol": "spice",
                    "hostname": "virt42.lab.kraxel.org",
                    "port": 1234 } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBmigrate\-start\-postcopy\fP (Command)
.sp
Followup to a migration command to switch the migration to postcopy mode.
The postcopy\-ram capability must be set on both source and destination
before the original migration command.
.SS Since
.sp
2.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "migrate\-start\-postcopy" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMIGRATION\fP (Event)
.sp
Emitted when a migration event happens
.SS Arguments
.INDENT 0.0
.TP
.B \fBstatus\fP: \fBMigrationStatus\fP
\fBMigrationStatus\fP describing the current migration status.
.UNINDENT
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- {"timestamp": {"seconds": 1432121972, "microseconds": 744001},
    "event": "MIGRATION",
    "data": {"status": "completed"} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMIGRATION_PASS\fP (Event)
.sp
Emitted from the source side of a migration at the start of each pass
(when it syncs the dirty bitmap)
.SS Arguments
.INDENT 0.0
.TP
.B \fBpass\fP: \fBint\fP
An incrementing count (starting at 1 on the first pass)
.UNINDENT
.SS Since
.sp
2.6
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{ "timestamp": {"seconds": 1449669631, "microseconds": 239225},
  "event": "MIGRATION_PASS", "data": {"pass": 2} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBCOLOMessage\fP (Enum)
.sp
The message transmission between Primary side and Secondary side.
.SS Values
.INDENT 0.0
.TP
.B \fBcheckpoint\-ready\fP
Secondary VM (SVM) is ready for checkpointing
.TP
.B \fBcheckpoint\-request\fP
Primary VM (PVM) tells SVM to prepare for checkpointing
.TP
.B \fBcheckpoint\-reply\fP
SVM gets PVM\(aqs checkpoint request
.TP
.B \fBvmstate\-send\fP
VM\(aqs state will be sent by PVM.
.TP
.B \fBvmstate\-size\fP
The total size of VMstate.
.TP
.B \fBvmstate\-received\fP
VM\(aqs state has been received by SVM.
.TP
.B \fBvmstate\-loaded\fP
VM\(aqs state has been loaded by SVM.
.UNINDENT
.SS Since
.sp
2.8
.SS \fBCOLOMode\fP (Enum)
.sp
The COLO current mode.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
COLO is disabled.
.TP
.B \fBprimary\fP
COLO node in primary side.
.TP
.B \fBsecondary\fP
COLO node in slave side.
.UNINDENT
.SS Since
.sp
2.8
.SS \fBFailoverStatus\fP (Enum)
.sp
An enumeration of COLO failover status
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
no failover has ever happened
.TP
.B \fBrequire\fP
got failover requirement but not handled
.TP
.B \fBactive\fP
in the process of doing failover
.TP
.B \fBcompleted\fP
finish the process of failover
.TP
.B \fBrelaunch\fP
restart the failover process, from \(aqnone\(aq \-> \(aqcompleted\(aq (Since 2.9)
.UNINDENT
.SS Since
.sp
2.8
.SS \fBCOLO_EXIT\fP (Event)
.sp
Emitted when VM finishes COLO mode due to some errors happening or
at the request of users.
.SS Arguments
.INDENT 0.0
.TP
.B \fBmode\fP: \fBCOLOMode\fP
report COLO mode when COLO exited.
.TP
.B \fBreason\fP: \fBCOLOExitReason\fP
describes the reason for the COLO exit.
.UNINDENT
.SS Since
.sp
3.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "timestamp": {"seconds": 2032141960, "microseconds": 417172},
     "event": "COLO_EXIT", "data": {"mode": "primary", "reason": "request" } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBCOLOExitReason\fP (Enum)
.sp
The reason for a COLO exit.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
failover has never happened. This state does not occur
in the COLO_EXIT event, and is only visible in the result of
query\-colo\-status.
.TP
.B \fBrequest\fP
COLO exit is due to an external request.
.TP
.B \fBerror\fP
COLO exit is due to an internal error.
.TP
.B \fBprocessing\fP
COLO is currently handling a failover (since 4.0).
.UNINDENT
.SS Since
.sp
3.1
.SS \fBx\-colo\-lost\-heartbeat\fP (Command)
.sp
Tell qemu that heartbeat is lost, request it to do takeover procedures.
If this command is sent to the PVM, the Primary side will exit COLO mode.
If sent to the Secondary, the Secondary side will run failover work,
then takes over server operation to become the service VM.
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is experimental.
.UNINDENT
.SS Since
.sp
2.8
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "x\-colo\-lost\-heartbeat" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBmigrate_cancel\fP (Command)
.sp
Cancel the current executing migration process.
.SS Returns
.sp
nothing on success
.SS Notes
.sp
This command succeeds even if there is no migration process running.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "migrate_cancel" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBmigrate\-continue\fP (Command)
.sp
Continue migration when it\(aqs in a paused state.
.SS Arguments
.INDENT 0.0
.TP
.B \fBstate\fP: \fBMigrationStatus\fP
The state the migration is currently expected to be in
.UNINDENT
.SS Returns
.sp
nothing on success
.SS Since
.sp
2.11
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "migrate\-continue" , "arguments":
     { "state": "pre\-switchover" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBmigrate\fP (Command)
.sp
Migrates the current running guest to another Virtual Machine.
.SS Arguments
.INDENT 0.0
.TP
.B \fBuri\fP: \fBstring\fP
the Uniform Resource Identifier of the destination VM
.TP
.B \fBblk\fP: \fBboolean\fP (optional)
do block migration (full disk copy)
.TP
.B \fBinc\fP: \fBboolean\fP (optional)
incremental disk copy migration
.TP
.B \fBdetach\fP: \fBboolean\fP (optional)
this argument exists only for compatibility reasons and
is ignored by QEMU
.TP
.B \fBresume\fP: \fBboolean\fP (optional)
resume one paused migration, default "off". (since 3.0)
.UNINDENT
.SS Returns
.sp
nothing on success
.SS Since
.sp
0.14
.SS Notes
.INDENT 0.0
.IP 1. 3
The \(aqquery\-migrate\(aq command should be used to check migration\(aqs progress
and final result (this information is provided by the \(aqstatus\(aq member)
.IP 2. 3
All boolean arguments default to false
.IP 3. 3
The user Monitor\(aqs "detach" argument is invalid in QMP and should not
be used
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "migrate", "arguments": { "uri": "tcp:0:4446" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBmigrate\-incoming\fP (Command)
.sp
Start an incoming migration, the qemu must have been started
with \-incoming defer
.SS Arguments
.INDENT 0.0
.TP
.B \fBuri\fP: \fBstring\fP
The Uniform Resource Identifier identifying the source or
address to listen on
.UNINDENT
.SS Returns
.sp
nothing on success
.SS Since
.sp
2.3
.SS Notes
.INDENT 0.0
.IP 1. 3
It\(aqs a bad idea to use a string for the uri, but it needs to stay
compatible with \-incoming and the format of the uri is already exposed
above libvirt.
.IP 2. 3
QEMU must be started with \-incoming defer to allow migrate\-incoming to
be used.
.IP 3. 3
The uri format is the same as for \-incoming
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "migrate\-incoming",
     "arguments": { "uri": "tcp::4446" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBxen\-save\-devices\-state\fP (Command)
.sp
Save the state of all devices to file. The RAM and the block devices
of the VM are not saved by this command.
.SS Arguments
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
the file to save the state of the devices to as binary
data. See xen\-save\-devices\-state.txt for a description of the binary
format.
.TP
.B \fBlive\fP: \fBboolean\fP (optional)
Optional argument to ask QEMU to treat this command as part of a live
migration. Default to true. (since 2.11)
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "xen\-save\-devices\-state",
     "arguments": { "filename": "/tmp/save" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBxen\-set\-global\-dirty\-log\fP (Command)
.sp
Enable or disable the global dirty log mode.
.SS Arguments
.INDENT 0.0
.TP
.B \fBenable\fP: \fBboolean\fP
true to enable, false to disable.
.UNINDENT
.SS Returns
.sp
nothing
.SS Since
.sp
1.3
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "xen\-set\-global\-dirty\-log",
     "arguments": { "enable": true } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBxen\-load\-devices\-state\fP (Command)
.sp
Load the state of all devices from file. The RAM and the block devices
of the VM are not loaded by this command.
.SS Arguments
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
the file to load the state of the devices from as binary
data. See xen\-save\-devices\-state.txt for a description of the binary
format.
.UNINDENT
.SS Since
.sp
2.7
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "xen\-load\-devices\-state",
     "arguments": { "filename": "/tmp/resume" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBxen\-set\-replication\fP (Command)
.sp
Enable or disable replication.
.SS Arguments
.INDENT 0.0
.TP
.B \fBenable\fP: \fBboolean\fP
true to enable, false to disable.
.TP
.B \fBprimary\fP: \fBboolean\fP
true for primary or false for secondary.
.TP
.B \fBfailover\fP: \fBboolean\fP (optional)
true to do failover, false to stop. but cannot be
specified if \(aqenable\(aq is true. default value is false.
.UNINDENT
.SS Returns
.sp
nothing.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "xen\-set\-replication",
     "arguments": {"enable": true, "primary": false} }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
2.9
.SS If
.sp
\fBCONFIG_REPLICATION\fP
.SS \fBReplicationStatus\fP (Object)
.sp
The result format for \(aqquery\-xen\-replication\-status\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBerror\fP: \fBboolean\fP
true if an error happened, false if replication is normal.
.TP
.B \fBdesc\fP: \fBstring\fP (optional)
the human readable error description string, when
\fBerror\fP is \(aqtrue\(aq.
.UNINDENT
.SS Since
.sp
2.9
.SS If
.sp
\fBCONFIG_REPLICATION\fP
.SS \fBquery\-xen\-replication\-status\fP (Command)
.sp
Query replication status while the vm is running.
.SS Returns
.sp
A \fBReplicationStatus\fP object showing the status.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-xen\-replication\-status" }
<\- { "return": { "error": false } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
2.9
.SS If
.sp
\fBCONFIG_REPLICATION\fP
.SS \fBxen\-colo\-do\-checkpoint\fP (Command)
.sp
Xen uses this command to notify replication to trigger a checkpoint.
.SS Returns
.sp
nothing.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "xen\-colo\-do\-checkpoint" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
2.9
.SS If
.sp
\fBCONFIG_REPLICATION\fP
.SS \fBCOLOStatus\fP (Object)
.sp
The result format for \(aqquery\-colo\-status\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBmode\fP: \fBCOLOMode\fP
COLO running mode. If COLO is running, this field will return
\(aqprimary\(aq or \(aqsecondary\(aq.
.TP
.B \fBlast\-mode\fP: \fBCOLOMode\fP
COLO last running mode. If COLO is running, this field
will return same like mode field, after failover we can
use this field to get last colo mode. (since 4.0)
.TP
.B \fBreason\fP: \fBCOLOExitReason\fP
describes the reason for the COLO exit.
.UNINDENT
.SS Since
.sp
3.1
.SS \fBquery\-colo\-status\fP (Command)
.sp
Query COLO status while the vm is running.
.SS Returns
.sp
A \fBCOLOStatus\fP object showing the status.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-colo\-status" }
<\- { "return": { "mode": "primary", "last\-mode": "none", "reason": "request" } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
3.1
.SS \fBmigrate\-recover\fP (Command)
.sp
Provide a recovery migration stream URI.
.SS Arguments
.INDENT 0.0
.TP
.B \fBuri\fP: \fBstring\fP
the URI to be used for the recovery of migration stream.
.UNINDENT
.SS Returns
.sp
nothing.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "migrate\-recover",
     "arguments": { "uri": "tcp:192.168.1.200:12345" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
3.0
.SS \fBmigrate\-pause\fP (Command)
.sp
Pause a migration.  Currently it only supports postcopy.
.SS Returns
.sp
nothing.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "migrate\-pause" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
3.0
.SS \fBUNPLUG_PRIMARY\fP (Event)
.sp
Emitted from source side of a migration when migration state is
WAIT_UNPLUG. Device was unplugged by guest operating system.
Device resources in QEMU are kept on standby to be able to re\-plug it in case
of migration failure.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\-id\fP: \fBstring\fP
QEMU device id of the unplugged device
.UNINDENT
.SS Since
.sp
4.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "UNPLUG_PRIMARY",
     "data": { "device\-id": "hostdev0" },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDirtyRateVcpu\fP (Object)
.sp
Dirty rate of vcpu.
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBint\fP
vcpu index.
.TP
.B \fBdirty\-rate\fP: \fBint\fP
dirty rate.
.UNINDENT
.SS Since
.sp
6.2
.SS \fBDirtyRateStatus\fP (Enum)
.sp
An enumeration of dirtyrate status.
.SS Values
.INDENT 0.0
.TP
.B \fBunstarted\fP
the dirtyrate thread has not been started.
.TP
.B \fBmeasuring\fP
the dirtyrate thread is measuring.
.TP
.B \fBmeasured\fP
the dirtyrate thread has measured and results are available.
.UNINDENT
.SS Since
.sp
5.2
.SS \fBDirtyRateMeasureMode\fP (Enum)
.sp
An enumeration of mode of measuring dirtyrate.
.SS Values
.INDENT 0.0
.TP
.B \fBpage\-sampling\fP
calculate dirtyrate by sampling pages.
.TP
.B \fBdirty\-ring\fP
calculate dirtyrate by dirty ring.
.TP
.B \fBdirty\-bitmap\fP
calculate dirtyrate by dirty bitmap.
.UNINDENT
.SS Since
.sp
6.2
.SS \fBDirtyRateInfo\fP (Object)
.sp
Information about current dirty page rate of vm.
.SS Members
.INDENT 0.0
.TP
.B \fBdirty\-rate\fP: \fBint\fP (optional)
an estimate of the dirty page rate of the VM in units of
MB/s, present only when estimating the rate has completed.
.TP
.B \fBstatus\fP: \fBDirtyRateStatus\fP
status containing dirtyrate query status includes
\(aqunstarted\(aq or \(aqmeasuring\(aq or \(aqmeasured\(aq
.TP
.B \fBstart\-time\fP: \fBint\fP
start time in units of second for calculation
.TP
.B \fBcalc\-time\fP: \fBint\fP
time in units of second for sample dirty pages
.TP
.B \fBsample\-pages\fP: \fBint\fP
page count per GB for sample dirty pages
the default value is 512 (since 6.1)
.TP
.B \fBmode\fP: \fBDirtyRateMeasureMode\fP
mode containing method of calculate dirtyrate includes
\(aqpage\-sampling\(aq and \(aqdirty\-ring\(aq (Since 6.2)
.TP
.B \fBvcpu\-dirty\-rate\fP: \fBarray of DirtyRateVcpu\fP (optional)
dirtyrate for each vcpu if dirty\-ring
mode specified (Since 6.2)
.UNINDENT
.SS Since
.sp
5.2
.SS \fBcalc\-dirty\-rate\fP (Command)
.sp
start calculating dirty page rate for vm
.SS Arguments
.INDENT 0.0
.TP
.B \fBcalc\-time\fP: \fBint\fP
time in units of second for sample dirty pages
.TP
.B \fBsample\-pages\fP: \fBint\fP (optional)
page count per GB for sample dirty pages
the default value is 512 (since 6.1)
.TP
.B \fBmode\fP: \fBDirtyRateMeasureMode\fP (optional)
mechanism of calculating dirtyrate includes
\(aqpage\-sampling\(aq and \(aqdirty\-ring\(aq (Since 6.1)
.UNINDENT
.SS Since
.sp
5.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"execute": "calc\-dirty\-rate", "arguments": {"calc\-time": 1,
                                               \(aqsample\-pages\(aq: 512} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBquery\-dirty\-rate\fP (Command)
.sp
query dirty page rate in units of MB/s for vm
.SS Since
.sp
5.2
.SS \fBDirtyLimitInfo\fP (Object)
.sp
Dirty page rate limit information of a virtual CPU.
.SS Members
.INDENT 0.0
.TP
.B \fBcpu\-index\fP: \fBint\fP
index of a virtual CPU.
.TP
.B \fBlimit\-rate\fP: \fBint\fP
upper limit of dirty page rate (MB/s) for a virtual
CPU, 0 means unlimited.
.TP
.B \fBcurrent\-rate\fP: \fBint\fP
current dirty page rate (MB/s) for a virtual CPU.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBset\-vcpu\-dirty\-limit\fP (Command)
.sp
Set the upper limit of dirty page rate for virtual CPUs.
.sp
Requires KVM with accelerator property "dirty\-ring\-size" set.
A virtual CPU\(aqs dirty page rate is a measure of its memory load.
To observe dirty page rates, use \fBcalc\-dirty\-rate\fP\&.
.SS Arguments
.INDENT 0.0
.TP
.B \fBcpu\-index\fP: \fBint\fP (optional)
index of a virtual CPU, default is all.
.TP
.B \fBdirty\-rate\fP: \fBint\fP
upper limit of dirty page rate (MB/s) for virtual CPUs.
.UNINDENT
.SS Since
.sp
7.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"execute": "set\-vcpu\-dirty\-limit"}
   "arguments": { "dirty\-rate": 200,
                  "cpu\-index": 1 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBcancel\-vcpu\-dirty\-limit\fP (Command)
.sp
Cancel the upper limit of dirty page rate for virtual CPUs.
.sp
Cancel the dirty page limit for the vCPU which has been set with
set\-vcpu\-dirty\-limit command. Note that this command requires
support from dirty ring, same as the "set\-vcpu\-dirty\-limit".
.SS Arguments
.INDENT 0.0
.TP
.B \fBcpu\-index\fP: \fBint\fP (optional)
index of a virtual CPU, default is all.
.UNINDENT
.SS Since
.sp
7.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"execute": "cancel\-vcpu\-dirty\-limit"}
   "arguments": { "cpu\-index": 1 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBquery\-vcpu\-dirty\-limit\fP (Command)
.sp
Returns information about virtual CPU dirty page rate limits, if any.
.SS Since
.sp
7.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"execute": "query\-vcpu\-dirty\-limit"}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBsnapshot\-save\fP (Command)
.sp
Save a VM snapshot
.SS Arguments
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP
identifier for the newly created job
.TP
.B \fBtag\fP: \fBstring\fP
name of the snapshot to create
.TP
.B \fBvmstate\fP: \fBstring\fP
block device node name to save vmstate to
.TP
.B \fBdevices\fP: \fBarray of string\fP
list of block device node names to save a snapshot to
.UNINDENT
Applications should not assume that the snapshot save is complete
when this command returns. The job commands / events must be used
to determine completion and to fetch details of any errors that arise.
.sp
Note that execution of the guest CPUs may be stopped during the
time it takes to save the snapshot. A future version of QEMU
may ensure CPUs are executing continuously.
.sp
It is strongly recommended that \fBdevices\fP contain all writable
block device nodes if a consistent snapshot is required.
.sp
If \fBtag\fP already exists, an error will be reported
.SS Returns
.sp
nothing
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "snapshot\-save",
     "arguments": {
        "job\-id": "snapsave0",
        "tag": "my\-snap",
        "vmstate": "disk0",
        "devices": ["disk0", "disk1"]
     }
   }
<\- { "return": { } }
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1432121972, "microseconds": 744001},
    "data": {"status": "created", "id": "snapsave0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1432122172, "microseconds": 744001},
    "data": {"status": "running", "id": "snapsave0"}}
<\- {"event": "STOP",
    "timestamp": {"seconds": 1432122372, "microseconds": 744001} }
<\- {"event": "RESUME",
    "timestamp": {"seconds": 1432122572, "microseconds": 744001} }
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1432122772, "microseconds": 744001},
    "data": {"status": "waiting", "id": "snapsave0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1432122972, "microseconds": 744001},
    "data": {"status": "pending", "id": "snapsave0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1432123172, "microseconds": 744001},
    "data": {"status": "concluded", "id": "snapsave0"}}
\-> {"execute": "query\-jobs"}
<\- {"return": [{"current\-progress": 1,
                "status": "concluded",
                "total\-progress": 1,
                "type": "snapshot\-save",
                "id": "snapsave0"}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
6.0
.SS \fBsnapshot\-load\fP (Command)
.sp
Load a VM snapshot
.SS Arguments
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP
identifier for the newly created job
.TP
.B \fBtag\fP: \fBstring\fP
name of the snapshot to load.
.TP
.B \fBvmstate\fP: \fBstring\fP
block device node name to load vmstate from
.TP
.B \fBdevices\fP: \fBarray of string\fP
list of block device node names to load a snapshot from
.UNINDENT
Applications should not assume that the snapshot load is complete
when this command returns. The job commands / events must be used
to determine completion and to fetch details of any errors that arise.
.sp
Note that execution of the guest CPUs will be stopped during the
time it takes to load the snapshot.
.sp
It is strongly recommended that \fBdevices\fP contain all writable
block device nodes that can have changed since the original
\fBsnapshot\-save\fP command execution.
.SS Returns
.sp
nothing
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "snapshot\-load",
     "arguments": {
        "job\-id": "snapload0",
        "tag": "my\-snap",
        "vmstate": "disk0",
        "devices": ["disk0", "disk1"]
     }
   }
<\- { "return": { } }
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1472124172, "microseconds": 744001},
    "data": {"status": "created", "id": "snapload0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1472125172, "microseconds": 744001},
    "data": {"status": "running", "id": "snapload0"}}
<\- {"event": "STOP",
    "timestamp": {"seconds": 1472125472, "microseconds": 744001} }
<\- {"event": "RESUME",
    "timestamp": {"seconds": 1472125872, "microseconds": 744001} }
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1472126172, "microseconds": 744001},
    "data": {"status": "waiting", "id": "snapload0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1472127172, "microseconds": 744001},
    "data": {"status": "pending", "id": "snapload0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1472128172, "microseconds": 744001},
    "data": {"status": "concluded", "id": "snapload0"}}
\-> {"execute": "query\-jobs"}
<\- {"return": [{"current\-progress": 1,
                "status": "concluded",
                "total\-progress": 1,
                "type": "snapshot\-load",
                "id": "snapload0"}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
6.0
.SS \fBsnapshot\-delete\fP (Command)
.sp
Delete a VM snapshot
.SS Arguments
.INDENT 0.0
.TP
.B \fBjob\-id\fP: \fBstring\fP
identifier for the newly created job
.TP
.B \fBtag\fP: \fBstring\fP
name of the snapshot to delete.
.TP
.B \fBdevices\fP: \fBarray of string\fP
list of block device node names to delete a snapshot from
.UNINDENT
Applications should not assume that the snapshot delete is complete
when this command returns. The job commands / events must be used
to determine completion and to fetch details of any errors that arise.
.SS Returns
.sp
nothing
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "snapshot\-delete",
     "arguments": {
        "job\-id": "snapdelete0",
        "tag": "my\-snap",
        "devices": ["disk0", "disk1"]
     }
   }
<\- { "return": { } }
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1442124172, "microseconds": 744001},
    "data": {"status": "created", "id": "snapdelete0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1442125172, "microseconds": 744001},
    "data": {"status": "running", "id": "snapdelete0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1442126172, "microseconds": 744001},
    "data": {"status": "waiting", "id": "snapdelete0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1442127172, "microseconds": 744001},
    "data": {"status": "pending", "id": "snapdelete0"}}
<\- {"event": "JOB_STATUS_CHANGE",
    "timestamp": {"seconds": 1442128172, "microseconds": 744001},
    "data": {"status": "concluded", "id": "snapdelete0"}}
\-> {"execute": "query\-jobs"}
<\- {"return": [{"current\-progress": 1,
                "status": "concluded",
                "total\-progress": 1,
                "type": "snapshot\-delete",
                "id": "snapdelete0"}]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
6.0
.SH TRANSACTIONS
.SS \fBAbort\fP (Object)
.sp
This action can be used to test transaction failure.
.SS Since
.sp
1.6
.SS \fBActionCompletionMode\fP (Enum)
.sp
An enumeration of Transactional completion modes.
.SS Values
.INDENT 0.0
.TP
.B \fBindividual\fP
Do not attempt to cancel any other Actions if any Actions fail
after the Transaction request succeeds. All Actions that
can complete successfully will do so without waiting on others.
This is the default.
.TP
.B \fBgrouped\fP
If any Action fails after the Transaction succeeds, cancel all
Actions. Actions do not complete until all Actions are ready to
complete. May be rejected by Actions that do not support this
completion mode.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBTransactionActionKind\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBabort\fP
Since 1.6
.TP
.B \fBblock\-dirty\-bitmap\-add\fP
Since 2.5
.TP
.B \fBblock\-dirty\-bitmap\-remove\fP
Since 4.2
.TP
.B \fBblock\-dirty\-bitmap\-clear\fP
Since 2.5
.TP
.B \fBblock\-dirty\-bitmap\-enable\fP
Since 4.0
.TP
.B \fBblock\-dirty\-bitmap\-disable\fP
Since 4.0
.TP
.B \fBblock\-dirty\-bitmap\-merge\fP
Since 4.0
.TP
.B \fBblockdev\-backup\fP
Since 2.3
.TP
.B \fBblockdev\-snapshot\fP
Since 2.5
.TP
.B \fBblockdev\-snapshot\-internal\-sync\fP
Since 1.7
.TP
.B \fBblockdev\-snapshot\-sync\fP
since 1.1
.TP
.B \fBdrive\-backup\fP
Since 1.6
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBdrive\-backup\fP is deprecated.  Use member
\fBblockdev\-backup\fP instead.
.UNINDENT
.SS Since
.sp
1.1
.SS \fBAbortWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBAbort\fP
Not documented
.UNINDENT
.SS Since
.sp
1.6
.SS \fBBlockDirtyBitmapAddWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBBlockDirtyBitmapAdd\fP
Not documented
.UNINDENT
.SS Since
.sp
2.5
.SS \fBBlockDirtyBitmapWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBBlockDirtyBitmap\fP
Not documented
.UNINDENT
.SS Since
.sp
2.5
.SS \fBBlockDirtyBitmapMergeWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBBlockDirtyBitmapMerge\fP
Not documented
.UNINDENT
.SS Since
.sp
4.0
.SS \fBBlockdevBackupWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBBlockdevBackup\fP
Not documented
.UNINDENT
.SS Since
.sp
2.3
.SS \fBBlockdevSnapshotWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBBlockdevSnapshot\fP
Not documented
.UNINDENT
.SS Since
.sp
2.5
.SS \fBBlockdevSnapshotInternalWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBBlockdevSnapshotInternal\fP
Not documented
.UNINDENT
.SS Since
.sp
1.7
.SS \fBBlockdevSnapshotSyncWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBBlockdevSnapshotSync\fP
Not documented
.UNINDENT
.SS Since
.sp
1.1
.SS \fBDriveBackupWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBDriveBackup\fP
Not documented
.UNINDENT
.SS Since
.sp
1.6
.SS \fBTransactionAction\fP (Object)
.sp
A discriminated record of operations that can be performed with
\fBtransaction\fP\&.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBTransactionActionKind\fP
Not documented
.TP
.B The members of \fBAbortWrapper\fP when \fBtype\fP is \fB"abort"\fP
.TP
.B The members of \fBBlockDirtyBitmapAddWrapper\fP when \fBtype\fP is \fB"block\-dirty\-bitmap\-add"\fP
.TP
.B The members of \fBBlockDirtyBitmapWrapper\fP when \fBtype\fP is \fB"block\-dirty\-bitmap\-remove"\fP
.TP
.B The members of \fBBlockDirtyBitmapWrapper\fP when \fBtype\fP is \fB"block\-dirty\-bitmap\-clear"\fP
.TP
.B The members of \fBBlockDirtyBitmapWrapper\fP when \fBtype\fP is \fB"block\-dirty\-bitmap\-enable"\fP
.TP
.B The members of \fBBlockDirtyBitmapWrapper\fP when \fBtype\fP is \fB"block\-dirty\-bitmap\-disable"\fP
.TP
.B The members of \fBBlockDirtyBitmapMergeWrapper\fP when \fBtype\fP is \fB"block\-dirty\-bitmap\-merge"\fP
.TP
.B The members of \fBBlockdevBackupWrapper\fP when \fBtype\fP is \fB"blockdev\-backup"\fP
.TP
.B The members of \fBBlockdevSnapshotWrapper\fP when \fBtype\fP is \fB"blockdev\-snapshot"\fP
.TP
.B The members of \fBBlockdevSnapshotInternalWrapper\fP when \fBtype\fP is \fB"blockdev\-snapshot\-internal\-sync"\fP
.TP
.B The members of \fBBlockdevSnapshotSyncWrapper\fP when \fBtype\fP is \fB"blockdev\-snapshot\-sync"\fP
.TP
.B The members of \fBDriveBackupWrapper\fP when \fBtype\fP is \fB"drive\-backup"\fP
.UNINDENT
.SS Since
.sp
1.1
.SS \fBTransactionProperties\fP (Object)
.sp
Optional arguments to modify the behavior of a Transaction.
.SS Members
.INDENT 0.0
.TP
.B \fBcompletion\-mode\fP: \fBActionCompletionMode\fP (optional)
Controls how jobs launched asynchronously by
Actions will complete or fail as a group.
See \fBActionCompletionMode\fP for details.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBtransaction\fP (Command)
.sp
Executes a number of transactionable QMP commands atomically. If any
operation fails, then the entire set of actions will be abandoned and the
appropriate error returned.
.sp
For external snapshots, the dictionary contains the device, the file to use for
the new snapshot, and the format.  The default format, if not specified, is
qcow2.
.sp
Each new snapshot defaults to being created by QEMU (wiping any
contents if the file already exists), but it is also possible to reuse
an externally\-created file.  In the latter case, you should ensure that
the new image file has the same contents as the current one; QEMU cannot
perform any meaningful check.  Typically this is achieved by using the
current image file as the backing file for the new image.
.sp
On failure, the original disks pre\-snapshot attempt will be used.
.sp
For internal snapshots, the dictionary contains the device and the
snapshot\(aqs name.  If an internal snapshot matching name already exists,
the request will be rejected.  Only some image formats support it, for
example, qcow2, and rbd,
.sp
On failure, qemu will try delete the newly created internal snapshot in the
transaction.  When an I/O error occurs during deletion, the user needs to fix
it later with qemu\-img or other command.
.SS Arguments
.INDENT 0.0
.TP
.B \fBactions\fP: \fBarray of TransactionAction\fP
List of \fBTransactionAction\fP;
information needed for the respective operations.
.TP
.B \fBproperties\fP: \fBTransactionProperties\fP (optional)
structure of additional options to control the
execution of the transaction. See \fBTransactionProperties\fP
for additional detail.
.UNINDENT
.SS Returns
.sp
nothing on success
.sp
Errors depend on the operations of the transaction
.SS Note
.sp
The transaction aborts on the first failure.  Therefore, there will be
information on only one failed operation returned in an error condition, and
subsequent actions will not have been attempted.
.SS Since
.sp
1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "transaction",
     "arguments": { "actions": [
         { "type": "blockdev\-snapshot\-sync", "data" : { "device": "ide\-hd0",
                                     "snapshot\-file": "/some/place/my\-image",
                                     "format": "qcow2" } },
         { "type": "blockdev\-snapshot\-sync", "data" : { "node\-name": "myfile",
                                     "snapshot\-file": "/some/place/my\-image2",
                                     "snapshot\-node\-name": "node3432",
                                     "mode": "existing",
                                     "format": "qcow2" } },
         { "type": "blockdev\-snapshot\-sync", "data" : { "device": "ide\-hd1",
                                     "snapshot\-file": "/some/place/my\-image2",
                                     "mode": "existing",
                                     "format": "qcow2" } },
         { "type": "blockdev\-snapshot\-internal\-sync", "data" : {
                                     "device": "ide\-hd2",
                                     "name": "snapshot0" } } ] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH TRACING
.SS \fBTraceEventState\fP (Enum)
.sp
State of a tracing event.
.SS Values
.INDENT 0.0
.TP
.B \fBunavailable\fP
The event is statically disabled.
.TP
.B \fBdisabled\fP
The event is dynamically disabled.
.TP
.B \fBenabled\fP
The event is dynamically enabled.
.UNINDENT
.SS Since
.sp
2.2
.SS \fBTraceEventInfo\fP (Object)
.sp
Information of a tracing event.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
Event name.
.TP
.B \fBstate\fP: \fBTraceEventState\fP
Tracing state.
.TP
.B \fBvcpu\fP: \fBboolean\fP
Whether this is a per\-vCPU event (since 2.7).
.UNINDENT
An event is per\-vCPU if it has the "vcpu" property in the "trace\-events"
files.
.SS Since
.sp
2.2
.SS \fBtrace\-event\-get\-state\fP (Command)
.sp
Query the state of events.
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
Event name pattern (case\-sensitive glob).
.TP
.B \fBvcpu\fP: \fBint\fP (optional)
The vCPU to query (any by default; since 2.7).
.UNINDENT
.SS Returns
.sp
a list of \fBTraceEventInfo\fP for the matching events
.sp
An event is returned if:
.INDENT 0.0
.IP \(bu 2
its name matches the \fBname\fP pattern, and
.IP \(bu 2
if \fBvcpu\fP is given, the event has the "vcpu" property.
.UNINDENT
.sp
Therefore, if \fBvcpu\fP is given, the operation will only match per\-vCPU events,
returning their state on the specified vCPU. Special case: if \fBname\fP is an
exact match, \fBvcpu\fP is given and the event does not have the "vcpu" property,
an error is returned.
.SS Since
.sp
2.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "trace\-event\-get\-state",
     "arguments": { "name": "qemu_memalign" } }
<\- { "return": [ { "name": "qemu_memalign", "state": "disabled", "vcpu": false } ] }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBtrace\-event\-set\-state\fP (Command)
.sp
Set the dynamic tracing state of events.
.SS Arguments
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
Event name pattern (case\-sensitive glob).
.TP
.B \fBenable\fP: \fBboolean\fP
Whether to enable tracing.
.TP
.B \fBignore\-unavailable\fP: \fBboolean\fP (optional)
Do not match unavailable events with \fBname\fP\&.
.TP
.B \fBvcpu\fP: \fBint\fP (optional)
The vCPU to act upon (all by default; since 2.7).
.UNINDENT
An event\(aqs state is modified if:
\- its name matches the \fBname\fP pattern, and
\- if \fBvcpu\fP is given, the event has the "vcpu" property.
.sp
Therefore, if \fBvcpu\fP is given, the operation will only match per\-vCPU events,
setting their state on the specified vCPU. Special case: if \fBname\fP is an exact
match, \fBvcpu\fP is given and the event does not have the "vcpu" property, an
error is returned.
.SS Since
.sp
2.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "trace\-event\-set\-state",
     "arguments": { "name": "qemu_memalign", "enable": true } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH COMPATIBILITY POLICY
.SS \fBCompatPolicyInput\fP (Enum)
.sp
Policy for handling "funny" input.
.SS Values
.INDENT 0.0
.TP
.B \fBaccept\fP
Accept silently
.TP
.B \fBreject\fP
Reject with an error
.TP
.B \fBcrash\fP
abort() the process
.UNINDENT
.SS Since
.sp
6.0
.SS \fBCompatPolicyOutput\fP (Enum)
.sp
Policy for handling "funny" output.
.SS Values
.INDENT 0.0
.TP
.B \fBaccept\fP
Pass on unchanged
.TP
.B \fBhide\fP
Filter out
.UNINDENT
.SS Since
.sp
6.0
.SS \fBCompatPolicy\fP (Object)
.sp
Policy for handling deprecated management interfaces.
.sp
This is intended for testing users of the management interfaces.
.sp
Limitation: covers only syntactic aspects of QMP, i.e. stuff tagged
with feature \(aqdeprecated\(aq.  We may want to extend it to cover
semantic aspects and CLI.
.sp
Limitation: deprecated\-output policy \fBhide\fP is not implemented for
enumeration values.  They behave the same as with policy \fBaccept\fP\&.
.SS Members
.INDENT 0.0
.TP
.B \fBdeprecated\-input\fP: \fBCompatPolicyInput\fP (optional)
how to handle deprecated input (default \(aqaccept\(aq)
.TP
.B \fBdeprecated\-output\fP: \fBCompatPolicyOutput\fP (optional)
how to handle deprecated output (default \(aqaccept\(aq)
.TP
.B \fBunstable\-input\fP: \fBCompatPolicyInput\fP (optional)
how to handle unstable input (default \(aqaccept\(aq)
(since 6.2)
.TP
.B \fBunstable\-output\fP: \fBCompatPolicyOutput\fP (optional)
how to handle unstable output (default \(aqaccept\(aq)
(since 6.2)
.UNINDENT
.SS Since
.sp
6.0
.SH QMP MONITOR CONTROL
.SS \fBqmp_capabilities\fP (Command)
.sp
Enable QMP capabilities.
.sp
Arguments:
.SS Arguments
.INDENT 0.0
.TP
.B \fBenable\fP: \fBarray of QMPCapability\fP (optional)
An optional list of QMPCapability values to enable.  The
client must not enable any capability that is not
mentioned in the QMP greeting message.  If the field is not
provided, it means no QMP capabilities will be enabled.
(since 2.12)
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "qmp_capabilities",
     "arguments": { "enable": [ "oob" ] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Notes
.sp
This command is valid exactly when first connecting: it must be
issued before any other command will be accepted, and will fail once the
monitor is accepting other commands. (see qemu docs/interop/qmp\-spec.txt)
.sp
The QMP client needs to explicitly enable QMP capabilities, otherwise
all the QMP capabilities will be turned off by default.
.SS Since
.sp
0.13
.SS \fBQMPCapability\fP (Enum)
.sp
Enumeration of capabilities to be advertised during initial client
connection, used for agreeing on particular QMP extension behaviors.
.SS Values
.INDENT 0.0
.TP
.B \fBoob\fP
QMP ability to support out\-of\-band requests.
(Please refer to qmp\-spec.txt for more information on OOB)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBVersionTriple\fP (Object)
.sp
A three\-part version number.
.SS Members
.INDENT 0.0
.TP
.B \fBmajor\fP: \fBint\fP
The major version number.
.TP
.B \fBminor\fP: \fBint\fP
The minor version number.
.TP
.B \fBmicro\fP: \fBint\fP
The micro version number.
.UNINDENT
.SS Since
.sp
2.4
.SS \fBVersionInfo\fP (Object)
.sp
A description of QEMU\(aqs version.
.SS Members
.INDENT 0.0
.TP
.B \fBqemu\fP: \fBVersionTriple\fP
The version of QEMU.  By current convention, a micro
version of 50 signifies a development branch.  A micro version
greater than or equal to 90 signifies a release candidate for
the next minor version.  A micro version of less than 50
signifies a stable release.
.TP
.B \fBpackage\fP: \fBstring\fP
QEMU will always set this field to an empty string.  Downstream
versions of QEMU should set this to a non\-empty string.  The
exact format depends on the downstream however it highly
recommended that a unique name is used.
.UNINDENT
.SS Since
.sp
0.14
.SS \fBquery\-version\fP (Command)
.sp
Returns the current version of QEMU.
.SS Returns
.sp
A \fBVersionInfo\fP object describing the current version of QEMU.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-version" }
<\- {
      "return":{
         "qemu":{
            "major":0,
            "minor":11,
            "micro":5
         },
         "package":""
      }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBCommandInfo\fP (Object)
.sp
Information about a QMP command
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
The command name
.UNINDENT
.SS Since
.sp
0.14
.SS \fBquery\-commands\fP (Command)
.sp
Return a list of supported QMP commands by this server
.SS Returns
.sp
A list of \fBCommandInfo\fP for all supported commands
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-commands" }
<\- {
     "return":[
        {
           "name":"query\-balloon"
        },
        {
           "name":"system_powerdown"
        }
     ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Note
.sp
This example has been shortened as the real response is too long.
.SS \fBquit\fP (Command)
.sp
This command will cause the QEMU process to exit gracefully.  While every
attempt is made to send the QMP response before terminating, this is not
guaranteed.  When using this interface, a premature EOF would not be
unexpected.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "quit" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMonitorMode\fP (Enum)
.sp
An enumeration of monitor modes.
.SS Values
.INDENT 0.0
.TP
.B \fBreadline\fP
HMP monitor (human\-oriented command line interface)
.TP
.B \fBcontrol\fP
QMP monitor (JSON\-based machine interface)
.UNINDENT
.SS Since
.sp
5.0
.SS \fBMonitorOptions\fP (Object)
.sp
Options to be used for adding a new monitor.
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP (optional)
Name of the monitor
.TP
.B \fBmode\fP: \fBMonitorMode\fP (optional)
.INDENT 7.0
.TP
.B Selects the monitor mode (default: readline in the system
emulator, control in qemu\-storage\-daemon)
.UNINDENT
.TP
.B \fBpretty\fP: \fBboolean\fP (optional)
Enables pretty printing (QMP only)
.TP
.B \fBchardev\fP: \fBstring\fP
Name of a character device to expose the monitor on
.UNINDENT
.SS Since
.sp
5.0
.SH QMP INTROSPECTION
.SS \fBquery\-qmp\-schema\fP (Command)
.sp
Command query\-qmp\-schema exposes the QMP wire ABI as an array of
SchemaInfo.  This lets QMP clients figure out what commands and
events are available in this QEMU, and their parameters and results.
.sp
However, the SchemaInfo can\(aqt reflect all the rules and restrictions
that apply to QMP.  It\(aqs interface introspection (figuring out
what\(aqs there), not interface specification.  The specification is in
the QAPI schema.
.sp
Furthermore, while we strive to keep the QMP wire format
backwards\-compatible across qemu versions, the introspection output
is not guaranteed to have the same stability.  For example, one
version of qemu may list an object member as an optional
non\-variant, while another lists the same member only through the
object\(aqs variants; or the type of a member may change from a generic
string into a specific enum or from one specific type into an
alternate that includes the original type alongside something else.
.SS Returns
.sp
array of \fBSchemaInfo\fP, where each element describes an
entity in the ABI: command, event, type, ...
.sp
The order of the various SchemaInfo is unspecified; however, all
names are guaranteed to be unique (no name will be duplicated with
different meta\-types).
.SS Note
.sp
the QAPI schema is also used to help define \fIinternal\fP
interfaces, by defining QAPI types.  These are not part of the QMP
wire ABI, and therefore not returned by this command.
.SS Since
.sp
2.5
.SS \fBSchemaMetaType\fP (Enum)
.sp
This is a \fBSchemaInfo\fP\(aqs meta type, i.e. the kind of entity it
describes.
.SS Values
.INDENT 0.0
.TP
.B \fBbuiltin\fP
a predefined type such as \(aqint\(aq or \(aqbool\(aq.
.TP
.B \fBenum\fP
an enumeration type
.TP
.B \fBarray\fP
an array type
.TP
.B \fBobject\fP
an object type (struct or union)
.TP
.B \fBalternate\fP
an alternate type
.TP
.B \fBcommand\fP
a QMP command
.TP
.B \fBevent\fP
a QMP event
.UNINDENT
.SS Since
.sp
2.5
.SS \fBSchemaInfo\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the entity\(aqs name, inherited from \fBbase\fP\&.
The SchemaInfo is always referenced by this name.
Commands and events have the name defined in the QAPI schema.
Unlike command and event names, type names are not part of
the wire ABI.  Consequently, type names are meaningless
strings here, although they are still guaranteed unique
regardless of \fBmeta\-type\fP\&.
.TP
.B \fBmeta\-type\fP: \fBSchemaMetaType\fP
the entity\(aqs meta type, inherited from \fBbase\fP\&.
.TP
.B \fBfeatures\fP: \fBarray of string\fP (optional)
names of features associated with the entity, in no
particular order.
(since 4.1 for object types, 4.2 for commands, 5.0 for
the rest)
.TP
.B The members of \fBSchemaInfoBuiltin\fP when \fBmeta\-type\fP is \fB"builtin"\fP
.TP
.B The members of \fBSchemaInfoEnum\fP when \fBmeta\-type\fP is \fB"enum"\fP
.TP
.B The members of \fBSchemaInfoArray\fP when \fBmeta\-type\fP is \fB"array"\fP
.TP
.B The members of \fBSchemaInfoObject\fP when \fBmeta\-type\fP is \fB"object"\fP
.TP
.B The members of \fBSchemaInfoAlternate\fP when \fBmeta\-type\fP is \fB"alternate"\fP
.TP
.B The members of \fBSchemaInfoCommand\fP when \fBmeta\-type\fP is \fB"command"\fP
.TP
.B The members of \fBSchemaInfoEvent\fP when \fBmeta\-type\fP is \fB"event"\fP
.UNINDENT
Additional members depend on the value of \fBmeta\-type\fP\&.
.SS Since
.sp
2.5
.SS \fBSchemaInfoBuiltin\fP (Object)
.sp
Additional SchemaInfo members for meta\-type \(aqbuiltin\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBjson\-type\fP: \fBJSONType\fP
the JSON type used for this type on the wire.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBJSONType\fP (Enum)
.sp
The four primitive and two structured types according to RFC 8259
section 1, plus \(aqint\(aq (split off \(aqnumber\(aq), plus the obvious top
type \(aqvalue\(aq.
.SS Values
.INDENT 0.0
.TP
.B \fBstring\fP
Not documented
.TP
.B \fBnumber\fP
Not documented
.TP
.B \fBint\fP
Not documented
.TP
.B \fBboolean\fP
Not documented
.TP
.B \fBnull\fP
Not documented
.TP
.B \fBobject\fP
Not documented
.TP
.B \fBarray\fP
Not documented
.TP
.B \fBvalue\fP
Not documented
.UNINDENT
.SS Since
.sp
2.5
.SS \fBSchemaInfoEnum\fP (Object)
.sp
Additional SchemaInfo members for meta\-type \(aqenum\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBmembers\fP: \fBarray of SchemaInfoEnumMember\fP
the enum type\(aqs members, in no particular order
(since 6.2).
.TP
.B \fBvalues\fP: \fBarray of string\fP
the enumeration type\(aqs member names, in no particular order.
Redundant with \fBmembers\fP\&.  Just for backward compatibility.
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBvalues\fP is deprecated.  Use \fBmembers\fP instead.
.UNINDENT
Values of this type are JSON string on the wire.
.SS Since
.sp
2.5
.SS \fBSchemaInfoEnumMember\fP (Object)
.sp
An object member.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the member\(aqs name, as defined in the QAPI schema.
.TP
.B \fBfeatures\fP: \fBarray of string\fP (optional)
names of features associated with the member, in no
particular order.
.UNINDENT
.SS Since
.sp
6.2
.SS \fBSchemaInfoArray\fP (Object)
.sp
Additional SchemaInfo members for meta\-type \(aqarray\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBelement\-type\fP: \fBstring\fP
the array type\(aqs element type.
.UNINDENT
Values of this type are JSON array on the wire.
.SS Since
.sp
2.5
.SS \fBSchemaInfoObject\fP (Object)
.sp
Additional SchemaInfo members for meta\-type \(aqobject\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBmembers\fP: \fBarray of SchemaInfoObjectMember\fP
the object type\(aqs (non\-variant) members, in no particular order.
.TP
.B \fBtag\fP: \fBstring\fP (optional)
the name of the member serving as type tag.
An element of \fBmembers\fP with this name must exist.
.TP
.B \fBvariants\fP: \fBarray of SchemaInfoObjectVariant\fP (optional)
variant members, i.e. additional members that
depend on the type tag\(aqs value.  Present exactly when
\fBtag\fP is present.  The variants are in no particular order,
and may even differ from the order of the values of the
enum type of the \fBtag\fP\&.
.UNINDENT
Values of this type are JSON object on the wire.
.SS Since
.sp
2.5
.SS \fBSchemaInfoObjectMember\fP (Object)
.sp
An object member.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the member\(aqs name, as defined in the QAPI schema.
.TP
.B \fBtype\fP: \fBstring\fP
the name of the member\(aqs type.
.TP
.B \fBdefault\fP: \fBvalue\fP (optional)
default when used as command parameter.
If absent, the parameter is mandatory.
If present, the value must be null.  The parameter is
optional, and behavior when it\(aqs missing is not specified
here.
Future extension: if present and non\-null, the parameter
is optional, and defaults to this value.
.TP
.B \fBfeatures\fP: \fBarray of string\fP (optional)
names of features associated with the member, in no
particular order.  (since 5.0)
.UNINDENT
.SS Since
.sp
2.5
.SS \fBSchemaInfoObjectVariant\fP (Object)
.sp
The variant members for a value of the type tag.
.SS Members
.INDENT 0.0
.TP
.B \fBcase\fP: \fBstring\fP
a value of the type tag.
.TP
.B \fBtype\fP: \fBstring\fP
the name of the object type that provides the variant members
when the type tag has value \fBcase\fP\&.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBSchemaInfoAlternate\fP (Object)
.sp
Additional SchemaInfo members for meta\-type \(aqalternate\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBmembers\fP: \fBarray of SchemaInfoAlternateMember\fP
the alternate type\(aqs members, in no particular order.
The members\(aq wire encoding is distinct, see
docs/devel/qapi\-code\-gen.txt section Alternate types.
.UNINDENT
On the wire, this can be any of the members.
.SS Since
.sp
2.5
.SS \fBSchemaInfoAlternateMember\fP (Object)
.sp
An alternate member.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBstring\fP
the name of the member\(aqs type.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBSchemaInfoCommand\fP (Object)
.sp
Additional SchemaInfo members for meta\-type \(aqcommand\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBarg\-type\fP: \fBstring\fP
the name of the object type that provides the command\(aqs
parameters.
.TP
.B \fBret\-type\fP: \fBstring\fP
the name of the command\(aqs result type.
.TP
.B \fBallow\-oob\fP: \fBboolean\fP (optional)
whether the command allows out\-of\-band execution,
defaults to false (Since: 2.12)
.UNINDENT
.SS TODO
.sp
\fBsuccess\-response\fP (currently irrelevant, because it\(aqs QGA, not QMP)
.SS Since
.sp
2.5
.SS \fBSchemaInfoEvent\fP (Object)
.sp
Additional SchemaInfo members for meta\-type \(aqevent\(aq.
.SS Members
.INDENT 0.0
.TP
.B \fBarg\-type\fP: \fBstring\fP
the name of the object type that provides the event\(aqs
parameters.
.UNINDENT
.SS Since
.sp
2.5
.SH QEMU OBJECT MODEL (QOM)
.SS \fBObjectPropertyInfo\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the name of the property
.TP
.B \fBtype\fP: \fBstring\fP
the type of the property.  This will typically come in one of four
forms:
.INDENT 7.0
.IP 1. 3
A primitive type such as \(aqu8\(aq, \(aqu16\(aq, \(aqbool\(aq, \(aqstr\(aq, or \(aqdouble\(aq.
These types are mapped to the appropriate JSON type.
.IP 2. 3
A child type in the form \(aqchild<subtype>\(aq where subtype is a qdev
device type name.  Child properties create the composition tree.
.IP 3. 3
A link type in the form \(aqlink<subtype>\(aq where subtype is a qdev
device type name.  Link properties form the device model graph.
.UNINDENT
.TP
.B \fBdescription\fP: \fBstring\fP (optional)
if specified, the description of the property.
.TP
.B \fBdefault\-value\fP: \fBvalue\fP (optional)
the default value, if any (since 5.0)
.UNINDENT
.SS Since
.sp
1.2
.SS \fBqom\-list\fP (Command)
.sp
This command will list any properties of a object given a path in the object
model.
.SS Arguments
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
the path within the object model.  See \fBqom\-get\fP for a description of
this parameter.
.UNINDENT
.SS Returns
.sp
a list of \fBObjectPropertyInfo\fP that describe the properties of the
object.
.SS Since
.sp
1.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "qom\-list",
     "arguments": { "path": "/chardevs" } }
<\- { "return": [ { "name": "type", "type": "string" },
                 { "name": "parallel0", "type": "child<chardev\-vc>" },
                 { "name": "serial0", "type": "child<chardev\-vc>" },
                 { "name": "mon0", "type": "child<chardev\-stdio>" } ] }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBqom\-get\fP (Command)
.sp
This command will get a property from a object model path and return the
value.
.SS Arguments
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
The path within the object model.  There are two forms of supported
paths\-\-absolute and partial paths.
.sp
Absolute paths are derived from the root object and can follow child<>
or link<> properties.  Since they can follow link<> properties, they
can be arbitrarily long.  Absolute paths look like absolute filenames
and are prefixed  with a leading slash.
.sp
Partial paths look like relative filenames.  They do not begin
with a prefix.  The matching rules for partial paths are subtle but
designed to make specifying objects easy.  At each level of the
composition tree, the partial path is matched as an absolute path.
The first match is not returned.  At least two matches are searched
for.  A successful result is only returned if only one match is
found.  If more than one match is found, a flag is return to
indicate that the match was ambiguous.
.TP
.B \fBproperty\fP: \fBstring\fP
The property name to read
.UNINDENT
.SS Returns
.sp
The property value.  The type depends on the property
type. child<> and link<> properties are returned as #str
pathnames.  All integer property types (u8, u16, etc) are
returned as #int.
.SS Since
.sp
1.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Use absolute path

\-> { "execute": "qom\-get",
     "arguments": { "path": "/machine/unattached/device[0]",
                    "property": "hotplugged" } }
<\- { "return": false }

2. Use partial path

\-> { "execute": "qom\-get",
     "arguments": { "path": "unattached/sysbus",
                    "property": "type" } }
<\- { "return": "System" }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBqom\-set\fP (Command)
.sp
This command will set a property from a object model path.
.SS Arguments
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
see \fBqom\-get\fP for a description of this parameter
.TP
.B \fBproperty\fP: \fBstring\fP
the property name to set
.TP
.B \fBvalue\fP: \fBvalue\fP
a value who\(aqs type is appropriate for the property type.  See \fBqom\-get\fP
for a description of type mapping.
.UNINDENT
.SS Since
.sp
1.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "qom\-set",
     "arguments": { "path": "/machine",
                    "property": "graphics",
                    "value": false } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBObjectTypeInfo\fP (Object)
.sp
This structure describes a search result from \fBqom\-list\-types\fP
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the type name found in the search
.TP
.B \fBabstract\fP: \fBboolean\fP (optional)
the type is abstract and can\(aqt be directly instantiated.
Omitted if false. (since 2.10)
.TP
.B \fBparent\fP: \fBstring\fP (optional)
Name of parent type, if any (since 2.10)
.UNINDENT
.SS Since
.sp
1.1
.SS \fBqom\-list\-types\fP (Command)
.sp
This command will return a list of types given search parameters
.SS Arguments
.INDENT 0.0
.TP
.B \fBimplements\fP: \fBstring\fP (optional)
if specified, only return types that implement this type name
.TP
.B \fBabstract\fP: \fBboolean\fP (optional)
if true, include abstract types in the results
.UNINDENT
.SS Returns
.sp
a list of \fBObjectTypeInfo\fP or an empty list if no results are found
.SS Since
.sp
1.1
.SS \fBqom\-list\-properties\fP (Command)
.sp
List properties associated with a QOM object.
.SS Arguments
.INDENT 0.0
.TP
.B \fBtypename\fP: \fBstring\fP
the type name of an object
.UNINDENT
.SS Note
.sp
objects can create properties at runtime, for example to describe
links between different devices and/or objects. These properties
are not included in the output of this command.
.SS Returns
.sp
a list of ObjectPropertyInfo describing object properties
.SS Since
.sp
2.12
.SS \fBCanHostSocketcanProperties\fP (Object)
.sp
Properties for can\-host\-socketcan objects.
.SS Members
.INDENT 0.0
.TP
.B \fBif\fP: \fBstring\fP
interface name of the host system CAN bus to connect to
.TP
.B \fBcanbus\fP: \fBstring\fP
object ID of the can\-bus object to connect to the host interface
.UNINDENT
.SS Since
.sp
2.12
.SS \fBColoCompareProperties\fP (Object)
.sp
Properties for colo\-compare objects.
.SS Members
.INDENT 0.0
.TP
.B \fBprimary_in\fP: \fBstring\fP
name of the character device backend to use for the primary
input (incoming packets are redirected to \fBoutdev\fP)
.TP
.B \fBsecondary_in\fP: \fBstring\fP
name of the character device backend to use for secondary
input (incoming packets are only compared to the input on
\fBprimary_in\fP and then dropped)
.TP
.B \fBoutdev\fP: \fBstring\fP
name of the character device backend to use for output
.TP
.B \fBiothread\fP: \fBstring\fP
name of the iothread to run in
.TP
.B \fBnotify_dev\fP: \fBstring\fP (optional)
name of the character device backend to be used to communicate
with the remote colo\-frame (only for Xen COLO)
.TP
.B \fBcompare_timeout\fP: \fBint\fP (optional)
the maximum time to hold a packet from \fBprimary_in\fP for
comparison with an incoming packet on \fBsecondary_in\fP in
milliseconds (default: 3000)
.TP
.B \fBexpired_scan_cycle\fP: \fBint\fP (optional)
the interval at which colo\-compare checks whether
packets from \fBprimary\fP have timed out, in milliseconds
(default: 3000)
.TP
.B \fBmax_queue_size\fP: \fBint\fP (optional)
the maximum number of packets to keep in the queue for
comparing with incoming packets from \fBsecondary_in\fP\&.  If the
queue is full and additional packets are received, the
additional packets are dropped. (default: 1024)
.TP
.B \fBvnet_hdr_support\fP: \fBboolean\fP (optional)
if true, vnet header support is enabled (default: false)
.UNINDENT
.SS Since
.sp
2.8
.SS \fBCryptodevBackendProperties\fP (Object)
.sp
Properties for cryptodev\-backend and cryptodev\-backend\-builtin objects.
.SS Members
.INDENT 0.0
.TP
.B \fBqueues\fP: \fBint\fP (optional)
the number of queues for the cryptodev backend. Ignored for
cryptodev\-backend and must be 1 for cryptodev\-backend\-builtin.
(default: 1)
.UNINDENT
.SS Since
.sp
2.8
.SS \fBCryptodevVhostUserProperties\fP (Object)
.sp
Properties for cryptodev\-vhost\-user objects.
.SS Members
.INDENT 0.0
.TP
.B \fBchardev\fP: \fBstring\fP
the name of a Unix domain socket character device that connects to
the vhost\-user server
.TP
.B The members of \fBCryptodevBackendProperties\fP
.UNINDENT
.SS Since
.sp
2.12
.SS \fBDBusVMStateProperties\fP (Object)
.sp
Properties for dbus\-vmstate objects.
.SS Members
.INDENT 0.0
.TP
.B \fBaddr\fP: \fBstring\fP
the name of the DBus bus to connect to
.TP
.B \fBid\-list\fP: \fBstring\fP (optional)
a comma separated list of DBus IDs of helpers whose data should be
included in the VM state on migration
.UNINDENT
.SS Since
.sp
5.0
.SS \fBNetfilterInsert\fP (Enum)
.sp
Indicates where to insert a netfilter relative to a given other filter.
.SS Values
.INDENT 0.0
.TP
.B \fBbefore\fP
insert before the specified filter
.TP
.B \fBbehind\fP
insert behind the specified filter
.UNINDENT
.SS Since
.sp
5.0
.SS \fBNetfilterProperties\fP (Object)
.sp
Properties for objects of classes derived from netfilter.
.SS Members
.INDENT 0.0
.TP
.B \fBnetdev\fP: \fBstring\fP
id of the network device backend to filter
.TP
.B \fBqueue\fP: \fBNetFilterDirection\fP (optional)
indicates which queue(s) to filter (default: all)
.TP
.B \fBstatus\fP: \fBstring\fP (optional)
indicates whether the filter is enabled ("on") or disabled ("off")
(default: "on")
.TP
.B \fBposition\fP: \fBstring\fP (optional)
specifies where the filter should be inserted in the filter list.
"head" means the filter is inserted at the head of the filter list,
before any existing filters.
"tail" means the filter is inserted at the tail of the filter list,
behind any existing filters (default).
"id=<id>" means the filter is inserted before or behind the filter
specified by <id>, depending on the \fBinsert\fP property.
(default: "tail")
.TP
.B \fBinsert\fP: \fBNetfilterInsert\fP (optional)
where to insert the filter relative to the filter given in \fBposition\fP\&.
Ignored if \fBposition\fP is "head" or "tail". (default: behind)
.UNINDENT
.SS Since
.sp
2.5
.SS \fBFilterBufferProperties\fP (Object)
.sp
Properties for filter\-buffer objects.
.SS Members
.INDENT 0.0
.TP
.B \fBinterval\fP: \fBint\fP
a non\-zero interval in microseconds.  All packets arriving in the
given interval are delayed until the end of the interval.
.TP
.B The members of \fBNetfilterProperties\fP
.UNINDENT
.SS Since
.sp
2.5
.SS \fBFilterDumpProperties\fP (Object)
.sp
Properties for filter\-dump objects.
.SS Members
.INDENT 0.0
.TP
.B \fBfile\fP: \fBstring\fP
the filename where the dumped packets should be stored
.TP
.B \fBmaxlen\fP: \fBint\fP (optional)
maximum number of bytes in a packet that are stored (default: 65536)
.TP
.B The members of \fBNetfilterProperties\fP
.UNINDENT
.SS Since
.sp
2.5
.SS \fBFilterMirrorProperties\fP (Object)
.sp
Properties for filter\-mirror objects.
.SS Members
.INDENT 0.0
.TP
.B \fBoutdev\fP: \fBstring\fP
the name of a character device backend to which all incoming packets
are mirrored
.TP
.B \fBvnet_hdr_support\fP: \fBboolean\fP (optional)
if true, vnet header support is enabled (default: false)
.TP
.B The members of \fBNetfilterProperties\fP
.UNINDENT
.SS Since
.sp
2.6
.SS \fBFilterRedirectorProperties\fP (Object)
.sp
Properties for filter\-redirector objects.
.sp
At least one of \fBindev\fP or \fBoutdev\fP must be present.  If both are present, they
must not refer to the same character device backend.
.SS Members
.INDENT 0.0
.TP
.B \fBindev\fP: \fBstring\fP (optional)
the name of a character device backend from which packets are
received and redirected to the filtered network device
.TP
.B \fBoutdev\fP: \fBstring\fP (optional)
the name of a character device backend to which all incoming packets
are redirected
.TP
.B \fBvnet_hdr_support\fP: \fBboolean\fP (optional)
if true, vnet header support is enabled (default: false)
.TP
.B The members of \fBNetfilterProperties\fP
.UNINDENT
.SS Since
.sp
2.6
.SS \fBFilterRewriterProperties\fP (Object)
.sp
Properties for filter\-rewriter objects.
.SS Members
.INDENT 0.0
.TP
.B \fBvnet_hdr_support\fP: \fBboolean\fP (optional)
if true, vnet header support is enabled (default: false)
.TP
.B The members of \fBNetfilterProperties\fP
.UNINDENT
.SS Since
.sp
2.8
.SS \fBInputBarrierProperties\fP (Object)
.sp
Properties for input\-barrier objects.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the screen name as declared in the screens section of barrier.conf
.TP
.B \fBserver\fP: \fBstring\fP (optional)
hostname of the Barrier server (default: "localhost")
.TP
.B \fBport\fP: \fBstring\fP (optional)
TCP port of the Barrier server (default: "24800")
.TP
.B \fBx\-origin\fP: \fBstring\fP (optional)
x coordinate of the leftmost pixel on the guest screen
(default: "0")
.TP
.B \fBy\-origin\fP: \fBstring\fP (optional)
y coordinate of the topmost pixel on the guest screen
(default: "0")
.TP
.B \fBwidth\fP: \fBstring\fP (optional)
the width of secondary screen in pixels (default: "1920")
.TP
.B \fBheight\fP: \fBstring\fP (optional)
the height of secondary screen in pixels (default: "1080")
.UNINDENT
.SS Since
.sp
4.2
.SS \fBInputLinuxProperties\fP (Object)
.sp
Properties for input\-linux objects.
.SS Members
.INDENT 0.0
.TP
.B \fBevdev\fP: \fBstring\fP
the path of the host evdev device to use
.TP
.B \fBgrab_all\fP: \fBboolean\fP (optional)
if true, grab is toggled for all devices (e.g. both keyboard and
mouse) instead of just one device (default: false)
.TP
.B \fBrepeat\fP: \fBboolean\fP (optional)
enables auto\-repeat events (default: false)
.TP
.B \fBgrab\-toggle\fP: \fBGrabToggleKeys\fP (optional)
the key or key combination that toggles device grab
(default: ctrl\-ctrl)
.UNINDENT
.SS Since
.sp
2.6
.SS \fBEventLoopBaseProperties\fP (Object)
.sp
Common properties for event loops
.SS Members
.INDENT 0.0
.TP
.B \fBaio\-max\-batch\fP: \fBint\fP (optional)
maximum number of requests in a batch for the AIO engine,
0 means that the engine will use its default.
(default: 0)
.TP
.B \fBthread\-pool\-min\fP: \fBint\fP (optional)
minimum number of threads reserved in the thread pool
(default:0)
.TP
.B \fBthread\-pool\-max\fP: \fBint\fP (optional)
maximum number of threads the thread pool can contain
(default:64)
.UNINDENT
.SS Since
.sp
7.1
.SS \fBIothreadProperties\fP (Object)
.sp
Properties for iothread objects.
.SS Members
.INDENT 0.0
.TP
.B \fBpoll\-max\-ns\fP: \fBint\fP (optional)
the maximum number of nanoseconds to busy wait for events.
0 means polling is disabled (default: 32768 on POSIX hosts,
0 otherwise)
.TP
.B \fBpoll\-grow\fP: \fBint\fP (optional)
the multiplier used to increase the polling time when the
algorithm detects it is missing events due to not polling long
enough. 0 selects a default behaviour (default: 0)
.TP
.B \fBpoll\-shrink\fP: \fBint\fP (optional)
the divisor used to decrease the polling time when the
algorithm detects it is spending too long polling without
encountering events. 0 selects a default behaviour (default: 0)
.TP
.B The members of \fBEventLoopBaseProperties\fP
.UNINDENT
The \fBaio\-max\-batch\fP option is available since 6.1.
.SS Since
.sp
2.0
.SS \fBMainLoopProperties\fP (Object)
.sp
Properties for the main\-loop object.
.SS Members
.INDENT 0.0
.TP
.B The members of \fBEventLoopBaseProperties\fP
.UNINDENT
.SS Since
.sp
7.1
.SS \fBMemoryBackendProperties\fP (Object)
.sp
Properties for objects of classes derived from memory\-backend.
.SS Members
.INDENT 0.0
.TP
.B \fBmerge\fP: \fBboolean\fP (optional)
if true, mark the memory as mergeable (default depends on the machine
type)
.TP
.B \fBdump\fP: \fBboolean\fP (optional)
if true, include the memory in core dumps (default depends on the
machine type)
.TP
.B \fBhost\-nodes\fP: \fBarray of int\fP (optional)
the list of NUMA host nodes to bind the memory to
.TP
.B \fBpolicy\fP: \fBHostMemPolicy\fP (optional)
the NUMA policy (default: \(aqdefault\(aq)
.TP
.B \fBprealloc\fP: \fBboolean\fP (optional)
if true, preallocate memory (default: false)
.TP
.B \fBprealloc\-threads\fP: \fBint\fP (optional)
number of CPU threads to use for prealloc (default: 1)
.TP
.B \fBprealloc\-context\fP: \fBstring\fP (optional)
thread context to use for creation of preallocation threads
(default: none) (since 7.2)
.TP
.B \fBshare\fP: \fBboolean\fP (optional)
if false, the memory is private to QEMU; if true, it is shared
(default: false)
.TP
.B \fBreserve\fP: \fBboolean\fP (optional)
if true, reserve swap space (or huge pages) if applicable
(default: true) (since 6.1)
.TP
.B \fBsize\fP: \fBint\fP
size of the memory region in bytes
.TP
.B \fBx\-use\-canonical\-path\-for\-ramblock\-id\fP: \fBboolean\fP (optional)
if true, the canonical path is used
for ramblock\-id. Disable this for 4.0
machine types or older to allow
migration with newer QEMU versions.
(default: false generally,
but true for machine types <= 4.0)
.UNINDENT
.SS Note
.sp
prealloc=true and reserve=false cannot be set at the same time. With
reserve=true, the behavior depends on the operating system: for example,
Linux will not reserve swap space for shared file mappings \-\-
"not applicable". In contrast, reserve=false will bail out if it cannot
be configured accordingly.
.SS Since
.sp
2.1
.SS \fBMemoryBackendFileProperties\fP (Object)
.sp
Properties for memory\-backend\-file objects.
.SS Members
.INDENT 0.0
.TP
.B \fBalign\fP: \fBint\fP (optional)
the base address alignment when QEMU mmap(2)s \fBmem\-path\fP\&. Some
backend stores specified by \fBmem\-path\fP require an alignment different
than the default one used by QEMU, e.g. the device DAX /dev/dax0.0
requires 2M alignment rather than 4K. In such cases, users can
specify the required alignment via this option.
0 selects a default alignment (currently the page size). (default: 0)
.TP
.B \fBdiscard\-data\fP: \fBboolean\fP (optional)
if true, the file contents can be destroyed when QEMU exits,
to avoid unnecessarily flushing data to the backing file. Note
that \fBdiscard\-data\fP is only an optimization, and QEMU might
not discard file contents if it aborts unexpectedly or is
terminated using SIGKILL. (default: false)
.TP
.B \fBmem\-path\fP: \fBstring\fP
the path to either a shared memory or huge page filesystem mount
.TP
\fBpmem\fP: \fBboolean\fP (optional) (\fBIf: \fP\fBCONFIG_LIBPMEM\fP)
specifies whether the backing file specified by \fBmem\-path\fP is in
host persistent memory that can be accessed using the SNIA NVM
programming model (e.g. Intel NVDIMM).
.TP
.B \fBreadonly\fP: \fBboolean\fP (optional)
if true, the backing file is opened read\-only; if false, it is
opened read\-write. (default: false)
.TP
.B The members of \fBMemoryBackendProperties\fP
.UNINDENT
.SS Since
.sp
2.1
.SS \fBMemoryBackendMemfdProperties\fP (Object)
.sp
Properties for memory\-backend\-memfd objects.
.sp
The \fBshare\fP boolean option is true by default with memfd.
.SS Members
.INDENT 0.0
.TP
.B \fBhugetlb\fP: \fBboolean\fP (optional)
if true, the file to be created resides in the hugetlbfs filesystem
(default: false)
.TP
.B \fBhugetlbsize\fP: \fBint\fP (optional)
the hugetlb page size on systems that support multiple hugetlb
page sizes (it must be a power of 2 value supported by the
system). 0 selects a default page size. This option is ignored
if \fBhugetlb\fP is false. (default: 0)
.TP
.B \fBseal\fP: \fBboolean\fP (optional)
if true, create a sealed\-file, which will block further resizing of
the memory (default: true)
.TP
.B The members of \fBMemoryBackendProperties\fP
.UNINDENT
.SS Since
.sp
2.12
.SS \fBMemoryBackendEpcProperties\fP (Object)
.sp
Properties for memory\-backend\-epc objects.
.sp
The \fBshare\fP boolean option is true by default with epc
.sp
The \fBmerge\fP boolean option is false by default with epc
.sp
The \fBdump\fP boolean option is false by default with epc
.SS Members
.INDENT 0.0
.TP
.B The members of \fBMemoryBackendProperties\fP
.UNINDENT
.SS Since
.sp
6.2
.SS \fBPrManagerHelperProperties\fP (Object)
.sp
Properties for pr\-manager\-helper objects.
.SS Members
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
the path to a Unix domain socket for connecting to the external helper
.UNINDENT
.SS Since
.sp
2.11
.SS \fBQtestProperties\fP (Object)
.sp
Properties for qtest objects.
.SS Members
.INDENT 0.0
.TP
.B \fBchardev\fP: \fBstring\fP
the chardev to be used to receive qtest commands on.
.TP
.B \fBlog\fP: \fBstring\fP (optional)
the path to a log file
.UNINDENT
.SS Since
.sp
6.0
.SS \fBRemoteObjectProperties\fP (Object)
.sp
Properties for x\-remote\-object objects.
.SS Members
.INDENT 0.0
.TP
.B \fBfd\fP: \fBstring\fP
file descriptor name previously passed via \(aqgetfd\(aq command
.TP
.B \fBdevid\fP: \fBstring\fP
the id of the device to be associated with the file descriptor
.UNINDENT
.SS Since
.sp
6.0
.SS \fBVfioUserServerProperties\fP (Object)
.sp
Properties for x\-vfio\-user\-server objects.
.SS Members
.INDENT 0.0
.TP
.B \fBsocket\fP: \fBSocketAddress\fP
socket to be used by the libvfio\-user library
.TP
.B \fBdevice\fP: \fBstring\fP
the ID of the device to be emulated at the server
.UNINDENT
.SS Since
.sp
7.1
.SS \fBRngProperties\fP (Object)
.sp
Properties for objects of classes derived from rng.
.SS Members
.INDENT 0.0
.TP
.B \fBopened\fP: \fBboolean\fP (optional)
if true, the device is opened immediately when applying this option
and will probably fail when processing the next option. Don\(aqt use;
only provided for compatibility. (default: false)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBopened\fP is deprecated.  Setting true doesn\(aqt make sense,
and false is already the default.
.UNINDENT
.SS Since
.sp
1.3
.SS \fBRngEgdProperties\fP (Object)
.sp
Properties for rng\-egd objects.
.SS Members
.INDENT 0.0
.TP
.B \fBchardev\fP: \fBstring\fP
the name of a character device backend that provides the connection
to the RNG daemon
.TP
.B The members of \fBRngProperties\fP
.UNINDENT
.SS Since
.sp
1.3
.SS \fBRngRandomProperties\fP (Object)
.sp
Properties for rng\-random objects.
.SS Members
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP (optional)
the filename of the device on the host to obtain entropy from
(default: "/dev/urandom")
.TP
.B The members of \fBRngProperties\fP
.UNINDENT
.SS Since
.sp
1.3
.SS \fBSevGuestProperties\fP (Object)
.sp
Properties for sev\-guest objects.
.SS Members
.INDENT 0.0
.TP
.B \fBsev\-device\fP: \fBstring\fP (optional)
SEV device to use (default: "/dev/sev")
.TP
.B \fBdh\-cert\-file\fP: \fBstring\fP (optional)
guest owners DH certificate (encoded with base64)
.TP
.B \fBsession\-file\fP: \fBstring\fP (optional)
guest owners session parameters (encoded with base64)
.TP
.B \fBpolicy\fP: \fBint\fP (optional)
SEV policy value (default: 0x1)
.TP
.B \fBhandle\fP: \fBint\fP (optional)
SEV firmware handle (default: 0)
.TP
.B \fBcbitpos\fP: \fBint\fP (optional)
C\-bit location in page table entry (default: 0)
.TP
.B \fBreduced\-phys\-bits\fP: \fBint\fP
number of bits in physical addresses that become
unavailable when SEV is enabled
.TP
.B \fBkernel\-hashes\fP: \fBboolean\fP (optional)
if true, add hashes of kernel/initrd/cmdline to a
designated guest firmware page for measured boot
with \-kernel (default: false) (since 6.2)
.UNINDENT
.SS Since
.sp
2.12
.SS \fBThreadContextProperties\fP (Object)
.sp
Properties for thread context objects.
.SS Members
.INDENT 0.0
.TP
.B \fBcpu\-affinity\fP: \fBarray of int\fP (optional)
the list of host CPU numbers used as CPU affinity for all
threads created in the thread context (default: QEMU main
thread CPU affinity)
.TP
.B \fBnode\-affinity\fP: \fBarray of int\fP (optional)
the list of host node numbers that will be resolved to a
list of host CPU numbers used as CPU affinity. This is a
shortcut for specifying the list of host CPU numbers
belonging to the host nodes manually by setting
\fBcpu\-affinity\fP\&. (default: QEMU main thread affinity)
.UNINDENT
.SS Since
.sp
7.2
.SS \fBObjectType\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBauthz\-list\fP
Not documented
.TP
.B \fBauthz\-listfile\fP
Not documented
.TP
.B \fBauthz\-pam\fP
Not documented
.TP
.B \fBauthz\-simple\fP
Not documented
.TP
.B \fBcan\-bus\fP
Not documented
.TP
\fBcan\-host\-socketcan\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
Not documented
.TP
.B \fBcolo\-compare\fP
Not documented
.TP
.B \fBcryptodev\-backend\fP
Not documented
.TP
.B \fBcryptodev\-backend\-builtin\fP
Not documented
.TP
.B \fBcryptodev\-backend\-lkcf\fP
Not documented
.TP
\fBcryptodev\-vhost\-user\fP (\fBIf: \fP\fBCONFIG_VHOST_CRYPTO\fP)
Not documented
.TP
.B \fBdbus\-vmstate\fP
Not documented
.TP
.B \fBfilter\-buffer\fP
Not documented
.TP
.B \fBfilter\-dump\fP
Not documented
.TP
.B \fBfilter\-mirror\fP
Not documented
.TP
.B \fBfilter\-redirector\fP
Not documented
.TP
.B \fBfilter\-replay\fP
Not documented
.TP
.B \fBfilter\-rewriter\fP
Not documented
.TP
.B \fBinput\-barrier\fP
Not documented
.TP
\fBinput\-linux\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
Not documented
.TP
.B \fBiothread\fP
Not documented
.TP
.B \fBmain\-loop\fP
Not documented
.TP
\fBmemory\-backend\-epc\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
Not documented
.TP
.B \fBmemory\-backend\-file\fP
Not documented
.TP
\fBmemory\-backend\-memfd\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
Not documented
.TP
.B \fBmemory\-backend\-ram\fP
Not documented
.TP
.B \fBpef\-guest\fP
Not documented
.TP
\fBpr\-manager\-helper\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
Not documented
.TP
.B \fBqtest\fP
Not documented
.TP
.B \fBrng\-builtin\fP
Not documented
.TP
.B \fBrng\-egd\fP
Not documented
.TP
\fBrng\-random\fP (\fBIf: \fP\fBCONFIG_POSIX\fP)
Not documented
.TP
.B \fBsecret\fP
Not documented
.TP
\fBsecret_keyring\fP (\fBIf: \fP\fBCONFIG_SECRET_KEYRING\fP)
Not documented
.TP
.B \fBsev\-guest\fP
Not documented
.TP
.B \fBthread\-context\fP
Not documented
.TP
.B \fBs390\-pv\-guest\fP
Not documented
.TP
.B \fBthrottle\-group\fP
Not documented
.TP
.B \fBtls\-creds\-anon\fP
Not documented
.TP
.B \fBtls\-creds\-psk\fP
Not documented
.TP
.B \fBtls\-creds\-x509\fP
Not documented
.TP
.B \fBtls\-cipher\-suites\fP
Not documented
.TP
.B \fBx\-remote\-object\fP
Not documented
.TP
.B \fBx\-vfio\-user\-server\fP
Not documented
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
Member \fBx\-remote\-object\fP is experimental.
.UNINDENT
.SS Since
.sp
6.0
.SS \fBObjectOptions\fP (Object)
.sp
Describes the options of a user creatable QOM object.
.SS Members
.INDENT 0.0
.TP
.B \fBqom\-type\fP: \fBObjectType\fP
the class name for the object to be created
.TP
.B \fBid\fP: \fBstring\fP
the name of the new object
.TP
.B The members of \fBAuthZListProperties\fP when \fBqom\-type\fP is \fB"authz\-list"\fP
.TP
.B The members of \fBAuthZListFileProperties\fP when \fBqom\-type\fP is \fB"authz\-listfile"\fP
.TP
.B The members of \fBAuthZPAMProperties\fP when \fBqom\-type\fP is \fB"authz\-pam"\fP
.TP
.B The members of \fBAuthZSimpleProperties\fP when \fBqom\-type\fP is \fB"authz\-simple"\fP
.TP
The members of \fBCanHostSocketcanProperties\fP when \fBqom\-type\fP is \fB"can\-host\-socketcan"\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
.TP
.B The members of \fBColoCompareProperties\fP when \fBqom\-type\fP is \fB"colo\-compare"\fP
.TP
.B The members of \fBCryptodevBackendProperties\fP when \fBqom\-type\fP is \fB"cryptodev\-backend"\fP
.TP
.B The members of \fBCryptodevBackendProperties\fP when \fBqom\-type\fP is \fB"cryptodev\-backend\-builtin"\fP
.TP
.B The members of \fBCryptodevBackendProperties\fP when \fBqom\-type\fP is \fB"cryptodev\-backend\-lkcf"\fP
.TP
The members of \fBCryptodevVhostUserProperties\fP when \fBqom\-type\fP is \fB"cryptodev\-vhost\-user"\fP (\fBIf: \fP\fBCONFIG_VHOST_CRYPTO\fP)
.TP
.B The members of \fBDBusVMStateProperties\fP when \fBqom\-type\fP is \fB"dbus\-vmstate"\fP
.TP
.B The members of \fBFilterBufferProperties\fP when \fBqom\-type\fP is \fB"filter\-buffer"\fP
.TP
.B The members of \fBFilterDumpProperties\fP when \fBqom\-type\fP is \fB"filter\-dump"\fP
.TP
.B The members of \fBFilterMirrorProperties\fP when \fBqom\-type\fP is \fB"filter\-mirror"\fP
.TP
.B The members of \fBFilterRedirectorProperties\fP when \fBqom\-type\fP is \fB"filter\-redirector"\fP
.TP
.B The members of \fBNetfilterProperties\fP when \fBqom\-type\fP is \fB"filter\-replay"\fP
.TP
.B The members of \fBFilterRewriterProperties\fP when \fBqom\-type\fP is \fB"filter\-rewriter"\fP
.TP
.B The members of \fBInputBarrierProperties\fP when \fBqom\-type\fP is \fB"input\-barrier"\fP
.TP
The members of \fBInputLinuxProperties\fP when \fBqom\-type\fP is \fB"input\-linux"\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
.TP
.B The members of \fBIothreadProperties\fP when \fBqom\-type\fP is \fB"iothread"\fP
.TP
.B The members of \fBMainLoopProperties\fP when \fBqom\-type\fP is \fB"main\-loop"\fP
.TP
The members of \fBMemoryBackendEpcProperties\fP when \fBqom\-type\fP is \fB"memory\-backend\-epc"\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
.TP
.B The members of \fBMemoryBackendFileProperties\fP when \fBqom\-type\fP is \fB"memory\-backend\-file"\fP
.TP
The members of \fBMemoryBackendMemfdProperties\fP when \fBqom\-type\fP is \fB"memory\-backend\-memfd"\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
.TP
.B The members of \fBMemoryBackendProperties\fP when \fBqom\-type\fP is \fB"memory\-backend\-ram"\fP
.TP
The members of \fBPrManagerHelperProperties\fP when \fBqom\-type\fP is \fB"pr\-manager\-helper"\fP (\fBIf: \fP\fBCONFIG_LINUX\fP)
.TP
.B The members of \fBQtestProperties\fP when \fBqom\-type\fP is \fB"qtest"\fP
.TP
.B The members of \fBRngProperties\fP when \fBqom\-type\fP is \fB"rng\-builtin"\fP
.TP
.B The members of \fBRngEgdProperties\fP when \fBqom\-type\fP is \fB"rng\-egd"\fP
.TP
The members of \fBRngRandomProperties\fP when \fBqom\-type\fP is \fB"rng\-random"\fP (\fBIf: \fP\fBCONFIG_POSIX\fP)
.TP
.B The members of \fBSecretProperties\fP when \fBqom\-type\fP is \fB"secret"\fP
.TP
The members of \fBSecretKeyringProperties\fP when \fBqom\-type\fP is \fB"secret_keyring"\fP (\fBIf: \fP\fBCONFIG_SECRET_KEYRING\fP)
.TP
.B The members of \fBSevGuestProperties\fP when \fBqom\-type\fP is \fB"sev\-guest"\fP
.TP
.B The members of \fBThreadContextProperties\fP when \fBqom\-type\fP is \fB"thread\-context"\fP
.TP
.B The members of \fBThrottleGroupProperties\fP when \fBqom\-type\fP is \fB"throttle\-group"\fP
.TP
.B The members of \fBTlsCredsAnonProperties\fP when \fBqom\-type\fP is \fB"tls\-creds\-anon"\fP
.TP
.B The members of \fBTlsCredsPskProperties\fP when \fBqom\-type\fP is \fB"tls\-creds\-psk"\fP
.TP
.B The members of \fBTlsCredsX509Properties\fP when \fBqom\-type\fP is \fB"tls\-creds\-x509"\fP
.TP
.B The members of \fBTlsCredsProperties\fP when \fBqom\-type\fP is \fB"tls\-cipher\-suites"\fP
.TP
.B The members of \fBRemoteObjectProperties\fP when \fBqom\-type\fP is \fB"x\-remote\-object"\fP
.TP
.B The members of \fBVfioUserServerProperties\fP when \fBqom\-type\fP is \fB"x\-vfio\-user\-server"\fP
.UNINDENT
.SS Since
.sp
6.0
.SS \fBobject\-add\fP (Command)
.sp
Create a QOM object.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBObjectOptions\fP
.UNINDENT
.SS Returns
.sp
Nothing on success
Error if \fBqom\-type\fP is not a valid class name
.SS Since
.sp
2.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "object\-add",
     "arguments": { "qom\-type": "rng\-random", "id": "rng1",
                    "filename": "/dev/hwrng" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBobject\-del\fP (Command)
.sp
Remove a QOM object.
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the name of the QOM object to remove
.UNINDENT
.SS Returns
.sp
Nothing on success
Error if \fBid\fP is not a valid id for a QOM object
.SS Since
.sp
2.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "object\-del", "arguments": { "id": "rng1" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DEVICE INFRASTRUCTURE (QDEV)
.SS \fBdevice\-list\-properties\fP (Command)
.sp
List properties associated with a device.
.SS Arguments
.INDENT 0.0
.TP
.B \fBtypename\fP: \fBstring\fP
the type name of a device
.UNINDENT
.SS Returns
.sp
a list of ObjectPropertyInfo describing a devices properties
.SS Note
.sp
objects can create properties at runtime, for example to describe
links between different devices and/or objects. These properties
are not included in the output of this command.
.SS Since
.sp
1.2
.SS \fBdevice_add\fP (Command)
.sp
Add a device.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdriver\fP: \fBstring\fP
the name of the new device\(aqs driver
.TP
.B \fBbus\fP: \fBstring\fP (optional)
the device\(aqs parent bus (device tree path)
.TP
.B \fBid\fP: \fBstring\fP (optional)
the device\(aqs ID, must be unique
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBjson\-cli\fP
If present, the "\-device" command line option supports JSON
syntax with a structure identical to the arguments of this
command.
.TP
.B \fBjson\-cli\-hotplug\fP
If present, the "\-device" command line option supports JSON
syntax without the reference counting leak that broke
hot\-unplug
.UNINDENT
.SS Notes
.sp
Additional arguments depend on the type.
.INDENT 0.0
.IP 1. 3
For detailed information about this command, please refer to the
\(aqdocs/qdev\-device\-use.txt\(aq file.
.IP 2. 3
It\(aqs possible to list device properties by running QEMU with the
"\-device DEVICE,help" command\-line argument, where DEVICE is the
device\(aqs name
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "device_add",
     "arguments": { "driver": "e1000", "id": "net1",
                    "bus": "pci.0",
                    "mac": "52:54:00:12:34:56" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS TODO
.sp
This command effectively bypasses QAPI completely due to its
"additional arguments" business.  It shouldn\(aqt have been added to
the schema in this form.  It should be qapified properly, or
replaced by a properly qapified command.
.SS Since
.sp
0.13
.SS \fBdevice_del\fP (Command)
.sp
Remove a device from a guest
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the device\(aqs ID or QOM path
.UNINDENT
.SS Returns
.sp
Nothing on success
If \fBid\fP is not a valid device, DeviceNotFound
.SS Notes
.sp
When this command completes, the device may not be removed from the
guest.  Hot removal is an operation that requires guest cooperation.
This command merely requests that the guest begin the hot removal
process.  Completion of the device removal process is signaled with a
DEVICE_DELETED event. Guest reset will automatically complete removal
for all devices.  If a guest\-side error in the hot removal process is
detected, the device will not be removed and a DEVICE_UNPLUG_GUEST_ERROR
event is sent.  Some errors cannot be detected.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "device_del",
     "arguments": { "id": "net1" } }
<\- { "return": {} }

\-> { "execute": "device_del",
     "arguments": { "id": "/machine/peripheral\-anon/device[0]" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDEVICE_DELETED\fP (Event)
.sp
Emitted whenever the device removal completion is acknowledged by the guest.
At this point, it\(aqs safe to reuse the specified device ID. Device removal can
be initiated by the guest or by HMP/QMP commands.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
the device\(aqs ID if it has one
.TP
.B \fBpath\fP: \fBstring\fP
the device\(aqs QOM path
.UNINDENT
.SS Since
.sp
1.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "DEVICE_DELETED",
     "data": { "device": "virtio\-net\-pci\-0",
               "path": "/machine/peripheral/virtio\-net\-pci\-0" },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBDEVICE_UNPLUG_GUEST_ERROR\fP (Event)
.sp
Emitted when a device hot unplug fails due to a guest reported error.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
the device\(aqs ID if it has one
.TP
.B \fBpath\fP: \fBstring\fP
the device\(aqs QOM path
.UNINDENT
.SS Since
.sp
6.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "DEVICE_UNPLUG_GUEST_ERROR",
     "data": { "device": "core1",
               "path": "/machine/peripheral/core1" },
     "timestamp": { "seconds": 1615570772, "microseconds": 202844 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH MACHINES
.SS \fBSysEmuTarget\fP (Enum)
.sp
The comprehensive enumeration of QEMU system emulation ("softmmu")
targets. Run "./configure \-\-help" in the project root directory, and
look for the *\-softmmu targets near the "\-\-target\-list" option. The
individual target constants are not documented here, for the time
being.
.SS Values
.INDENT 0.0
.TP
.B \fBrx\fP
since 5.0
.TP
.B \fBavr\fP
since 5.1
.TP
.B \fBaarch64\fP
Not documented
.TP
.B \fBalpha\fP
Not documented
.TP
.B \fBarm\fP
Not documented
.TP
.B \fBcris\fP
Not documented
.TP
.B \fBhppa\fP
Not documented
.TP
.B \fBi386\fP
Not documented
.TP
.B \fBloongarch64\fP
Not documented
.TP
.B \fBm68k\fP
Not documented
.TP
.B \fBmicroblaze\fP
Not documented
.TP
.B \fBmicroblazeel\fP
Not documented
.TP
.B \fBmips\fP
Not documented
.TP
.B \fBmips64\fP
Not documented
.TP
.B \fBmips64el\fP
Not documented
.TP
.B \fBmipsel\fP
Not documented
.TP
.B \fBnios2\fP
Not documented
.TP
.B \fBor1k\fP
Not documented
.TP
.B \fBppc\fP
Not documented
.TP
.B \fBppc64\fP
Not documented
.TP
.B \fBriscv32\fP
Not documented
.TP
.B \fBriscv64\fP
Not documented
.TP
.B \fBs390x\fP
Not documented
.TP
.B \fBsh4\fP
Not documented
.TP
.B \fBsh4eb\fP
Not documented
.TP
.B \fBsparc\fP
Not documented
.TP
.B \fBsparc64\fP
Not documented
.TP
.B \fBtricore\fP
Not documented
.TP
.B \fBx86_64\fP
Not documented
.TP
.B \fBxtensa\fP
Not documented
.TP
.B \fBxtensaeb\fP
Not documented
.UNINDENT
.SS Notes
.sp
The resulting QMP strings can be appended to the "qemu\-system\-"
prefix to produce the corresponding QEMU executable name. This
is true even for "qemu\-system\-x86_64".
.SS Since
.sp
3.0
.SS \fBCpuS390State\fP (Enum)
.sp
An enumeration of cpu states that can be assumed by a virtual
S390 CPU
.SS Values
.INDENT 0.0
.TP
.B \fBuninitialized\fP
Not documented
.TP
.B \fBstopped\fP
Not documented
.TP
.B \fBcheck\-stop\fP
Not documented
.TP
.B \fBoperating\fP
Not documented
.TP
.B \fBload\fP
Not documented
.UNINDENT
.SS Since
.sp
2.12
.SS \fBCpuInfoS390\fP (Object)
.sp
Additional information about a virtual S390 CPU
.SS Members
.INDENT 0.0
.TP
.B \fBcpu\-state\fP: \fBCpuS390State\fP
the virtual CPU\(aqs state
.UNINDENT
.SS Since
.sp
2.12
.SS \fBCpuInfoFast\fP (Object)
.sp
Information about a virtual CPU
.SS Members
.INDENT 0.0
.TP
.B \fBcpu\-index\fP: \fBint\fP
index of the virtual CPU
.TP
.B \fBqom\-path\fP: \fBstring\fP
path to the CPU object in the QOM tree
.TP
.B \fBthread\-id\fP: \fBint\fP
ID of the underlying host thread
.TP
.B \fBprops\fP: \fBCpuInstanceProperties\fP (optional)
properties describing to which node/socket/core/thread
virtual CPU belongs to, provided if supported by board
.TP
.B \fBtarget\fP: \fBSysEmuTarget\fP
the QEMU system emulation target, which determines which
additional fields will be listed (since 3.0)
.TP
.B The members of \fBCpuInfoS390\fP when \fBtarget\fP is \fB"s390x"\fP
.UNINDENT
.SS Since
.sp
2.12
.SS \fBquery\-cpus\-fast\fP (Command)
.sp
Returns information about all virtual CPUs.
.SS Returns
.sp
list of \fBCpuInfoFast\fP
.SS Since
.sp
2.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-cpus\-fast" }
<\- { "return": [
        {
            "thread\-id": 25627,
            "props": {
                "core\-id": 0,
                "thread\-id": 0,
                "socket\-id": 0
            },
            "qom\-path": "/machine/unattached/device[0]",
            "target":"x86_64",
            "cpu\-index": 0
        },
        {
            "thread\-id": 25628,
            "props": {
                "core\-id": 0,
                "thread\-id": 0,
                "socket\-id": 1
            },
            "qom\-path": "/machine/unattached/device[2]",
            "target":"x86_64",
            "cpu\-index": 1
        }
    ]
}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMachineInfo\fP (Object)
.sp
Information describing a machine.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the name of the machine
.TP
.B \fBalias\fP: \fBstring\fP (optional)
an alias for the machine name
.TP
.B \fBis\-default\fP: \fBboolean\fP (optional)
whether the machine is default
.TP
.B \fBcpu\-max\fP: \fBint\fP
maximum number of CPUs supported by the machine type
(since 1.5)
.TP
.B \fBhotpluggable\-cpus\fP: \fBboolean\fP
cpu hotplug via \-device is supported (since 2.7)
.TP
.B \fBnuma\-mem\-supported\fP: \fBboolean\fP
true if \(aq\-numa node,mem\(aq option is supported by
the machine type and false otherwise (since 4.1)
.TP
.B \fBdeprecated\fP: \fBboolean\fP
if true, the machine type is deprecated and may be removed
in future versions of QEMU according to the QEMU deprecation
policy (since 4.1)
.TP
.B \fBdefault\-cpu\-type\fP: \fBstring\fP (optional)
default CPU model typename if none is requested via
the \-cpu argument. (since 4.2)
.TP
.B \fBdefault\-ram\-id\fP: \fBstring\fP (optional)
the default ID of initial RAM memory backend (since 5.2)
.UNINDENT
.SS Since
.sp
1.2
.SS \fBquery\-machines\fP (Command)
.sp
Return a list of supported machines
.SS Returns
.sp
a list of MachineInfo
.SS Since
.sp
1.2
.SS \fBCurrentMachineParams\fP (Object)
.sp
Information describing the running machine parameters.
.SS Members
.INDENT 0.0
.TP
.B \fBwakeup\-suspend\-support\fP: \fBboolean\fP
true if the machine supports wake up from
suspend
.UNINDENT
.SS Since
.sp
4.0
.SS \fBquery\-current\-machine\fP (Command)
.sp
Return information on the current virtual machine.
.SS Returns
.sp
CurrentMachineParams
.SS Since
.sp
4.0
.SS \fBTargetInfo\fP (Object)
.sp
Information describing the QEMU target.
.SS Members
.INDENT 0.0
.TP
.B \fBarch\fP: \fBSysEmuTarget\fP
the target architecture
.UNINDENT
.SS Since
.sp
1.2
.SS \fBquery\-target\fP (Command)
.sp
Return information about the target for this QEMU
.SS Returns
.sp
TargetInfo
.SS Since
.sp
1.2
.SS \fBUuidInfo\fP (Object)
.sp
Guest UUID information (Universally Unique Identifier).
.SS Members
.INDENT 0.0
.TP
.B \fBUUID\fP: \fBstring\fP
the UUID of the guest
.UNINDENT
.SS Since
.sp
0.14
.SS Notes
.sp
If no UUID was specified for the guest, a null UUID is returned.
.SS \fBquery\-uuid\fP (Command)
.sp
Query the guest UUID information.
.SS Returns
.sp
The \fBUuidInfo\fP for the guest
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-uuid" }
<\- { "return": { "UUID": "550e8400\-e29b\-41d4\-a716\-446655440000" } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBGuidInfo\fP (Object)
.sp
GUID information.
.SS Members
.INDENT 0.0
.TP
.B \fBguid\fP: \fBstring\fP
the globally unique identifier
.UNINDENT
.SS Since
.sp
2.9
.SS \fBquery\-vm\-generation\-id\fP (Command)
.sp
Show Virtual Machine Generation ID
.SS Since
.sp
2.9
.SS \fBsystem_reset\fP (Command)
.sp
Performs a hard reset of a guest.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "system_reset" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBsystem_powerdown\fP (Command)
.sp
Requests that a guest perform a powerdown operation.
.SS Since
.sp
0.14
.SS Notes
.sp
A guest may or may not respond to this command.  This command
returning does not indicate that a guest has accepted the request or
that it has shut down.  Many guests will respond to this command by
prompting the user in some way.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "system_powerdown" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBsystem_wakeup\fP (Command)
.sp
Wake up guest from suspend. If the guest has wake\-up from suspend
support enabled (wakeup\-suspend\-support flag from
query\-current\-machine), wake\-up guest from suspend if the guest is
in SUSPENDED state. Return an error otherwise.
.SS Since
.sp
1.1
.SS Returns
.sp
nothing.
.SS Note
.sp
prior to 4.0, this command does nothing in case the guest
isn\(aqt suspended.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "system_wakeup" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBLostTickPolicy\fP (Enum)
.sp
Policy for handling lost ticks in timer devices.  Ticks end up getting
lost when, for example, the guest is paused.
.SS Values
.INDENT 0.0
.TP
.B \fBdiscard\fP
throw away the missed ticks and continue with future injection
normally.  The guest OS will see the timer jump ahead by a
potentially quite significant amount all at once, as if the
intervening chunk of time had simply not existed; needless to
say, such a sudden jump can easily confuse a guest OS which is
not specifically prepared to deal with it.  Assuming the guest
OS can deal correctly with the time jump, the time in the guest
and in the host should now match.
.TP
.B \fBdelay\fP
continue to deliver ticks at the normal rate.  The guest OS will
not notice anything is amiss, as from its point of view time will
have continued to flow normally.  The time in the guest should now
be behind the time in the host by exactly the amount of time during
which ticks have been missed.
.TP
.B \fBslew\fP
deliver ticks at a higher rate to catch up with the missed ticks.
The guest OS will not notice anything is amiss, as from its point
of view time will have continued to flow normally.  Once the timer
has managed to catch up with all the missing ticks, the time in
the guest and in the host should match.
.UNINDENT
.SS Since
.sp
2.0
.SS \fBinject\-nmi\fP (Command)
.sp
Injects a Non\-Maskable Interrupt into the default CPU (x86/s390) or all CPUs (ppc64).
The command fails when the guest doesn\(aqt support injecting.
.SS Returns
.sp
If successful, nothing
.SS Since
.sp
0.14
.SS Note
.sp
prior to 2.1, this command was only supported for x86 and s390 VMs
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "inject\-nmi" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBKvmInfo\fP (Object)
.sp
Information about support for KVM acceleration
.SS Members
.INDENT 0.0
.TP
.B \fBenabled\fP: \fBboolean\fP
true if KVM acceleration is active
.TP
.B \fBpresent\fP: \fBboolean\fP
true if KVM acceleration is built into this executable
.UNINDENT
.SS Since
.sp
0.14
.SS \fBquery\-kvm\fP (Command)
.sp
Returns information about KVM acceleration
.SS Returns
.sp
\fBKvmInfo\fP
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-kvm" }
<\- { "return": { "enabled": true, "present": true } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBNumaOptionsType\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBnode\fP
NUMA nodes configuration
.TP
.B \fBdist\fP
NUMA distance configuration (since 2.10)
.TP
.B \fBcpu\fP
property based CPU(s) to node mapping (Since: 2.10)
.TP
.B \fBhmat\-lb\fP
memory latency and bandwidth information (Since: 5.0)
.TP
.B \fBhmat\-cache\fP
memory side cache information (Since: 5.0)
.UNINDENT
.SS Since
.sp
2.1
.SS \fBNumaOptions\fP (Object)
.sp
A discriminated record of NUMA options. (for OptsVisitor)
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBNumaOptionsType\fP
Not documented
.TP
.B The members of \fBNumaNodeOptions\fP when \fBtype\fP is \fB"node"\fP
.TP
.B The members of \fBNumaDistOptions\fP when \fBtype\fP is \fB"dist"\fP
.TP
.B The members of \fBNumaCpuOptions\fP when \fBtype\fP is \fB"cpu"\fP
.TP
.B The members of \fBNumaHmatLBOptions\fP when \fBtype\fP is \fB"hmat\-lb"\fP
.TP
.B The members of \fBNumaHmatCacheOptions\fP when \fBtype\fP is \fB"hmat\-cache"\fP
.UNINDENT
.SS Since
.sp
2.1
.SS \fBNumaNodeOptions\fP (Object)
.sp
Create a guest NUMA node. (for OptsVisitor)
.SS Members
.INDENT 0.0
.TP
.B \fBnodeid\fP: \fBint\fP (optional)
NUMA node ID (increase by 1 from 0 if omitted)
.TP
.B \fBcpus\fP: \fBarray of int\fP (optional)
.INDENT 7.0
.TP
.B VCPUs belonging to this node (assign VCPUS round\-robin
if omitted)
.UNINDENT
.TP
.B \fBmem\fP: \fBint\fP (optional)
memory size of this node; mutually exclusive with \fBmemdev\fP\&.
Equally divide total memory among nodes if both \fBmem\fP and \fBmemdev\fP are
omitted.
.TP
.B \fBmemdev\fP: \fBstring\fP (optional)
memory backend object.  If specified for one node,
it must be specified for all nodes.
.TP
.B \fBinitiator\fP: \fBint\fP (optional)
defined in ACPI 6.3 Chapter 5.2.27.3 Table 5\-145,
points to the nodeid which has the memory controller
responsible for this NUMA node. This field provides
additional information as to the initiator node that
is closest (as in directly attached) to this node, and
therefore has the best performance (since 5.0)
.UNINDENT
.SS Since
.sp
2.1
.SS \fBNumaDistOptions\fP (Object)
.sp
Set the distance between 2 NUMA nodes.
.SS Members
.INDENT 0.0
.TP
.B \fBsrc\fP: \fBint\fP
source NUMA node.
.TP
.B \fBdst\fP: \fBint\fP
destination NUMA node.
.TP
.B \fBval\fP: \fBint\fP
NUMA distance from source node to destination node.
When a node is unreachable from another node, set the distance
between them to 255.
.UNINDENT
.SS Since
.sp
2.10
.SS \fBCXLFixedMemoryWindowOptions\fP (Object)
.sp
Create a CXL Fixed Memory Window
.SS Members
.INDENT 0.0
.TP
.B \fBsize\fP: \fBint\fP
Size of the Fixed Memory Window in bytes. Must be a multiple
of 256MiB.
.TP
.B \fBinterleave\-granularity\fP: \fBint\fP (optional)
Number of contiguous bytes for which
accesses will go to a given interleave target.
Accepted values [256, 512, 1k, 2k, 4k, 8k, 16k]
.TP
.B \fBtargets\fP: \fBarray of string\fP
Target root bridge IDs from \-device ...,id=<ID> for each root
bridge.
.UNINDENT
Since 7.1
.SS \fBCXLFMWProperties\fP (Object)
.sp
List of CXL Fixed Memory Windows.
.SS Members
.INDENT 0.0
.TP
.B \fBcxl\-fmw\fP: \fBarray of CXLFixedMemoryWindowOptions\fP
List of CXLFixedMemoryWindowOptions
.UNINDENT
Since 7.1
.SS \fBX86CPURegister32\fP (Enum)
.sp
A X86 32\-bit register
.SS Values
.INDENT 0.0
.TP
.B \fBEAX\fP
Not documented
.TP
.B \fBEBX\fP
Not documented
.TP
.B \fBECX\fP
Not documented
.TP
.B \fBEDX\fP
Not documented
.TP
.B \fBESP\fP
Not documented
.TP
.B \fBEBP\fP
Not documented
.TP
.B \fBESI\fP
Not documented
.TP
.B \fBEDI\fP
Not documented
.UNINDENT
.SS Since
.sp
1.5
.SS \fBX86CPUFeatureWordInfo\fP (Object)
.sp
Information about a X86 CPU feature word
.SS Members
.INDENT 0.0
.TP
.B \fBcpuid\-input\-eax\fP: \fBint\fP
Input EAX value for CPUID instruction for that feature word
.TP
.B \fBcpuid\-input\-ecx\fP: \fBint\fP (optional)
Input ECX value for CPUID instruction for that
feature word
.TP
.B \fBcpuid\-register\fP: \fBX86CPURegister32\fP
Output register containing the feature bits
.TP
.B \fBfeatures\fP: \fBint\fP
value of output register, containing the feature bits
.UNINDENT
.SS Since
.sp
1.5
.SS \fBDummyForceArrays\fP (Object)
.sp
Not used by QMP; hack to let us use X86CPUFeatureWordInfoList internally
.SS Members
.INDENT 0.0
.TP
.B \fBunused\fP: \fBarray of X86CPUFeatureWordInfo\fP
Not documented
.UNINDENT
.SS Since
.sp
2.5
.SS \fBNumaCpuOptions\fP (Object)
.sp
Option "\-numa cpu" overrides default cpu to node mapping.
It accepts the same set of cpu properties as returned by
query\-hotpluggable\-cpus[].props, where node\-id could be used to
override default node mapping.
.SS Members
.INDENT 0.0
.TP
.B The members of \fBCpuInstanceProperties\fP
.UNINDENT
.SS Since
.sp
2.10
.SS \fBHmatLBMemoryHierarchy\fP (Enum)
.sp
The memory hierarchy in the System Locality Latency and Bandwidth
Information Structure of HMAT (Heterogeneous Memory Attribute Table)
.sp
For more information about \fBHmatLBMemoryHierarchy\fP, see chapter
5.2.27.4: Table 5\-146: Field "Flags" of ACPI 6.3 spec.
.SS Values
.INDENT 0.0
.TP
.B \fBmemory\fP
the structure represents the memory performance
.TP
.B \fBfirst\-level\fP
first level of memory side cache
.TP
.B \fBsecond\-level\fP
second level of memory side cache
.TP
.B \fBthird\-level\fP
third level of memory side cache
.UNINDENT
.SS Since
.sp
5.0
.SS \fBHmatLBDataType\fP (Enum)
.sp
Data type in the System Locality Latency and Bandwidth
Information Structure of HMAT (Heterogeneous Memory Attribute Table)
.sp
For more information about \fBHmatLBDataType\fP, see chapter
5.2.27.4: Table 5\-146:  Field "Data Type" of ACPI 6.3 spec.
.SS Values
.INDENT 0.0
.TP
.B \fBaccess\-latency\fP
access latency (nanoseconds)
.TP
.B \fBread\-latency\fP
read latency (nanoseconds)
.TP
.B \fBwrite\-latency\fP
write latency (nanoseconds)
.TP
.B \fBaccess\-bandwidth\fP
access bandwidth (Bytes per second)
.TP
.B \fBread\-bandwidth\fP
read bandwidth (Bytes per second)
.TP
.B \fBwrite\-bandwidth\fP
write bandwidth (Bytes per second)
.UNINDENT
.SS Since
.sp
5.0
.SS \fBNumaHmatLBOptions\fP (Object)
.sp
Set the system locality latency and bandwidth information
between Initiator and Target proximity Domains.
.sp
For more information about \fBNumaHmatLBOptions\fP, see chapter
5.2.27.4: Table 5\-146 of ACPI 6.3 spec.
.SS Members
.INDENT 0.0
.TP
.B \fBinitiator\fP: \fBint\fP
the Initiator Proximity Domain.
.TP
.B \fBtarget\fP: \fBint\fP
the Target Proximity Domain.
.TP
.B \fBhierarchy\fP: \fBHmatLBMemoryHierarchy\fP
the Memory Hierarchy. Indicates the performance
of memory or side cache.
.TP
.B \fBdata\-type\fP: \fBHmatLBDataType\fP
presents the type of data, access/read/write
latency or hit latency.
.TP
.B \fBlatency\fP: \fBint\fP (optional)
the value of latency from \fBinitiator\fP to \fBtarget\fP
proximity domain, the latency unit is "ns(nanosecond)".
.TP
.B \fBbandwidth\fP: \fBint\fP (optional)
the value of bandwidth between \fBinitiator\fP and \fBtarget\fP
proximity domain, the bandwidth unit is
"Bytes per second".
.UNINDENT
.SS Since
.sp
5.0
.SS \fBHmatCacheAssociativity\fP (Enum)
.sp
Cache associativity in the Memory Side Cache Information Structure
of HMAT
.sp
For more information of \fBHmatCacheAssociativity\fP, see chapter
5.2.27.5: Table 5\-147 of ACPI 6.3 spec.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
.INDENT 7.0
.TP
.B None (no memory side cache in this proximity domain,
or cache associativity unknown)
.UNINDENT
.TP
.B \fBdirect\fP
Direct Mapped
.TP
.B \fBcomplex\fP
Complex Cache Indexing (implementation specific)
.UNINDENT
.SS Since
.sp
5.0
.SS \fBHmatCacheWritePolicy\fP (Enum)
.sp
Cache write policy in the Memory Side Cache Information Structure
of HMAT
.sp
For more information of \fBHmatCacheWritePolicy\fP, see chapter
5.2.27.5: Table 5\-147: Field "Cache Attributes" of ACPI 6.3 spec.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
None (no memory side cache in this proximity domain,
or cache write policy unknown)
.TP
.B \fBwrite\-back\fP
Write Back (WB)
.TP
.B \fBwrite\-through\fP
Write Through (WT)
.UNINDENT
.SS Since
.sp
5.0
.SS \fBNumaHmatCacheOptions\fP (Object)
.sp
Set the memory side cache information for a given memory domain.
.sp
For more information of \fBNumaHmatCacheOptions\fP, see chapter
5.2.27.5: Table 5\-147: Field "Cache Attributes" of ACPI 6.3 spec.
.SS Members
.INDENT 0.0
.TP
.B \fBnode\-id\fP: \fBint\fP
the memory proximity domain to which the memory belongs.
.TP
.B \fBsize\fP: \fBint\fP
the size of memory side cache in bytes.
.TP
.B \fBlevel\fP: \fBint\fP
the cache level described in this structure.
.TP
.B \fBassociativity\fP: \fBHmatCacheAssociativity\fP
the cache associativity,
none/direct\-mapped/complex(complex cache indexing).
.TP
.B \fBpolicy\fP: \fBHmatCacheWritePolicy\fP
the write policy, none/write\-back/write\-through.
.TP
.B \fBline\fP: \fBint\fP
the cache Line size in bytes.
.UNINDENT
.SS Since
.sp
5.0
.SS \fBmemsave\fP (Command)
.sp
Save a portion of guest memory to a file.
.SS Arguments
.INDENT 0.0
.TP
.B \fBval\fP: \fBint\fP
the virtual address of the guest to start from
.TP
.B \fBsize\fP: \fBint\fP
the size of memory region to save
.TP
.B \fBfilename\fP: \fBstring\fP
the file to save the memory to as binary data
.TP
.B \fBcpu\-index\fP: \fBint\fP (optional)
the index of the virtual CPU to use for translating the
virtual address (defaults to CPU 0)
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
0.14
.SS Notes
.sp
Errors were not reliably returned until 1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "memsave",
     "arguments": { "val": 10,
                    "size": 100,
                    "filename": "/tmp/virtual\-mem\-dump" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBpmemsave\fP (Command)
.sp
Save a portion of guest physical memory to a file.
.SS Arguments
.INDENT 0.0
.TP
.B \fBval\fP: \fBint\fP
the physical address of the guest to start from
.TP
.B \fBsize\fP: \fBint\fP
the size of memory region to save
.TP
.B \fBfilename\fP: \fBstring\fP
the file to save the memory to as binary data
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
0.14
.SS Notes
.sp
Errors were not reliably returned until 1.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "pmemsave",
     "arguments": { "val": 10,
                    "size": 100,
                    "filename": "/tmp/physical\-mem\-dump" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMemdev\fP (Object)
.sp
Information about memory backend
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP (optional)
backend\(aqs ID if backend has \(aqid\(aq property (since 2.9)
.TP
.B \fBsize\fP: \fBint\fP
memory backend size
.TP
.B \fBmerge\fP: \fBboolean\fP
whether memory merge support is enabled
.TP
.B \fBdump\fP: \fBboolean\fP
whether memory backend\(aqs memory is included in a core dump
.TP
.B \fBprealloc\fP: \fBboolean\fP
whether memory was preallocated
.TP
.B \fBshare\fP: \fBboolean\fP
whether memory is private to QEMU or shared (since 6.1)
.TP
.B \fBreserve\fP: \fBboolean\fP (optional)
whether swap space (or huge pages) was reserved if applicable.
This corresponds to the user configuration and not the actual
behavior implemented in the OS to perform the reservation.
For example, Linux will never reserve swap space for shared
file mappings. (since 6.1)
.TP
.B \fBhost\-nodes\fP: \fBarray of int\fP
host nodes for its memory policy
.TP
.B \fBpolicy\fP: \fBHostMemPolicy\fP
memory policy of memory backend
.UNINDENT
.SS Since
.sp
2.1
.SS \fBquery\-memdev\fP (Command)
.sp
Returns information for all memory backends.
.SS Returns
.sp
a list of \fBMemdev\fP\&.
.SS Since
.sp
2.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-memdev" }
<\- { "return": [
       {
         "id": "mem1",
         "size": 536870912,
         "merge": false,
         "dump": true,
         "prealloc": false,
         "share": false,
         "host\-nodes": [0, 1],
         "policy": "bind"
       },
       {
         "size": 536870912,
         "merge": false,
         "dump": true,
         "prealloc": true,
         "share": false,
         "host\-nodes": [2, 3],
         "policy": "preferred"
       }
     ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBCpuInstanceProperties\fP (Object)
.sp
List of properties to be used for hotplugging a CPU instance,
it should be passed by management with device_add command when
a CPU is being hotplugged.
.SS Members
.INDENT 0.0
.TP
.B \fBnode\-id\fP: \fBint\fP (optional)
NUMA node ID the CPU belongs to
.TP
.B \fBsocket\-id\fP: \fBint\fP (optional)
socket number within node/board the CPU belongs to
.TP
.B \fBdie\-id\fP: \fBint\fP (optional)
die number within socket the CPU belongs to (since 4.1)
.TP
.B \fBcluster\-id\fP: \fBint\fP (optional)
cluster number within die the CPU belongs to (since 7.1)
.TP
.B \fBcore\-id\fP: \fBint\fP (optional)
core number within cluster the CPU belongs to
.TP
.B \fBthread\-id\fP: \fBint\fP (optional)
thread number within core the CPU belongs to
.UNINDENT
.SS Note
.sp
currently there are 6 properties that could be present
but management should be prepared to pass through other
properties with device_add command to allow for future
interface extension. This also requires the filed names to be kept in
sync with the properties passed to \-device/device_add.
.SS Since
.sp
2.7
.SS \fBHotpluggableCPU\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBstring\fP
CPU object type for usage with device_add command
.TP
.B \fBprops\fP: \fBCpuInstanceProperties\fP
list of properties to be used for hotplugging CPU
.TP
.B \fBvcpus\-count\fP: \fBint\fP
number of logical VCPU threads \fBHotpluggableCPU\fP provides
.TP
.B \fBqom\-path\fP: \fBstring\fP (optional)
link to existing CPU object if CPU is present or
omitted if CPU is not present.
.UNINDENT
.SS Since
.sp
2.7
.SS \fBquery\-hotpluggable\-cpus\fP (Command)
.SS TODO
.sp
Better documentation; currently there is none.
.SS Returns
.sp
a list of HotpluggableCPU objects.
.SS Since
.sp
2.7
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
For pseries machine type started with \-smp 2,cores=2,maxcpus=4 \-cpu POWER8:

\-> { "execute": "query\-hotpluggable\-cpus" }
<\- {"return": [
     { "props": { "core\-id": 8 }, "type": "POWER8\-spapr\-cpu\-core",
       "vcpus\-count": 1 },
     { "props": { "core\-id": 0 }, "type": "POWER8\-spapr\-cpu\-core",
       "vcpus\-count": 1, "qom\-path": "/machine/unattached/device[0]"}
   ]}\(aq

For pc machine type started with \-smp 1,maxcpus=2:

\-> { "execute": "query\-hotpluggable\-cpus" }
<\- {"return": [
     {
        "type": "qemu64\-x86_64\-cpu", "vcpus\-count": 1,
        "props": {"core\-id": 0, "socket\-id": 1, "thread\-id": 0}
     },
     {
        "qom\-path": "/machine/unattached/device[0]",
        "type": "qemu64\-x86_64\-cpu", "vcpus\-count": 1,
        "props": {"core\-id": 0, "socket\-id": 0, "thread\-id": 0}
     }
   ]}

For s390x\-virtio\-ccw machine type started with \-smp 1,maxcpus=2 \-cpu qemu
(Since: 2.11):

\-> { "execute": "query\-hotpluggable\-cpus" }
<\- {"return": [
     {
        "type": "qemu\-s390x\-cpu", "vcpus\-count": 1,
        "props": { "core\-id": 1 }
     },
     {
        "qom\-path": "/machine/unattached/device[0]",
        "type": "qemu\-s390x\-cpu", "vcpus\-count": 1,
        "props": { "core\-id": 0 }
     }
   ]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBset\-numa\-node\fP (Command)
.sp
Runtime equivalent of \(aq\-numa\(aq CLI option, available at
preconfigure stage to configure numa mapping before initializing
machine.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBNumaOptions\fP
.UNINDENT
.SS Since
.sp
3.0
.SS \fBballoon\fP (Command)
.sp
Request the balloon driver to change its balloon size.
.SS Arguments
.INDENT 0.0
.TP
.B \fBvalue\fP: \fBint\fP
the target logical size of the VM in bytes.
We can deduce the size of the balloon using this formula:
.INDENT 7.0
.INDENT 3.5
logical_vm_size = vm_ram_size \- balloon_size
.UNINDENT
.UNINDENT
.sp
From it we have: balloon_size = vm_ram_size \- \fBvalue\fP
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If the balloon driver is enabled but not functional because the KVM
kernel module cannot support it, KvmMissingCap
.IP \(bu 2
If no balloon device is present, DeviceNotActive
.UNINDENT
.SS Notes
.sp
This command just issues a request to the guest.  When it returns,
the balloon size may not have changed.  A guest can change the balloon
size independent of this command.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "balloon", "arguments": { "value": 536870912 } }
<\- { "return": {} }

With a 2.5GiB guest this command inflated the ballon to 3GiB.
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBalloonInfo\fP (Object)
.sp
Information about the guest balloon device.
.SS Members
.INDENT 0.0
.TP
.B \fBactual\fP: \fBint\fP
the logical size of the VM in bytes
Formula used: logical_vm_size = vm_ram_size \- balloon_size
.UNINDENT
.SS Since
.sp
0.14
.SS \fBquery\-balloon\fP (Command)
.sp
Return information about the balloon device.
.SS Returns
.INDENT 0.0
.IP \(bu 2
\fBBalloonInfo\fP on success
.IP \(bu 2
If the balloon driver is enabled but not functional because the KVM
kernel module cannot support it, KvmMissingCap
.IP \(bu 2
If no balloon device is present, DeviceNotActive
.UNINDENT
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-balloon" }
<\- { "return": {
         "actual": 1073741824
      }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBALLOON_CHANGE\fP (Event)
.sp
Emitted when the guest changes the actual BALLOON level. This value is
equivalent to the \fBactual\fP field return by the \(aqquery\-balloon\(aq command
.SS Arguments
.INDENT 0.0
.TP
.B \fBactual\fP: \fBint\fP
the logical size of the VM in bytes
Formula used: logical_vm_size = vm_ram_size \- balloon_size
.UNINDENT
.SS Note
.sp
this event is rate\-limited.
.SS Since
.sp
1.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "BALLOON_CHANGE",
     "data": { "actual": 944766976 },
     "timestamp": { "seconds": 1267020223, "microseconds": 435656 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMemoryInfo\fP (Object)
.sp
Actual memory information in bytes.
.SS Members
.INDENT 0.0
.TP
.B \fBbase\-memory\fP: \fBint\fP
size of "base" memory specified with command line
option \-m.
.TP
.B \fBplugged\-memory\fP: \fBint\fP (optional)
size of memory that can be hot\-unplugged. This field
is omitted if target doesn\(aqt support memory hotplug
(i.e. CONFIG_MEM_DEVICE not defined at build time).
.UNINDENT
.SS Since
.sp
2.11
.SS \fBquery\-memory\-size\-summary\fP (Command)
.sp
Return the amount of initially allocated and present hotpluggable (if
enabled) memory in bytes.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-memory\-size\-summary" }
<\- { "return": { "base\-memory": 4294967296, "plugged\-memory": 0 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
2.11
.SS \fBPCDIMMDeviceInfo\fP (Object)
.sp
PCDIMMDevice state information
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP (optional)
device\(aqs ID
.TP
.B \fBaddr\fP: \fBint\fP
physical address, where device is mapped
.TP
.B \fBsize\fP: \fBint\fP
size of memory that the device provides
.TP
.B \fBslot\fP: \fBint\fP
slot number at which device is plugged in
.TP
.B \fBnode\fP: \fBint\fP
NUMA node number where device is plugged in
.TP
.B \fBmemdev\fP: \fBstring\fP
memory backend linked with device
.TP
.B \fBhotplugged\fP: \fBboolean\fP
true if device was hotplugged
.TP
.B \fBhotpluggable\fP: \fBboolean\fP
true if device if could be added/removed while machine is running
.UNINDENT
.SS Since
.sp
2.1
.SS \fBVirtioPMEMDeviceInfo\fP (Object)
.sp
VirtioPMEM state information
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP (optional)
device\(aqs ID
.TP
.B \fBmemaddr\fP: \fBint\fP
physical address in memory, where device is mapped
.TP
.B \fBsize\fP: \fBint\fP
size of memory that the device provides
.TP
.B \fBmemdev\fP: \fBstring\fP
memory backend linked with device
.UNINDENT
.SS Since
.sp
4.1
.SS \fBVirtioMEMDeviceInfo\fP (Object)
.sp
VirtioMEMDevice state information
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP (optional)
device\(aqs ID
.TP
.B \fBmemaddr\fP: \fBint\fP
physical address in memory, where device is mapped
.TP
.B \fBrequested\-size\fP: \fBint\fP
the user requested size of the device
.TP
.B \fBsize\fP: \fBint\fP
the (current) size of memory that the device provides
.TP
.B \fBmax\-size\fP: \fBint\fP
the maximum size of memory that the device can provide
.TP
.B \fBblock\-size\fP: \fBint\fP
the block size of memory that the device provides
.TP
.B \fBnode\fP: \fBint\fP
NUMA node number where device is assigned to
.TP
.B \fBmemdev\fP: \fBstring\fP
memory backend linked with the region
.UNINDENT
.SS Since
.sp
5.1
.SS \fBSgxEPCDeviceInfo\fP (Object)
.sp
Sgx EPC state information
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP (optional)
device\(aqs ID
.TP
.B \fBmemaddr\fP: \fBint\fP
physical address in memory, where device is mapped
.TP
.B \fBsize\fP: \fBint\fP
size of memory that the device provides
.TP
.B \fBmemdev\fP: \fBstring\fP
memory backend linked with device
.TP
.B \fBnode\fP: \fBint\fP
the numa node (Since: 7.0)
.UNINDENT
.SS Since
.sp
6.2
.SS \fBMemoryDeviceInfoKind\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBdimm\fP
Not documented
.TP
.B \fBnvdimm\fP
Not documented
.TP
.B \fBvirtio\-pmem\fP
Not documented
.TP
.B \fBvirtio\-mem\fP
Not documented
.TP
.B \fBsgx\-epc\fP
Not documented
.UNINDENT
.SS Since
.sp
2.1
.SS \fBPCDIMMDeviceInfoWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBPCDIMMDeviceInfo\fP
Not documented
.UNINDENT
.SS Since
.sp
2.1
.SS \fBVirtioPMEMDeviceInfoWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBVirtioPMEMDeviceInfo\fP
Not documented
.UNINDENT
.SS Since
.sp
2.1
.SS \fBVirtioMEMDeviceInfoWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBVirtioMEMDeviceInfo\fP
Not documented
.UNINDENT
.SS Since
.sp
2.1
.SS \fBSgxEPCDeviceInfoWrapper\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBSgxEPCDeviceInfo\fP
Not documented
.UNINDENT
.SS Since
.sp
6.2
.SS \fBMemoryDeviceInfo\fP (Object)
.sp
Union containing information about a memory device
.sp
nvdimm is included since 2.12. virtio\-pmem is included since 4.1.
virtio\-mem is included since 5.1. sgx\-epc is included since 6.2.
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBMemoryDeviceInfoKind\fP
Not documented
.TP
.B The members of \fBPCDIMMDeviceInfoWrapper\fP when \fBtype\fP is \fB"dimm"\fP
.TP
.B The members of \fBPCDIMMDeviceInfoWrapper\fP when \fBtype\fP is \fB"nvdimm"\fP
.TP
.B The members of \fBVirtioPMEMDeviceInfoWrapper\fP when \fBtype\fP is \fB"virtio\-pmem"\fP
.TP
.B The members of \fBVirtioMEMDeviceInfoWrapper\fP when \fBtype\fP is \fB"virtio\-mem"\fP
.TP
.B The members of \fBSgxEPCDeviceInfoWrapper\fP when \fBtype\fP is \fB"sgx\-epc"\fP
.UNINDENT
.SS Since
.sp
2.1
.SS \fBSgxEPC\fP (Object)
.sp
Sgx EPC cmdline information
.SS Members
.INDENT 0.0
.TP
.B \fBmemdev\fP: \fBstring\fP
memory backend linked with device
.TP
.B \fBnode\fP: \fBint\fP
the numa node (Since: 7.0)
.UNINDENT
.SS Since
.sp
6.2
.SS \fBSgxEPCProperties\fP (Object)
.sp
SGX properties of machine types.
.SS Members
.INDENT 0.0
.TP
.B \fBsgx\-epc\fP: \fBarray of SgxEPC\fP
list of ids of memory\-backend\-epc objects.
.UNINDENT
.SS Since
.sp
6.2
.SS \fBquery\-memory\-devices\fP (Command)
.sp
Lists available memory devices and their state
.SS Since
.sp
2.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-memory\-devices" }
<\- { "return": [ { "data":
                      { "addr": 5368709120,
                        "hotpluggable": true,
                        "hotplugged": true,
                        "id": "d1",
                        "memdev": "/objects/memX",
                        "node": 0,
                        "size": 1073741824,
                        "slot": 0},
                   "type": "dimm"
                 } ] }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMEMORY_DEVICE_SIZE_CHANGE\fP (Event)
.sp
Emitted when the size of a memory device changes. Only emitted for memory
devices that can actually change the size (e.g., virtio\-mem due to guest
action).
.SS Arguments
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP (optional)
device\(aqs ID
.TP
.B \fBsize\fP: \fBint\fP
the new size of memory that the device provides
.TP
.B \fBqom\-path\fP: \fBstring\fP
path to the device object in the QOM tree (since 6.2)
.UNINDENT
.SS Note
.sp
this event is rate\-limited.
.SS Since
.sp
5.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "MEMORY_DEVICE_SIZE_CHANGE",
     "data": { "id": "vm0", "size": 1073741824,
               "qom\-path": "/machine/unattached/device[2]" },
     "timestamp": { "seconds": 1588168529, "microseconds": 201316 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBMEM_UNPLUG_ERROR\fP (Event)
.sp
Emitted when memory hot unplug error occurs.
.SS Arguments
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP
device name
.TP
.B \fBmsg\fP: \fBstring\fP
Informative message
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
This event is deprecated. Use \fBDEVICE_UNPLUG_GUEST_ERROR\fP
instead.
.UNINDENT
.SS Since
.sp
2.4
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "MEM_UNPLUG_ERROR",
     "data": { "device": "dimm1",
               "msg": "acpi: device unplug for unsupported device"
     },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBBootConfiguration\fP (Object)
.sp
Schema for virtual machine boot configuration.
.SS Members
.INDENT 0.0
.TP
.B \fBorder\fP: \fBstring\fP (optional)
Boot order (a=floppy, c=hard disk, d=CD\-ROM, n=network)
.TP
.B \fBonce\fP: \fBstring\fP (optional)
Boot order to apply on first boot
.TP
.B \fBmenu\fP: \fBboolean\fP (optional)
Whether to show a boot menu
.TP
.B \fBsplash\fP: \fBstring\fP (optional)
The name of the file to be passed to the firmware as logo picture, if \fBmenu\fP is true.
.TP
.B \fBsplash\-time\fP: \fBint\fP (optional)
How long to show the logo picture, in milliseconds
.TP
.B \fBreboot\-timeout\fP: \fBint\fP (optional)
Timeout before guest reboots after boot fails
.TP
.B \fBstrict\fP: \fBboolean\fP (optional)
Whether to attempt booting from devices not included in the boot order
.UNINDENT
.SS Since
.sp
7.1
.SS \fBSMPConfiguration\fP (Object)
.sp
Schema for CPU topology configuration.  A missing value lets
QEMU figure out a suitable value based on the ones that are provided.
.SS Members
.INDENT 0.0
.TP
.B \fBcpus\fP: \fBint\fP (optional)
number of virtual CPUs in the virtual machine
.TP
.B \fBsockets\fP: \fBint\fP (optional)
number of sockets in the CPU topology
.TP
.B \fBdies\fP: \fBint\fP (optional)
number of dies per socket in the CPU topology
.TP
.B \fBclusters\fP: \fBint\fP (optional)
number of clusters per die in the CPU topology (since 7.0)
.TP
.B \fBcores\fP: \fBint\fP (optional)
number of cores per cluster in the CPU topology
.TP
.B \fBthreads\fP: \fBint\fP (optional)
number of threads per core in the CPU topology
.TP
.B \fBmaxcpus\fP: \fBint\fP (optional)
maximum number of hotpluggable virtual CPUs in the virtual machine
.UNINDENT
.SS Since
.sp
6.1
.SS \fBx\-query\-irq\fP (Command)
.sp
Query interrupt statistics
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
interrupt statistics
.SS Since
.sp
6.2
.SS \fBx\-query\-jit\fP (Command)
.sp
Query TCG compiler statistics
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
TCG compiler statistics
.SS Since
.sp
6.2
.SS If
.sp
\fBCONFIG_TCG\fP
.SS \fBx\-query\-numa\fP (Command)
.sp
Query NUMA topology information
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
topology information
.SS Since
.sp
6.2
.SS \fBx\-query\-opcount\fP (Command)
.sp
Query TCG opcode counters
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
TCG opcode counters
.SS Since
.sp
6.2
.SS If
.sp
\fBCONFIG_TCG\fP
.SS \fBx\-query\-profile\fP (Command)
.sp
Query TCG profiling information
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
profile information
.SS Since
.sp
6.2
.SS If
.sp
\fBCONFIG_TCG\fP
.SS \fBx\-query\-ramblock\fP (Command)
.sp
Query system ramblock information
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
system ramblock information
.SS Since
.sp
6.2
.SS \fBx\-query\-rdma\fP (Command)
.sp
Query RDMA state
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
RDMA state
.SS Since
.sp
6.2
.SS \fBx\-query\-roms\fP (Command)
.sp
Query information on the registered ROMS
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
registered ROMs
.SS Since
.sp
6.2
.SS \fBx\-query\-usb\fP (Command)
.sp
Query information on the USB devices
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
USB device information
.SS Since
.sp
6.2
.SS \fBSmbiosEntryPointType\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fB32\fP
SMBIOS version 2.1 (32\-bit) Entry Point
.TP
.B \fB64\fP
SMBIOS version 3.0 (64\-bit) Entry Point
.UNINDENT
.SS Since
.sp
7.0
.SS \fBMemorySizeConfiguration\fP (Object)
.sp
Schema for memory size configuration.
.SS Members
.INDENT 0.0
.TP
.B \fBsize\fP: \fBint\fP (optional)
memory size in bytes
.TP
.B \fBmax\-size\fP: \fBint\fP (optional)
maximum hotpluggable memory size in bytes
.TP
.B \fBslots\fP: \fBint\fP (optional)
number of available memory slots for hotplug
.UNINDENT
.SS Since
.sp
7.1
.SS \fBdumpdtb\fP (Command)
.sp
Save the FDT in dtb format.
.SS Arguments
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
name of the dtb file to be created
.UNINDENT
.SS Since
.sp
7.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{"execute": "dumpdtb"}
   "arguments": { "filename": "fdt.dtb" } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBCONFIG_FDT\fP
.SS \fBCpuModelInfo\fP (Object)
.sp
Virtual CPU model.
.sp
A CPU model consists of the name of a CPU definition, to which
delta changes are applied (e.g. features added/removed). Most magic values
that an architecture might require should be hidden behind the name.
However, if required, architectures can expose relevant properties.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the name of the CPU definition the model is based on
.TP
.B \fBprops\fP: \fBvalue\fP (optional)
a dictionary of QOM properties to be applied
.UNINDENT
.SS Since
.sp
2.8
.SS \fBCpuModelExpansionType\fP (Enum)
.sp
An enumeration of CPU model expansion types.
.SS Values
.INDENT 0.0
.TP
.B \fBstatic\fP
Expand to a static CPU model, a combination of a static base
model name and property delta changes. As the static base model will
never change, the expanded CPU model will be the same, independent of
QEMU version, machine type, machine options, and accelerator options.
Therefore, the resulting model can be used by tooling without having
to specify a compatibility machine \- e.g. when displaying the "host"
model. The \fBstatic\fP CPU models are migration\-safe.
.TP
.B \fBfull\fP
Expand all properties. The produced model is not guaranteed to be
migration\-safe, but allows tooling to get an insight and work with
model details.
.UNINDENT
.SS Note
.sp
When a non\-migration\-safe CPU model is expanded in static mode, some
features enabled by the CPU model may be omitted, because they can\(aqt be
implemented by a static CPU model definition (e.g. cache info passthrough and
PMU passthrough in x86). If you need an accurate representation of the
features enabled by a non\-migration\-safe CPU model, use \fBfull\fP\&. If you need a
static representation that will keep ABI compatibility even when changing QEMU
version or machine\-type, use \fBstatic\fP (but keep in mind that some features may
be omitted).
.SS Since
.sp
2.8
.SS \fBCpuModelCompareResult\fP (Enum)
.sp
An enumeration of CPU model comparison results. The result is usually
calculated using e.g. CPU features or CPU generations.
.SS Values
.INDENT 0.0
.TP
.B \fBincompatible\fP
If model A is incompatible to model B, model A is not
guaranteed to run where model B runs and the other way around.
.TP
.B \fBidentical\fP
If model A is identical to model B, model A is guaranteed to run
where model B runs and the other way around.
.TP
.B \fBsuperset\fP
If model A is a superset of model B, model B is guaranteed to run
where model A runs. There are no guarantees about the other way.
.TP
.B \fBsubset\fP
If model A is a subset of model B, model A is guaranteed to run
where model B runs. There are no guarantees about the other way.
.UNINDENT
.SS Since
.sp
2.8
.SS \fBCpuModelBaselineInfo\fP (Object)
.sp
The result of a CPU model baseline.
.SS Members
.INDENT 0.0
.TP
.B \fBmodel\fP: \fBCpuModelInfo\fP
the baselined CpuModelInfo.
.UNINDENT
.SS Since
.sp
2.8
.SS If
.sp
\fBTARGET_S390X\fP
.SS \fBCpuModelCompareInfo\fP (Object)
.sp
The result of a CPU model comparison.
.SS Members
.INDENT 0.0
.TP
.B \fBresult\fP: \fBCpuModelCompareResult\fP
The result of the compare operation.
.TP
.B \fBresponsible\-properties\fP: \fBarray of string\fP
List of properties that led to the comparison result
not being identical.
.UNINDENT
\fBresponsible\-properties\fP is a list of QOM property names that led to
both CPUs not being detected as identical. For identical models, this
list is empty.
If a QOM property is read\-only, that means there\(aqs no known way to make the
CPU models identical. If the special property name "type" is included, the
models are by definition not identical and cannot be made identical.
.SS Since
.sp
2.8
.SS If
.sp
\fBTARGET_S390X\fP
.SS \fBquery\-cpu\-model\-comparison\fP (Command)
.sp
Compares two CPU models, returning how they compare in a specific
configuration. The results indicates how both models compare regarding
runnability. This result can be used by tooling to make decisions if a
certain CPU model will run in a certain configuration or if a compatible
CPU model has to be created by baselining.
.sp
Usually, a CPU model is compared against the maximum possible CPU model
of a certain configuration (e.g. the "host" model for KVM). If that CPU
model is identical or a subset, it will run in that configuration.
.sp
The result returned by this command may be affected by:
.INDENT 0.0
.IP \(bu 2
QEMU version: CPU models may look different depending on the QEMU version.
(Except for CPU models reported as "static" in query\-cpu\-definitions.)
.IP \(bu 2
machine\-type: CPU model may look different depending on the machine\-type.
(Except for CPU models reported as "static" in query\-cpu\-definitions.)
.IP \(bu 2
machine options (including accelerator): in some architectures, CPU models
may look different depending on machine and accelerator options. (Except for
CPU models reported as "static" in query\-cpu\-definitions.)
.IP \(bu 2
"\-cpu" arguments and global properties: arguments to the \-cpu option and
global properties may affect expansion of CPU models. Using
query\-cpu\-model\-expansion while using these is not advised.
.UNINDENT
.sp
Some architectures may not support comparing CPU models. s390x supports
comparing CPU models.
.SS Arguments
.INDENT 0.0
.TP
.B \fBmodela\fP: \fBCpuModelInfo\fP
Not documented
.TP
.B \fBmodelb\fP: \fBCpuModelInfo\fP
Not documented
.UNINDENT
.SS Returns
.sp
a CpuModelBaselineInfo. Returns an error if comparing CPU models is
not supported, if a model cannot be used, if a model contains
an unknown cpu definition name, unknown properties or properties
with wrong types.
.SS Note
.sp
this command isn\(aqt specific to s390x, but is only implemented
on this architecture currently.
.SS Since
.sp
2.8
.SS If
.sp
\fBTARGET_S390X\fP
.SS \fBquery\-cpu\-model\-baseline\fP (Command)
.sp
Baseline two CPU models, creating a compatible third model. The created
model will always be a static, migration\-safe CPU model (see "static"
CPU model expansion for details).
.sp
This interface can be used by tooling to create a compatible CPU model out
two CPU models. The created CPU model will be identical to or a subset of
both CPU models when comparing them. Therefore, the created CPU model is
guaranteed to run where the given CPU models run.
.sp
The result returned by this command may be affected by:
.INDENT 0.0
.IP \(bu 2
QEMU version: CPU models may look different depending on the QEMU version.
(Except for CPU models reported as "static" in query\-cpu\-definitions.)
.IP \(bu 2
machine\-type: CPU model may look different depending on the machine\-type.
(Except for CPU models reported as "static" in query\-cpu\-definitions.)
.IP \(bu 2
machine options (including accelerator): in some architectures, CPU models
may look different depending on machine and accelerator options. (Except for
CPU models reported as "static" in query\-cpu\-definitions.)
.IP \(bu 2
"\-cpu" arguments and global properties: arguments to the \-cpu option and
global properties may affect expansion of CPU models. Using
query\-cpu\-model\-expansion while using these is not advised.
.UNINDENT
.sp
Some architectures may not support baselining CPU models. s390x supports
baselining CPU models.
.SS Arguments
.INDENT 0.0
.TP
.B \fBmodela\fP: \fBCpuModelInfo\fP
Not documented
.TP
.B \fBmodelb\fP: \fBCpuModelInfo\fP
Not documented
.UNINDENT
.SS Returns
.sp
a CpuModelBaselineInfo. Returns an error if baselining CPU models is
not supported, if a model cannot be used, if a model contains
an unknown cpu definition name, unknown properties or properties
with wrong types.
.SS Note
.sp
this command isn\(aqt specific to s390x, but is only implemented
on this architecture currently.
.SS Since
.sp
2.8
.SS If
.sp
\fBTARGET_S390X\fP
.SS \fBCpuModelExpansionInfo\fP (Object)
.sp
The result of a cpu model expansion.
.SS Members
.INDENT 0.0
.TP
.B \fBmodel\fP: \fBCpuModelInfo\fP
the expanded CpuModelInfo.
.UNINDENT
.SS Since
.sp
2.8
.SS If
.sp
\fBTARGET_S390X or TARGET_I386 or TARGET_ARM\fP
.SS \fBquery\-cpu\-model\-expansion\fP (Command)
.sp
Expands a given CPU model (or a combination of CPU model + additional options)
to different granularities, allowing tooling to get an understanding what a
specific CPU model looks like in QEMU under a certain configuration.
.sp
This interface can be used to query the "host" CPU model.
.sp
The data returned by this command may be affected by:
.INDENT 0.0
.IP \(bu 2
QEMU version: CPU models may look different depending on the QEMU version.
(Except for CPU models reported as "static" in query\-cpu\-definitions.)
.IP \(bu 2
machine\-type: CPU model  may look different depending on the machine\-type.
(Except for CPU models reported as "static" in query\-cpu\-definitions.)
.IP \(bu 2
machine options (including accelerator): in some architectures, CPU models
may look different depending on machine and accelerator options. (Except for
CPU models reported as "static" in query\-cpu\-definitions.)
.IP \(bu 2
"\-cpu" arguments and global properties: arguments to the \-cpu option and
global properties may affect expansion of CPU models. Using
query\-cpu\-model\-expansion while using these is not advised.
.UNINDENT
.sp
Some architectures may not support all expansion types. s390x supports
"full" and "static". Arm only supports "full".
.SS Arguments
.INDENT 0.0
.TP
.B \fBtype\fP: \fBCpuModelExpansionType\fP
Not documented
.TP
.B \fBmodel\fP: \fBCpuModelInfo\fP
Not documented
.UNINDENT
.SS Returns
.sp
a CpuModelExpansionInfo. Returns an error if expanding CPU models is
not supported, if the model cannot be expanded, if the model contains
an unknown CPU definition name, unknown properties or properties
with a wrong type. Also returns an error if an expansion type is
not supported.
.SS Since
.sp
2.8
.SS If
.sp
\fBTARGET_S390X or TARGET_I386 or TARGET_ARM\fP
.SS \fBCpuDefinitionInfo\fP (Object)
.sp
Virtual CPU definition.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
the name of the CPU definition
.TP
.B \fBmigration\-safe\fP: \fBboolean\fP (optional)
whether a CPU definition can be safely used for
migration in combination with a QEMU compatibility machine
when migrating between different QEMU versions and between
hosts with different sets of (hardware or software)
capabilities. If not provided, information is not available
and callers should not assume the CPU definition to be
migration\-safe. (since 2.8)
.TP
.B \fBstatic\fP: \fBboolean\fP
whether a CPU definition is static and will not change depending on
QEMU version, machine type, machine options and accelerator options.
A static model is always migration\-safe. (since 2.8)
.TP
.B \fBunavailable\-features\fP: \fBarray of string\fP (optional)
List of properties that prevent
the CPU model from running in the current
host. (since 2.8)
.TP
.B \fBtypename\fP: \fBstring\fP
Type name that can be used as argument to \fBdevice\-list\-properties\fP,
to introspect properties configurable using \-cpu or \-global.
(since 2.9)
.TP
.B \fBalias\-of\fP: \fBstring\fP (optional)
Name of CPU model this model is an alias for.  The target of the
CPU model alias may change depending on the machine type.
Management software is supposed to translate CPU model aliases
in the VM configuration, because aliases may stop being
migration\-safe in the future (since 4.1)
.TP
.B \fBdeprecated\fP: \fBboolean\fP
If true, this CPU model is deprecated and may be removed in
in some future version of QEMU according to the QEMU deprecation
policy. (since 5.2)
.UNINDENT
\fBunavailable\-features\fP is a list of QOM property names that
represent CPU model attributes that prevent the CPU from running.
If the QOM property is read\-only, that means there\(aqs no known
way to make the CPU model run in the current host. Implementations
that choose not to provide specific information return the
property name "type".
If the property is read\-write, it means that it MAY be possible
to run the CPU model in the current host if that property is
changed. Management software can use it as hints to suggest or
choose an alternative for the user, or just to generate meaningful
error messages explaining why the CPU model can\(aqt be used.
If \fBunavailable\-features\fP is an empty list, the CPU model is
runnable using the current host and machine\-type.
If \fBunavailable\-features\fP is not present, runnability
information for the CPU is not available.
.SS Since
.sp
1.2
.SS If
.sp
\fBTARGET_PPC or TARGET_ARM or TARGET_I386 or TARGET_S390X or TARGET_MIPS or TARGET_LOONGARCH64\fP
.SS \fBquery\-cpu\-definitions\fP (Command)
.sp
Return a list of supported virtual CPU definitions
.SS Returns
.sp
a list of CpuDefInfo
.SS Since
.sp
1.2
.SS If
.sp
\fBTARGET_PPC or TARGET_ARM or TARGET_I386 or TARGET_S390X or TARGET_MIPS or TARGET_LOONGARCH64\fP
.SH RECORD/REPLAY
.SS \fBReplayMode\fP (Enum)
.sp
Mode of the replay subsystem.
.SS Values
.INDENT 0.0
.TP
.B \fBnone\fP
normal execution mode. Replay or record are not enabled.
.TP
.B \fBrecord\fP
record mode. All non\-deterministic data is written into the
replay log.
.TP
.B \fBplay\fP
replay mode. Non\-deterministic data required for system execution
is read from the log.
.UNINDENT
.SS Since
.sp
2.5
.SS \fBReplayInfo\fP (Object)
.sp
Record/replay information.
.SS Members
.INDENT 0.0
.TP
.B \fBmode\fP: \fBReplayMode\fP
current mode.
.TP
.B \fBfilename\fP: \fBstring\fP (optional)
name of the record/replay log file.
It is present only in record or replay modes, when the log
is recorded or replayed.
.TP
.B \fBicount\fP: \fBint\fP
current number of executed instructions.
.UNINDENT
.SS Since
.sp
5.2
.SS \fBquery\-replay\fP (Command)
.sp
Retrieve the record/replay information.
It includes current instruction count which may be used for
\fBreplay\-break\fP and \fBreplay\-seek\fP commands.
.SS Returns
.sp
record/replay information.
.SS Since
.sp
5.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-replay" }
<\- { "return": { "mode": "play", "filename": "log.rr", "icount": 220414 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBreplay\-break\fP (Command)
.sp
Set replay breakpoint at instruction count \fBicount\fP\&.
Execution stops when the specified instruction is reached.
There can be at most one breakpoint. When breakpoint is set, any prior
one is removed.  The breakpoint may be set only in replay mode and only
"in the future", i.e. at instruction counts greater than the current one.
The current instruction count can be observed with \fBquery\-replay\fP\&.
.SS Arguments
.INDENT 0.0
.TP
.B \fBicount\fP: \fBint\fP
instruction count to stop at
.UNINDENT
.SS Since
.sp
5.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "replay\-break", "arguments": { "icount": 220414 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBreplay\-delete\-break\fP (Command)
.sp
Remove replay breakpoint which was set with \fBreplay\-break\fP\&.
The command is ignored when there are no replay breakpoints.
.SS Since
.sp
5.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "replay\-delete\-break" }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBreplay\-seek\fP (Command)
.sp
Automatically proceed to the instruction count \fBicount\fP, when
replaying the execution. The command automatically loads nearest
snapshot and replays the execution to find the desired instruction.
When there is no preceding snapshot or the execution is not replayed,
then the command fails.
icount for the reference may be obtained with \fBquery\-replay\fP command.
.SS Arguments
.INDENT 0.0
.TP
.B \fBicount\fP: \fBint\fP
target instruction count
.UNINDENT
.SS Since
.sp
5.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "replay\-seek", "arguments": { "icount": 220414 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH YANK FEATURE
.SS \fBYankInstanceType\fP (Enum)
.sp
An enumeration of yank instance types. See \fBYankInstance\fP for more
information.
.SS Values
.INDENT 0.0
.TP
.B \fBblock\-node\fP
Not documented
.TP
.B \fBchardev\fP
Not documented
.TP
.B \fBmigration\fP
Not documented
.UNINDENT
.SS Since
.sp
6.0
.SS \fBYankInstanceBlockNode\fP (Object)
.sp
Specifies which block graph node to yank. See \fBYankInstance\fP for more
information.
.SS Members
.INDENT 0.0
.TP
.B \fBnode\-name\fP: \fBstring\fP
the name of the block graph node
.UNINDENT
.SS Since
.sp
6.0
.SS \fBYankInstanceChardev\fP (Object)
.sp
Specifies which character device to yank. See \fBYankInstance\fP for more
information.
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the chardev\(aqs ID
.UNINDENT
.SS Since
.sp
6.0
.SS \fBYankInstance\fP (Object)
.sp
A yank instance can be yanked with the \fByank\fP qmp command to recover from a
hanging QEMU.
.INDENT 0.0
.TP
.B Currently implemented yank instances:
.INDENT 7.0
.IP \(bu 2
nbd block device:
Yanking it will shut down the connection to the nbd server without
attempting to reconnect.
.IP \(bu 2
socket chardev:
Yanking it will shut down the connected socket.
.IP \(bu 2
migration:
Yanking it will shut down all migration connections. Unlike
\fBmigrate_cancel\fP, it will not notify the migration process, so migration
will go into \fBfailed\fP state, instead of \fBcancelled\fP state. \fByank\fP should be
used to recover from hangs.
.UNINDENT
.UNINDENT
.SS Members
.INDENT 0.0
.TP
.B \fBtype\fP: \fBYankInstanceType\fP
Not documented
.TP
.B The members of \fBYankInstanceBlockNode\fP when \fBtype\fP is \fB"block\-node"\fP
.TP
.B The members of \fBYankInstanceChardev\fP when \fBtype\fP is \fB"chardev"\fP
.UNINDENT
.SS Since
.sp
6.0
.SS \fByank\fP (Command)
.sp
Try to recover from hanging QEMU by yanking the specified instances. See
\fBYankInstance\fP for more information.
.sp
Takes a list of \fBYankInstance\fP as argument.
.SS Arguments
.INDENT 0.0
.TP
.B \fBinstances\fP: \fBarray of YankInstance\fP
Not documented
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
\fBDeviceNotFound\fP error, if any of the YankInstances doesn\(aqt exist
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "yank",
     "arguments": {
         "instances": [
              { "type": "block\-node",
                "node\-name": "nbd0" }
         ] } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
6.0
.SS \fBquery\-yank\fP (Command)
.sp
Query yank instances. See \fBYankInstance\fP for more information.
.SS Returns
.sp
list of \fBYankInstance\fP
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-yank" }
<\- { "return": [
         { "type": "block\-node",
           "node\-name": "nbd0" }
     ] }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Since
.sp
6.0
.SH MISCELLANEA
.SS \fBadd_client\fP (Command)
.sp
Allow client connections for VNC, Spice and socket based
character devices to be passed in to QEMU via SCM_RIGHTS.
.SS Arguments
.INDENT 0.0
.TP
.B \fBprotocol\fP: \fBstring\fP
protocol name. Valid names are "vnc", "spice", "\fBdbus\-display\fP" or
the name of a character device (eg. from \-chardev id=XXXX)
.TP
.B \fBfdname\fP: \fBstring\fP
file descriptor name previously passed via \(aqgetfd\(aq command
.TP
.B \fBskipauth\fP: \fBboolean\fP (optional)
whether to skip authentication. Only applies
to "vnc" and "spice" protocols
.TP
.B \fBtls\fP: \fBboolean\fP (optional)
whether to perform TLS. Only applies to the "spice"
protocol
.UNINDENT
.SS Returns
.sp
nothing on success.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "add_client", "arguments": { "protocol": "vnc",
                                             "fdname": "myclient" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBNameInfo\fP (Object)
.sp
Guest name information.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP (optional)
The name of the guest
.UNINDENT
.SS Since
.sp
0.14
.SS \fBquery\-name\fP (Command)
.sp
Return the name information of a guest.
.SS Returns
.sp
\fBNameInfo\fP of the guest
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-name" }
<\- { "return": { "name": "qemu\-name" } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBIOThreadInfo\fP (Object)
.sp
Information about an iothread
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
the identifier of the iothread
.TP
.B \fBthread\-id\fP: \fBint\fP
ID of the underlying host thread
.TP
.B \fBpoll\-max\-ns\fP: \fBint\fP
maximum polling time in ns, 0 means polling is disabled
(since 2.9)
.TP
.B \fBpoll\-grow\fP: \fBint\fP
how many ns will be added to polling time, 0 means that it\(aqs not
configured (since 2.9)
.TP
.B \fBpoll\-shrink\fP: \fBint\fP
how many ns will be removed from polling time, 0 means that
it\(aqs not configured (since 2.9)
.TP
.B \fBaio\-max\-batch\fP: \fBint\fP
maximum number of requests in a batch for the AIO engine,
0 means that the engine will use its default (since 6.1)
.UNINDENT
.SS Since
.sp
2.0
.SS \fBquery\-iothreads\fP (Command)
.sp
Returns a list of information about each iothread.
.SS Note
.sp
this list excludes the QEMU main loop thread, which is not declared
using the \-object iothread command\-line option.  It is always the main thread
of the process.
.SS Returns
.sp
a list of \fBIOThreadInfo\fP for each iothread
.SS Since
.sp
2.0
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-iothreads" }
<\- { "return": [
         {
            "id":"iothread0",
            "thread\-id":3134
         },
         {
            "id":"iothread1",
            "thread\-id":3135
         }
      ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBstop\fP (Command)
.sp
Stop all guest VCPU execution.
.SS Since
.sp
0.14
.SS Notes
.sp
This function will succeed even if the guest is already in the stopped
state.  In "inmigrate" state, it will ensure that the guest
remains paused once migration finishes, as if the \-S option was
passed on the command line.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "stop" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBcont\fP (Command)
.sp
Resume guest VCPU execution.
.SS Since
.sp
0.14
.SS Returns
.sp
If successful, nothing
.SS Notes
.sp
This command will succeed if the guest is currently running.  It
will also succeed if the guest is in the "inmigrate" state; in
this case, the effect of the command is to make sure the guest
starts once migration finishes, removing the effect of the \-S
command line option if it was passed.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "cont" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBx\-exit\-preconfig\fP (Command)
.sp
Exit from "preconfig" state
.sp
This command makes QEMU exit the preconfig state and proceed with
VM initialization using configuration data provided on the command line
and via the QMP monitor during the preconfig state. The command is only
available during the preconfig state (i.e. when the \-\-preconfig command
line option was in use).
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is experimental.
.UNINDENT
.SS Since
.sp
3.0
.SS Returns
.sp
nothing
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "x\-exit\-preconfig" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBhuman\-monitor\-command\fP (Command)
.sp
Execute a command on the human monitor and return the output.
.SS Arguments
.INDENT 0.0
.TP
.B \fBcommand\-line\fP: \fBstring\fP
the command to execute in the human monitor
.TP
.B \fBcpu\-index\fP: \fBint\fP (optional)
The CPU to use for commands that require an implicit CPU
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBsavevm\-monitor\-nodes\fP
If present, HMP command savevm only snapshots
monitor\-owned nodes if they have no parents.
This allows the use of \(aqsavevm\(aq with
\-blockdev. (since 4.2)
.UNINDENT
.SS Returns
.sp
the output of the command as a string
.SS Since
.sp
0.14
.SS Notes
.sp
This command only exists as a stop\-gap.  Its use is highly
discouraged.  The semantics of this command are not
guaranteed: this means that command names, arguments and
responses can change or be removed at ANY time.  Applications
that rely on long term stability guarantees should NOT
use this command.
.sp
Known limitations:
.INDENT 0.0
.IP \(bu 2
This command is stateless, this means that commands that depend
on state information (such as getfd) might not work
.IP \(bu 2
Commands that prompt the user for data don\(aqt currently work
.UNINDENT
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "human\-monitor\-command",
     "arguments": { "command\-line": "info kvm" } }
<\- { "return": "kvm support: enabled\er\en" }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBgetfd\fP (Command)
.sp
Receive a file descriptor via SCM rights and assign it a name
.SS Arguments
.INDENT 0.0
.TP
.B \fBfdname\fP: \fBstring\fP
file descriptor name
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
0.14
.SS Notes
.sp
If \fBfdname\fP already exists, the file descriptor assigned to
it will be closed and replaced by the received file
descriptor.
.sp
The \(aqclosefd\(aq command can be used to explicitly close the
file descriptor when it is no longer needed.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "getfd", "arguments": { "fdname": "fd1" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBclosefd\fP (Command)
.sp
Close a file descriptor previously passed via SCM rights
.SS Arguments
.INDENT 0.0
.TP
.B \fBfdname\fP: \fBstring\fP
file descriptor name
.UNINDENT
.SS Returns
.sp
Nothing on success
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "closefd", "arguments": { "fdname": "fd1" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBAddfdInfo\fP (Object)
.sp
Information about a file descriptor that was added to an fd set.
.SS Members
.INDENT 0.0
.TP
.B \fBfdset\-id\fP: \fBint\fP
The ID of the fd set that \fBfd\fP was added to.
.TP
.B \fBfd\fP: \fBint\fP
The file descriptor that was received via SCM rights and
added to the fd set.
.UNINDENT
.SS Since
.sp
1.2
.SS \fBadd\-fd\fP (Command)
.sp
Add a file descriptor, that was passed via SCM rights, to an fd set.
.SS Arguments
.INDENT 0.0
.TP
.B \fBfdset\-id\fP: \fBint\fP (optional)
The ID of the fd set to add the file descriptor to.
.TP
.B \fBopaque\fP: \fBstring\fP (optional)
A free\-form string that can be used to describe the fd.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
\fBAddfdInfo\fP on success
.IP \(bu 2
If file descriptor was not received, FdNotSupplied
.IP \(bu 2
If \fBfdset\-id\fP is a negative value, InvalidParameterValue
.UNINDENT
.SS Notes
.sp
The list of fd sets is shared by all monitor connections.
.sp
If \fBfdset\-id\fP is not specified, a new fd set will be created.
.SS Since
.sp
1.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "add\-fd", "arguments": { "fdset\-id": 1 } }
<\- { "return": { "fdset\-id": 1, "fd": 3 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBremove\-fd\fP (Command)
.sp
Remove a file descriptor from an fd set.
.SS Arguments
.INDENT 0.0
.TP
.B \fBfdset\-id\fP: \fBint\fP
The ID of the fd set that the file descriptor belongs to.
.TP
.B \fBfd\fP: \fBint\fP (optional)
The file descriptor that is to be removed.
.UNINDENT
.SS Returns
.INDENT 0.0
.IP \(bu 2
Nothing on success
.IP \(bu 2
If \fBfdset\-id\fP or \fBfd\fP is not found, FdNotFound
.UNINDENT
.SS Since
.sp
1.2
.SS Notes
.sp
The list of fd sets is shared by all monitor connections.
.sp
If \fBfd\fP is not specified, all file descriptors in \fBfdset\-id\fP
will be removed.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "remove\-fd", "arguments": { "fdset\-id": 1, "fd": 3 } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBFdsetFdInfo\fP (Object)
.sp
Information about a file descriptor that belongs to an fd set.
.SS Members
.INDENT 0.0
.TP
.B \fBfd\fP: \fBint\fP
The file descriptor value.
.TP
.B \fBopaque\fP: \fBstring\fP (optional)
A free\-form string that can be used to describe the fd.
.UNINDENT
.SS Since
.sp
1.2
.SS \fBFdsetInfo\fP (Object)
.sp
Information about an fd set.
.SS Members
.INDENT 0.0
.TP
.B \fBfdset\-id\fP: \fBint\fP
The ID of the fd set.
.TP
.B \fBfds\fP: \fBarray of FdsetFdInfo\fP
A list of file descriptors that belong to this fd set.
.UNINDENT
.SS Since
.sp
1.2
.SS \fBquery\-fdsets\fP (Command)
.sp
Return information describing all fd sets.
.SS Returns
.sp
A list of \fBFdsetInfo\fP
.SS Since
.sp
1.2
.SS Note
.sp
The list of fd sets is shared by all monitor connections.
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-fdsets" }
<\- { "return": [
       {
         "fds": [
           {
             "fd": 30,
             "opaque": "rdonly:/path/to/file"
           },
           {
             "fd": 24,
             "opaque": "rdwr:/path/to/file"
           }
         ],
         "fdset\-id": 1
       },
       {
         "fds": [
           {
             "fd": 28
           },
           {
             "fd": 29
           }
         ],
         "fdset\-id": 0
       }
     ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBCommandLineParameterType\fP (Enum)
.sp
Possible types for an option parameter.
.SS Values
.INDENT 0.0
.TP
.B \fBstring\fP
accepts a character string
.TP
.B \fBboolean\fP
accepts "on" or "off"
.TP
.B \fBnumber\fP
accepts a number
.TP
.B \fBsize\fP
accepts a number followed by an optional suffix (K)ilo,
(M)ega, (G)iga, (T)era
.UNINDENT
.SS Since
.sp
1.5
.SS \fBCommandLineParameterInfo\fP (Object)
.sp
Details about a single parameter of a command line option.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
parameter name
.TP
.B \fBtype\fP: \fBCommandLineParameterType\fP
parameter \fBCommandLineParameterType\fP
.TP
.B \fBhelp\fP: \fBstring\fP (optional)
human readable text string, not suitable for parsing.
.TP
.B \fBdefault\fP: \fBstring\fP (optional)
default value string (since 2.1)
.UNINDENT
.SS Since
.sp
1.5
.SS \fBCommandLineOptionInfo\fP (Object)
.sp
Details about a command line option, including its list of parameter details
.SS Members
.INDENT 0.0
.TP
.B \fBoption\fP: \fBstring\fP
option name
.TP
.B \fBparameters\fP: \fBarray of CommandLineParameterInfo\fP
an array of \fBCommandLineParameterInfo\fP
.UNINDENT
.SS Since
.sp
1.5
.SS \fBquery\-command\-line\-options\fP (Command)
.sp
Query command line option schema.
.SS Arguments
.INDENT 0.0
.TP
.B \fBoption\fP: \fBstring\fP (optional)
option name
.UNINDENT
.SS Returns
.sp
list of \fBCommandLineOptionInfo\fP for all options (or for the given
\fBoption\fP).  Returns an error if the given \fBoption\fP doesn\(aqt exist.
.SS Since
.sp
1.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-command\-line\-options",
     "arguments": { "option": "option\-rom" } }
<\- { "return": [
        {
            "parameters": [
                {
                    "name": "romfile",
                    "type": "string"
                },
                {
                    "name": "bootindex",
                    "type": "number"
                }
            ],
            "option": "option\-rom"
        }
     ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBRTC_CHANGE\fP (Event)
.sp
Emitted when the guest changes the RTC time.
.SS Arguments
.INDENT 0.0
.TP
.B \fBoffset\fP: \fBint\fP
offset in seconds between base RTC clock (as specified
by \-rtc base), and new RTC clock value
.TP
.B \fBqom\-path\fP: \fBstring\fP
path to the RTC object in the QOM tree
.UNINDENT
.SS Note
.sp
This event is rate\-limited.
It is not guaranteed that the RTC in the system implements
this event, or even that the system has an RTC at all.
.SS Since
.sp
0.13
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\-   { "event": "RTC_CHANGE",
       "data": { "offset": 78 },
       "timestamp": { "seconds": 1267020223, "microseconds": 435656 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBVFU_CLIENT_HANGUP\fP (Event)
.sp
Emitted when the client of a TYPE_VFIO_USER_SERVER closes the
communication channel
.SS Arguments
.INDENT 0.0
.TP
.B \fBvfu\-id\fP: \fBstring\fP
ID of the TYPE_VFIO_USER_SERVER object. It is the last component
of \fBvfu\-qom\-path\fP referenced below
.TP
.B \fBvfu\-qom\-path\fP: \fBstring\fP
path to the TYPE_VFIO_USER_SERVER object in the QOM tree
.TP
.B \fBdev\-id\fP: \fBstring\fP
ID of attached PCI device
.TP
.B \fBdev\-qom\-path\fP: \fBstring\fP
path to attached PCI device in the QOM tree
.UNINDENT
.SS Since
.sp
7.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "VFU_CLIENT_HANGUP",
     "data": { "vfu\-id": "vfu1",
               "vfu\-qom\-path": "/objects/vfu1",
               "dev\-id": "sas1",
               "dev\-qom\-path": "/machine/peripheral/sas1" },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBrtc\-reset\-reinjection\fP (Command)
.sp
This command will reset the RTC interrupt reinjection backlog.
Can be used if another mechanism to synchronize guest time
is in effect, for example QEMU guest agent\(aqs guest\-set\-time
command.
.SS Since
.sp
2.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "rtc\-reset\-reinjection" }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBSevState\fP (Enum)
.sp
An enumeration of SEV state information used during \fBquery\-sev\fP\&.
.SS Values
.INDENT 0.0
.TP
.B \fBuninit\fP
The guest is uninitialized.
.TP
.B \fBlaunch\-update\fP
The guest is currently being launched; plaintext data and
register state is being imported.
.TP
.B \fBlaunch\-secret\fP
The guest is currently being launched; ciphertext data
is being imported.
.TP
.B \fBrunning\fP
The guest is fully launched or migrated in.
.TP
.B \fBsend\-update\fP
The guest is currently being migrated out to another machine.
.TP
.B \fBreceive\-update\fP
The guest is currently being migrated from another machine.
.UNINDENT
.SS Since
.sp
2.12
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBSevInfo\fP (Object)
.sp
Information about Secure Encrypted Virtualization (SEV) support
.SS Members
.INDENT 0.0
.TP
.B \fBenabled\fP: \fBboolean\fP
true if SEV is active
.TP
.B \fBapi\-major\fP: \fBint\fP
SEV API major version
.TP
.B \fBapi\-minor\fP: \fBint\fP
SEV API minor version
.TP
.B \fBbuild\-id\fP: \fBint\fP
SEV FW build id
.TP
.B \fBpolicy\fP: \fBint\fP
SEV policy value
.TP
.B \fBstate\fP: \fBSevState\fP
SEV guest state
.TP
.B \fBhandle\fP: \fBint\fP
SEV firmware handle
.UNINDENT
.SS Since
.sp
2.12
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBquery\-sev\fP (Command)
.sp
Returns information about SEV
.SS Returns
.sp
\fBSevInfo\fP
.SS Since
.sp
2.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-sev" }
<\- { "return": { "enabled": true, "api\-major" : 0, "api\-minor" : 0,
                 "build\-id" : 0, "policy" : 0, "state" : "running",
                 "handle" : 1 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBSevLaunchMeasureInfo\fP (Object)
.sp
SEV Guest Launch measurement information
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBstring\fP
the measurement value encoded in base64
.UNINDENT
.SS Since
.sp
2.12
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBquery\-sev\-launch\-measure\fP (Command)
.sp
Query the SEV guest launch information.
.SS Returns
.sp
The \fBSevLaunchMeasureInfo\fP for the guest
.SS Since
.sp
2.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-sev\-launch\-measure" }
<\- { "return": { "data": "4l8LXeNlSPUDlXPJG5966/8%YZ" } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBSevCapability\fP (Object)
.sp
The struct describes capability for a Secure Encrypted Virtualization
feature.
.SS Members
.INDENT 0.0
.TP
.B \fBpdh\fP: \fBstring\fP
Platform Diffie\-Hellman key (base64 encoded)
.TP
.B \fBcert\-chain\fP: \fBstring\fP
PDH certificate chain (base64 encoded)
.TP
.B \fBcpu0\-id\fP: \fBstring\fP
Unique ID of CPU0 (base64 encoded) (since 7.1)
.TP
.B \fBcbitpos\fP: \fBint\fP
C\-bit location in page table entry
.TP
.B \fBreduced\-phys\-bits\fP: \fBint\fP
Number of physical Address bit reduction when SEV is
enabled
.UNINDENT
.SS Since
.sp
2.12
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBquery\-sev\-capabilities\fP (Command)
.sp
This command is used to get the SEV capabilities, and is supported on AMD
X86 platforms only.
.SS Returns
.sp
SevCapability objects.
.SS Since
.sp
2.12
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-sev\-capabilities" }
<\- { "return": { "pdh": "8CCDD8DDD", "cert\-chain": "888CCCDDDEE",
                 "cpu0\-id": "2lvmGwo+...61iEinw==",
                 "cbitpos": 47, "reduced\-phys\-bits": 5}}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBsev\-inject\-launch\-secret\fP (Command)
.sp
This command injects a secret blob into memory of SEV guest.
.SS Arguments
.INDENT 0.0
.TP
.B \fBpacket\-header\fP: \fBstring\fP
the launch secret packet header encoded in base64
.TP
.B \fBsecret\fP: \fBstring\fP
the launch secret data to be injected encoded in base64
.TP
.B \fBgpa\fP: \fBint\fP (optional)
the guest physical address where secret will be injected.
.UNINDENT
.SS Since
.sp
6.0
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBSevAttestationReport\fP (Object)
.sp
The struct describes attestation report for a Secure Encrypted
Virtualization feature.
.SS Members
.INDENT 0.0
.TP
.B \fBdata\fP: \fBstring\fP
guest attestation report (base64 encoded)
.UNINDENT
.SS Since
.sp
6.1
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBquery\-sev\-attestation\-report\fP (Command)
.sp
This command is used to get the SEV attestation report, and is
supported on AMD X86 platforms only.
.SS Arguments
.INDENT 0.0
.TP
.B \fBmnonce\fP: \fBstring\fP
a random 16 bytes value encoded in base64 (it will be
included in report)
.UNINDENT
.SS Returns
.sp
SevAttestationReport objects.
.SS Since
.sp
6.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute" : "query\-sev\-attestation\-report",
                 "arguments": { "mnonce": "aaaaaaa" } }
<\- { "return" : { "data": "aaaaaaaabbbddddd"} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBdump\-skeys\fP (Command)
.sp
Dump guest\(aqs storage keys
.SS Arguments
.INDENT 0.0
.TP
.B \fBfilename\fP: \fBstring\fP
the path to the file to dump to
.UNINDENT
This command is only supported on s390 architecture.
.SS Since
.sp
2.5
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "dump\-skeys",
     "arguments": { "filename": "/tmp/skeys" } }
<\- { "return": {} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBTARGET_S390X\fP
.SS \fBGICCapability\fP (Object)
.sp
The struct describes capability for a specific GIC (Generic
Interrupt Controller) version. These bits are not only decided by
QEMU/KVM software version, but also decided by the hardware that
the program is running upon.
.SS Members
.INDENT 0.0
.TP
.B \fBversion\fP: \fBint\fP
version of GIC to be described. Currently, only 2 and 3
are supported.
.TP
.B \fBemulated\fP: \fBboolean\fP
whether current QEMU/hardware supports emulated GIC
device in user space.
.TP
.B \fBkernel\fP: \fBboolean\fP
whether current QEMU/hardware supports hardware
accelerated GIC device in kernel.
.UNINDENT
.SS Since
.sp
2.6
.SS If
.sp
\fBTARGET_ARM\fP
.SS \fBquery\-gic\-capabilities\fP (Command)
.sp
This command is ARM\-only. It will return a list of GICCapability
objects that describe its capability bits.
.SS Returns
.sp
a list of GICCapability objects.
.SS Since
.sp
2.6
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-gic\-capabilities" }
<\- { "return": [{ "version": 2, "emulated": true, "kernel": false },
                { "version": 3, "emulated": false, "kernel": true } ] }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBTARGET_ARM\fP
.SS \fBSGXEPCSection\fP (Object)
.sp
Information about intel SGX EPC section info
.SS Members
.INDENT 0.0
.TP
.B \fBnode\fP: \fBint\fP
the numa node
.TP
.B \fBsize\fP: \fBint\fP
the size of EPC section
.UNINDENT
.SS Since
.sp
7.0
.SS \fBSGXInfo\fP (Object)
.sp
Information about intel Safe Guard eXtension (SGX) support
.SS Members
.INDENT 0.0
.TP
.B \fBsgx\fP: \fBboolean\fP
true if SGX is supported
.TP
.B \fBsgx1\fP: \fBboolean\fP
true if SGX1 is supported
.TP
.B \fBsgx2\fP: \fBboolean\fP
true if SGX2 is supported
.TP
.B \fBflc\fP: \fBboolean\fP
true if FLC is supported
.TP
.B \fBsection\-size\fP: \fBint\fP
The EPC section size for guest
Redundant with \fBsections\fP\&.  Just for backward compatibility.
.TP
.B \fBsections\fP: \fBarray of SGXEPCSection\fP
The EPC sections info for guest (Since: 7.0)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBdeprecated\fP
Member \fBsection\-size\fP is deprecated.  Use \fBsections\fP instead.
.UNINDENT
.SS Since
.sp
6.2
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBquery\-sgx\fP (Command)
.sp
Returns information about SGX
.SS Returns
.sp
\fBSGXInfo\fP
.SS Since
.sp
6.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-sgx" }
<\- { "return": { "sgx": true, "sgx1" : true, "sgx2" : true,
                 "flc": true,  "section\-size" : 96468992,
                 "sections": [{"node": 0, "size": 67108864},
                 {"node": 1, "size": 29360128}]} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBTARGET_I386\fP
.SS \fBquery\-sgx\-capabilities\fP (Command)
.sp
Returns information from host SGX capabilities
.SS Returns
.sp
\fBSGXInfo\fP
.SS Since
.sp
6.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-sgx\-capabilities" }
<\- { "return": { "sgx": true, "sgx1" : true, "sgx2" : true,
                 "flc": true, "section\-size" : 96468992,
                 "section" : [{"node": 0, "size": 67108864},
                 {"node": 1, "size": 29360128}]} }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS If
.sp
\fBTARGET_I386\fP
.SH AUDIO
.SS \fBAudiodevPerDirectionOptions\fP (Object)
.sp
General audio backend options that are used for both playback and
recording.
.SS Members
.INDENT 0.0
.TP
.B \fBmixing\-engine\fP: \fBboolean\fP (optional)
use QEMU\(aqs mixing engine to mix all streams inside QEMU and
convert audio formats when not supported by the backend. When
set to off, fixed\-settings must be also off (default on,
since 4.2)
.TP
.B \fBfixed\-settings\fP: \fBboolean\fP (optional)
use fixed settings for host input/output. When off,
frequency, channels and format must not be
specified (default true)
.TP
.B \fBfrequency\fP: \fBint\fP (optional)
frequency to use when using fixed settings
(default 44100)
.TP
.B \fBchannels\fP: \fBint\fP (optional)
number of channels when using fixed settings (default 2)
.TP
.B \fBvoices\fP: \fBint\fP (optional)
number of voices to use (default 1)
.TP
.B \fBformat\fP: \fBAudioFormat\fP (optional)
sample format to use when using fixed settings
(default s16)
.TP
.B \fBbuffer\-length\fP: \fBint\fP (optional)
the buffer length in microseconds
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevGenericOptions\fP (Object)
.sp
Generic driver\-specific options.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevPerDirectionOptions\fP (optional)
options of the capture stream
.TP
.B \fBout\fP: \fBAudiodevPerDirectionOptions\fP (optional)
options of the playback stream
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevAlsaPerDirectionOptions\fP (Object)
.sp
Options of the ALSA backend that are used for both playback and
recording.
.SS Members
.INDENT 0.0
.TP
.B \fBdev\fP: \fBstring\fP (optional)
the name of the ALSA device to use (default \(aqdefault\(aq)
.TP
.B \fBperiod\-length\fP: \fBint\fP (optional)
the period length in microseconds
.TP
.B \fBtry\-poll\fP: \fBboolean\fP (optional)
attempt to use poll mode, falling back to non\-polling
access on failure (default true)
.TP
.B The members of \fBAudiodevPerDirectionOptions\fP
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevAlsaOptions\fP (Object)
.sp
Options of the ALSA audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevAlsaPerDirectionOptions\fP (optional)
options of the capture stream
.TP
.B \fBout\fP: \fBAudiodevAlsaPerDirectionOptions\fP (optional)
options of the playback stream
.TP
.B \fBthreshold\fP: \fBint\fP (optional)
set the threshold (in microseconds) when playback starts
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevSndioOptions\fP (Object)
.sp
Options of the sndio audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevPerDirectionOptions\fP (optional)
options of the capture stream
.TP
.B \fBout\fP: \fBAudiodevPerDirectionOptions\fP (optional)
options of the playback stream
.TP
.B \fBdev\fP: \fBstring\fP (optional)
the name of the sndio device to use (default \(aqdefault\(aq)
.TP
.B \fBlatency\fP: \fBint\fP (optional)
play buffer size (in microseconds)
.UNINDENT
.SS Since
.sp
7.2
.SS \fBAudiodevCoreaudioPerDirectionOptions\fP (Object)
.sp
Options of the Core Audio backend that are used for both playback and
recording.
.SS Members
.INDENT 0.0
.TP
.B \fBbuffer\-count\fP: \fBint\fP (optional)
number of buffers
.TP
.B The members of \fBAudiodevPerDirectionOptions\fP
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevCoreaudioOptions\fP (Object)
.sp
Options of the coreaudio audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevCoreaudioPerDirectionOptions\fP (optional)
options of the capture stream
.TP
.B \fBout\fP: \fBAudiodevCoreaudioPerDirectionOptions\fP (optional)
options of the playback stream
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevDsoundOptions\fP (Object)
.sp
Options of the DirectSound audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevPerDirectionOptions\fP (optional)
options of the capture stream
.TP
.B \fBout\fP: \fBAudiodevPerDirectionOptions\fP (optional)
options of the playback stream
.TP
.B \fBlatency\fP: \fBint\fP (optional)
add extra latency to playback in microseconds
(default 10000)
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevJackPerDirectionOptions\fP (Object)
.sp
Options of the JACK backend that are used for both playback and
recording.
.SS Members
.INDENT 0.0
.TP
.B \fBserver\-name\fP: \fBstring\fP (optional)
select from among several possible concurrent server instances
(default: environment variable $JACK_DEFAULT_SERVER if set, else "default")
.TP
.B \fBclient\-name\fP: \fBstring\fP (optional)
the client name to use. The server will modify this name to
create a unique variant, if needed unless \fBexact\-name\fP is true (default: the
guest\(aqs name)
.TP
.B \fBconnect\-ports\fP: \fBstring\fP (optional)
if set, a regular expression of JACK client port name(s) to
monitor for and automatically connect to
.TP
.B \fBstart\-server\fP: \fBboolean\fP (optional)
start a jack server process if one is not already present
(default: false)
.TP
.B \fBexact\-name\fP: \fBboolean\fP (optional)
use the exact name requested otherwise JACK automatically
generates a unique one, if needed (default: false)
.TP
.B The members of \fBAudiodevPerDirectionOptions\fP
.UNINDENT
.SS Since
.sp
5.1
.SS \fBAudiodevJackOptions\fP (Object)
.sp
Options of the JACK audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevJackPerDirectionOptions\fP (optional)
options of the capture stream
.TP
.B \fBout\fP: \fBAudiodevJackPerDirectionOptions\fP (optional)
options of the playback stream
.UNINDENT
.SS Since
.sp
5.1
.SS \fBAudiodevOssPerDirectionOptions\fP (Object)
.sp
Options of the OSS backend that are used for both playback and
recording.
.SS Members
.INDENT 0.0
.TP
.B \fBdev\fP: \fBstring\fP (optional)
file name of the OSS device (default \(aq/dev/dsp\(aq)
.TP
.B \fBbuffer\-count\fP: \fBint\fP (optional)
number of buffers
.TP
.B \fBtry\-poll\fP: \fBboolean\fP (optional)
attempt to use poll mode, falling back to non\-polling
access on failure (default true)
.TP
.B The members of \fBAudiodevPerDirectionOptions\fP
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevOssOptions\fP (Object)
.sp
Options of the OSS audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevOssPerDirectionOptions\fP (optional)
options of the capture stream
.TP
.B \fBout\fP: \fBAudiodevOssPerDirectionOptions\fP (optional)
options of the playback stream
.TP
.B \fBtry\-mmap\fP: \fBboolean\fP (optional)
try using memory\-mapped access, falling back to
non\-memory\-mapped access on failure (default true)
.TP
.B \fBexclusive\fP: \fBboolean\fP (optional)
open device in exclusive mode (vmix won\(aqt work)
(default false)
.TP
.B \fBdsp\-policy\fP: \fBint\fP (optional)
set the timing policy of the device (between 0 and 10,
where smaller number means smaller latency but higher
CPU usage) or \-1 to use fragment mode (option ignored
on some platforms) (default 5)
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevPaPerDirectionOptions\fP (Object)
.sp
Options of the Pulseaudio backend that are used for both playback and
recording.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP (optional)
name of the sink/source to use
.TP
.B \fBstream\-name\fP: \fBstring\fP (optional)
name of the PulseAudio stream created by qemu.  Can be
used to identify the stream in PulseAudio when you
create multiple PulseAudio devices or run multiple qemu
instances (default: audiodev\(aqs id, since 4.2)
.TP
.B \fBlatency\fP: \fBint\fP (optional)
latency you want PulseAudio to achieve in microseconds
(default 15000)
.TP
.B The members of \fBAudiodevPerDirectionOptions\fP
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevPaOptions\fP (Object)
.sp
Options of the PulseAudio audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevPaPerDirectionOptions\fP (optional)
options of the capture stream
.TP
.B \fBout\fP: \fBAudiodevPaPerDirectionOptions\fP (optional)
options of the playback stream
.TP
.B \fBserver\fP: \fBstring\fP (optional)
PulseAudio server address (default: let PulseAudio choose)
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevSdlPerDirectionOptions\fP (Object)
.sp
Options of the SDL audio backend that are used for both playback and
recording.
.SS Members
.INDENT 0.0
.TP
.B \fBbuffer\-count\fP: \fBint\fP (optional)
number of buffers (default 4)
.TP
.B The members of \fBAudiodevPerDirectionOptions\fP
.UNINDENT
.SS Since
.sp
6.0
.SS \fBAudiodevSdlOptions\fP (Object)
.sp
Options of the SDL audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevSdlPerDirectionOptions\fP (optional)
options of the recording stream
.TP
.B \fBout\fP: \fBAudiodevSdlPerDirectionOptions\fP (optional)
options of the playback stream
.UNINDENT
.SS Since
.sp
6.0
.SS \fBAudiodevWavOptions\fP (Object)
.sp
Options of the wav audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBin\fP: \fBAudiodevPerDirectionOptions\fP (optional)
options of the capture stream
.TP
.B \fBout\fP: \fBAudiodevPerDirectionOptions\fP (optional)
options of the playback stream
.TP
.B \fBpath\fP: \fBstring\fP (optional)
name of the wav file to record (default \(aqqemu.wav\(aq)
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudioFormat\fP (Enum)
.sp
An enumeration of possible audio formats.
.SS Values
.INDENT 0.0
.TP
.B \fBu8\fP
unsigned 8 bit integer
.TP
.B \fBs8\fP
signed 8 bit integer
.TP
.B \fBu16\fP
unsigned 16 bit integer
.TP
.B \fBs16\fP
signed 16 bit integer
.TP
.B \fBu32\fP
unsigned 32 bit integer
.TP
.B \fBs32\fP
signed 32 bit integer
.TP
.B \fBf32\fP
single precision floating\-point (since 5.0)
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodevDriver\fP (Enum)
.sp
An enumeration of possible audio backend drivers.
.SS Values
.INDENT 0.0
.TP
.B \fBjack\fP
JACK audio backend (since 5.1)
.TP
.B \fBnone\fP
Not documented
.TP
.B \fBalsa\fP
Not documented
.TP
.B \fBcoreaudio\fP
Not documented
.TP
.B \fBdbus\fP
Not documented
.TP
.B \fBdsound\fP
Not documented
.TP
.B \fBoss\fP
Not documented
.TP
.B \fBpa\fP
Not documented
.TP
.B \fBsdl\fP
Not documented
.TP
.B \fBsndio\fP
Not documented
.TP
.B \fBspice\fP
Not documented
.TP
.B \fBwav\fP
Not documented
.UNINDENT
.SS Since
.sp
4.0
.SS \fBAudiodev\fP (Object)
.sp
Options of an audio backend.
.SS Members
.INDENT 0.0
.TP
.B \fBid\fP: \fBstring\fP
identifier of the backend
.TP
.B \fBdriver\fP: \fBAudiodevDriver\fP
the backend driver to use
.TP
.B \fBtimer\-period\fP: \fBint\fP (optional)
timer period (in microseconds, 0: use lowest possible)
.TP
.B The members of \fBAudiodevGenericOptions\fP when \fBdriver\fP is \fB"none"\fP
.TP
.B The members of \fBAudiodevAlsaOptions\fP when \fBdriver\fP is \fB"alsa"\fP
.TP
.B The members of \fBAudiodevCoreaudioOptions\fP when \fBdriver\fP is \fB"coreaudio"\fP
.TP
.B The members of \fBAudiodevGenericOptions\fP when \fBdriver\fP is \fB"dbus"\fP
.TP
.B The members of \fBAudiodevDsoundOptions\fP when \fBdriver\fP is \fB"dsound"\fP
.TP
.B The members of \fBAudiodevJackOptions\fP when \fBdriver\fP is \fB"jack"\fP
.TP
.B The members of \fBAudiodevOssOptions\fP when \fBdriver\fP is \fB"oss"\fP
.TP
.B The members of \fBAudiodevPaOptions\fP when \fBdriver\fP is \fB"pa"\fP
.TP
.B The members of \fBAudiodevSdlOptions\fP when \fBdriver\fP is \fB"sdl"\fP
.TP
.B The members of \fBAudiodevSndioOptions\fP when \fBdriver\fP is \fB"sndio"\fP
.TP
.B The members of \fBAudiodevGenericOptions\fP when \fBdriver\fP is \fB"spice"\fP
.TP
.B The members of \fBAudiodevWavOptions\fP when \fBdriver\fP is \fB"wav"\fP
.UNINDENT
.SS Since
.sp
4.0
.SH ACPI
.SS \fBAcpiTableOptions\fP (Object)
.sp
Specify an ACPI table on the command line to load.
.sp
At most one of \fBfile\fP and \fBdata\fP can be specified. The list of files specified
by any one of them is loaded and concatenated in order. If both are omitted,
\fBdata\fP is implied.
.sp
Other fields / optargs can be used to override fields of the generic ACPI
table header; refer to the ACPI specification 5.0, section 5.2.6 System
Description Table Header. If a header field is not overridden, then the
corresponding value from the concatenated blob is used (in case of \fBfile\fP), or
it is filled in with a hard\-coded value (in case of \fBdata\fP).
.sp
String fields are copied into the matching ACPI member from lowest address
upwards, and silently truncated / NUL\-padded to length.
.SS Members
.INDENT 0.0
.TP
.B \fBsig\fP: \fBstring\fP (optional)
table signature / identifier (4 bytes)
.TP
.B \fBrev\fP: \fBint\fP (optional)
table revision number (dependent on signature, 1 byte)
.TP
.B \fBoem_id\fP: \fBstring\fP (optional)
OEM identifier (6 bytes)
.TP
.B \fBoem_table_id\fP: \fBstring\fP (optional)
OEM table identifier (8 bytes)
.TP
.B \fBoem_rev\fP: \fBint\fP (optional)
OEM\-supplied revision number (4 bytes)
.TP
.B \fBasl_compiler_id\fP: \fBstring\fP (optional)
identifier of the utility that created the table
(4 bytes)
.TP
.B \fBasl_compiler_rev\fP: \fBint\fP (optional)
revision number of the utility that created the
table (4 bytes)
.TP
.B \fBfile\fP: \fBstring\fP (optional)
colon (:) separated list of pathnames to load and
concatenate as table data. The resultant binary blob is expected to
have an ACPI table header. At least one file is required. This field
excludes \fBdata\fP\&.
.TP
.B \fBdata\fP: \fBstring\fP (optional)
colon (:) separated list of pathnames to load and
concatenate as table data. The resultant binary blob must not have an
ACPI table header. At least one file is required. This field excludes
\fBfile\fP\&.
.UNINDENT
.SS Since
.sp
1.5
.SS \fBACPISlotType\fP (Enum)
.SS Values
.INDENT 0.0
.TP
.B \fBDIMM\fP
memory slot
.TP
.B \fBCPU\fP
logical CPU slot (since 2.7)
.UNINDENT
.SS \fBACPIOSTInfo\fP (Object)
.sp
OSPM Status Indication for a device
For description of possible values of \fBsource\fP and \fBstatus\fP fields
see "_OST (OSPM Status Indication)" chapter of ACPI5.0 spec.
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBstring\fP (optional)
device ID associated with slot
.TP
.B \fBslot\fP: \fBstring\fP
slot ID, unique per slot of a given \fBslot\-type\fP
.TP
.B \fBslot\-type\fP: \fBACPISlotType\fP
type of the slot
.TP
.B \fBsource\fP: \fBint\fP
an integer containing the source event
.TP
.B \fBstatus\fP: \fBint\fP
an integer containing the status code
.UNINDENT
.SS Since
.sp
2.1
.SS \fBquery\-acpi\-ospm\-status\fP (Command)
.sp
Return a list of ACPIOSTInfo for devices that support status
reporting via ACPI _OST method.
.SS Since
.sp
2.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-acpi\-ospm\-status" }
<\- { "return": [ { "device": "d1", "slot": "0", "slot\-type": "DIMM", "source": 1, "status": 0},
                 { "slot": "1", "slot\-type": "DIMM", "source": 0, "status": 0},
                 { "slot": "2", "slot\-type": "DIMM", "source": 0, "status": 0},
                 { "slot": "3", "slot\-type": "DIMM", "source": 0, "status": 0}
   ]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBACPI_DEVICE_OST\fP (Event)
.sp
Emitted when guest executes ACPI _OST method.
.SS Arguments
.INDENT 0.0
.TP
.B \fBinfo\fP: \fBACPIOSTInfo\fP
OSPM Status Indication
.UNINDENT
.SS Since
.sp
2.1
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<\- { "event": "ACPI_DEVICE_OST",
     "data": { "info": { "device": "d1", "slot": "0",
                         "slot\-type": "DIMM", "source": 1, "status": 0 } },
     "timestamp": { "seconds": 1265044230, "microseconds": 450486 } }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH PCI
.SS \fBPciMemoryRange\fP (Object)
.sp
A PCI device memory region
.SS Members
.INDENT 0.0
.TP
.B \fBbase\fP: \fBint\fP
the starting address (guest physical)
.TP
.B \fBlimit\fP: \fBint\fP
the ending address (guest physical)
.UNINDENT
.SS Since
.sp
0.14
.SS \fBPciMemoryRegion\fP (Object)
.sp
Information about a PCI device I/O region.
.SS Members
.INDENT 0.0
.TP
.B \fBbar\fP: \fBint\fP
the index of the Base Address Register for this region
.TP
.B \fBtype\fP: \fBstring\fP
.INDENT 7.0
.IP \(bu 2
\(aqio\(aq if the region is a PIO region
.IP \(bu 2
\(aqmemory\(aq if the region is a MMIO region
.UNINDENT
.TP
.B \fBsize\fP: \fBint\fP
memory size
.TP
.B \fBprefetch\fP: \fBboolean\fP (optional)
if \fBtype\fP is \(aqmemory\(aq, true if the memory is prefetchable
.TP
.B \fBmem_type_64\fP: \fBboolean\fP (optional)
if \fBtype\fP is \(aqmemory\(aq, true if the BAR is 64\-bit
.TP
.B \fBaddress\fP: \fBint\fP
Not documented
.UNINDENT
.SS Since
.sp
0.14
.SS \fBPciBusInfo\fP (Object)
.sp
Information about a bus of a PCI Bridge device
.SS Members
.INDENT 0.0
.TP
.B \fBnumber\fP: \fBint\fP
primary bus interface number.  This should be the number of the
bus the device resides on.
.TP
.B \fBsecondary\fP: \fBint\fP
secondary bus interface number.  This is the number of the
main bus for the bridge
.TP
.B \fBsubordinate\fP: \fBint\fP
This is the highest number bus that resides below the
bridge.
.TP
.B \fBio_range\fP: \fBPciMemoryRange\fP
The PIO range for all devices on this bridge
.TP
.B \fBmemory_range\fP: \fBPciMemoryRange\fP
The MMIO range for all devices on this bridge
.TP
.B \fBprefetchable_range\fP: \fBPciMemoryRange\fP
The range of prefetchable MMIO for all devices on
this bridge
.UNINDENT
.SS Since
.sp
2.4
.SS \fBPciBridgeInfo\fP (Object)
.sp
Information about a PCI Bridge device
.SS Members
.INDENT 0.0
.TP
.B \fBbus\fP: \fBPciBusInfo\fP
information about the bus the device resides on
.TP
.B \fBdevices\fP: \fBarray of PciDeviceInfo\fP (optional)
a list of \fBPciDeviceInfo\fP for each device on this bridge
.UNINDENT
.SS Since
.sp
0.14
.SS \fBPciDeviceClass\fP (Object)
.sp
Information about the Class of a PCI device
.SS Members
.INDENT 0.0
.TP
.B \fBdesc\fP: \fBstring\fP (optional)
a string description of the device\(aqs class
.TP
.B \fBclass\fP: \fBint\fP
the class code of the device
.UNINDENT
.SS Since
.sp
2.4
.SS \fBPciDeviceId\fP (Object)
.sp
Information about the Id of a PCI device
.SS Members
.INDENT 0.0
.TP
.B \fBdevice\fP: \fBint\fP
the PCI device id
.TP
.B \fBvendor\fP: \fBint\fP
the PCI vendor id
.TP
.B \fBsubsystem\fP: \fBint\fP (optional)
the PCI subsystem id (since 3.1)
.TP
.B \fBsubsystem\-vendor\fP: \fBint\fP (optional)
the PCI subsystem vendor id (since 3.1)
.UNINDENT
.SS Since
.sp
2.4
.SS \fBPciDeviceInfo\fP (Object)
.sp
Information about a PCI device
.SS Members
.INDENT 0.0
.TP
.B \fBbus\fP: \fBint\fP
the bus number of the device
.TP
.B \fBslot\fP: \fBint\fP
the slot the device is located in
.TP
.B \fBfunction\fP: \fBint\fP
the function of the slot used by the device
.TP
.B \fBclass_info\fP: \fBPciDeviceClass\fP
the class of the device
.TP
.B \fBid\fP: \fBPciDeviceId\fP
the PCI device id
.TP
.B \fBirq\fP: \fBint\fP (optional)
if an IRQ is assigned to the device, the IRQ number
.TP
.B \fBirq_pin\fP: \fBint\fP
the IRQ pin, zero means no IRQ (since 5.1)
.TP
.B \fBqdev_id\fP: \fBstring\fP
the device name of the PCI device
.TP
.B \fBpci_bridge\fP: \fBPciBridgeInfo\fP (optional)
if the device is a PCI bridge, the bridge information
.TP
.B \fBregions\fP: \fBarray of PciMemoryRegion\fP
a list of the PCI I/O regions associated with the device
.UNINDENT
.SS Notes
.sp
the contents of \fBclass_info\fP\&.desc are not stable and should only be
treated as informational.
.SS Since
.sp
0.14
.SS \fBPciInfo\fP (Object)
.sp
Information about a PCI bus
.SS Members
.INDENT 0.0
.TP
.B \fBbus\fP: \fBint\fP
the bus index
.TP
.B \fBdevices\fP: \fBarray of PciDeviceInfo\fP
a list of devices on this bus
.UNINDENT
.SS Since
.sp
0.14
.SS \fBquery\-pci\fP (Command)
.sp
Return information about the PCI bus topology of the guest.
.SS Returns
.sp
a list of \fBPciInfo\fP for each PCI bus. Each bus is
represented by a json\-object, which has a key with a json\-array of
all PCI devices attached to it. Each device is represented by a
json\-object.
.SS Since
.sp
0.14
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "query\-pci" }
<\- { "return": [
         {
            "bus": 0,
            "devices": [
               {
                  "bus": 0,
                  "qdev_id": "",
                  "slot": 0,
                  "class_info": {
                     "class": 1536,
                     "desc": "Host bridge"
                  },
                  "id": {
                     "device": 32902,
                     "vendor": 4663
                  },
                  "function": 0,
                  "regions": [
                  ]
               },
               {
                  "bus": 0,
                  "qdev_id": "",
                  "slot": 1,
                  "class_info": {
                     "class": 1537,
                     "desc": "ISA bridge"
                  },
                  "id": {
                     "device": 32902,
                     "vendor": 28672
                  },
                  "function": 0,
                  "regions": [
                  ]
               },
               {
                  "bus": 0,
                  "qdev_id": "",
                  "slot": 1,
                  "class_info": {
                     "class": 257,
                     "desc": "IDE controller"
                  },
                  "id": {
                     "device": 32902,
                     "vendor": 28688
                  },
                  "function": 1,
                  "regions": [
                     {
                        "bar": 4,
                        "size": 16,
                        "address": 49152,
                        "type": "io"
                     }
                  ]
               },
               {
                  "bus": 0,
                  "qdev_id": "",
                  "slot": 2,
                  "class_info": {
                     "class": 768,
                     "desc": "VGA controller"
                  },
                  "id": {
                     "device": 4115,
                     "vendor": 184
                  },
                  "function": 0,
                  "regions": [
                     {
                        "prefetch": true,
                        "mem_type_64": false,
                        "bar": 0,
                        "size": 33554432,
                        "address": 4026531840,
                        "type": "memory"
                     },
                     {
                        "prefetch": false,
                        "mem_type_64": false,
                        "bar": 1,
                        "size": 4096,
                        "address": 4060086272,
                        "type": "memory"
                     },
                     {
                        "prefetch": false,
                        "mem_type_64": false,
                        "bar": 6,
                        "size": 65536,
                        "address": \-1,
                        "type": "memory"
                     }
                  ]
               },
               {
                  "bus": 0,
                  "qdev_id": "",
                  "irq": 11,
                  "slot": 4,
                  "class_info": {
                     "class": 1280,
                     "desc": "RAM controller"
                  },
                  "id": {
                     "device": 6900,
                     "vendor": 4098
                  },
                  "function": 0,
                  "regions": [
                     {
                        "bar": 0,
                        "size": 32,
                        "address": 49280,
                        "type": "io"
                     }
                  ]
               }
            ]
         }
      ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Note
.sp
This example has been shortened as the real response is too long.
.SH STATISTICS
.SS \fBStatsType\fP (Enum)
.sp
Enumeration of statistics types
.SS Values
.INDENT 0.0
.TP
.B \fBcumulative\fP
stat is cumulative; value can only increase.
.TP
.B \fBinstant\fP
stat is instantaneous; value can increase or decrease.
.TP
.B \fBpeak\fP
stat is the peak value; value can only increase.
.TP
.B \fBlinear\-histogram\fP
stat is a linear histogram.
.TP
.B \fBlog2\-histogram\fP
stat is a logarithmic histogram, with one bucket
for each power of two.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStatsUnit\fP (Enum)
.sp
Enumeration of unit of measurement for statistics
.SS Values
.INDENT 0.0
.TP
.B \fBbytes\fP
stat reported in bytes.
.TP
.B \fBseconds\fP
stat reported in seconds.
.TP
.B \fBcycles\fP
stat reported in clock cycles.
.TP
.B \fBboolean\fP
stat is a boolean value.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStatsProvider\fP (Enum)
.sp
Enumeration of statistics providers.
.SS Values
.INDENT 0.0
.TP
.B \fBkvm\fP
Not documented
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStatsTarget\fP (Enum)
.sp
The kinds of objects on which one can request statistics.
.SS Values
.INDENT 0.0
.TP
.B \fBvm\fP
statistics that apply to the entire virtual machine or
the entire QEMU process.
.TP
.B \fBvcpu\fP
statistics that apply to a single virtual CPU.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStatsRequest\fP (Object)
.sp
Indicates a set of statistics that should be returned by query\-stats.
.SS Members
.INDENT 0.0
.TP
.B \fBprovider\fP: \fBStatsProvider\fP
provider for which to return statistics.
.TP
.B \fBnames\fP: \fBarray of string\fP (optional)
statistics to be returned (all if omitted).
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStatsVCPUFilter\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBvcpus\fP: \fBarray of string\fP (optional)
list of QOM paths for the desired vCPU objects.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStatsFilter\fP (Object)
.sp
The arguments to the query\-stats command; specifies a target for which to
request statistics and optionally the required subset of information for
that target:
\- which vCPUs to request statistics for
\- which providers to request statistics from
\- which named values to return within each provider
.SS Members
.INDENT 0.0
.TP
.B \fBtarget\fP: \fBStatsTarget\fP
Not documented
.TP
.B \fBproviders\fP: \fBarray of StatsRequest\fP (optional)
Not documented
.TP
.B The members of \fBStatsVCPUFilter\fP when \fBtarget\fP is \fB"vcpu"\fP
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStatsValue\fP (Alternate)
.SS Members
.INDENT 0.0
.TP
.B \fBscalar\fP: \fBint\fP
single unsigned 64\-bit integers.
.TP
.B \fBlist\fP: \fBarray of int\fP
list of unsigned 64\-bit integers (used for histograms).
.TP
.B \fBboolean\fP: \fBboolean\fP
Not documented
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStats\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
name of stat.
.TP
.B \fBvalue\fP: \fBStatsValue\fP
stat value.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStatsResult\fP (Object)
.SS Members
.INDENT 0.0
.TP
.B \fBprovider\fP: \fBStatsProvider\fP
provider for this set of statistics.
.TP
.B \fBqom\-path\fP: \fBstring\fP (optional)
Path to the object for which the statistics are returned,
if the object is exposed in the QOM tree
.TP
.B \fBstats\fP: \fBarray of Stats\fP
list of statistics.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBquery\-stats\fP (Command)
.sp
Return runtime\-collected statistics for objects such as the
VM or its vCPUs.
.sp
The arguments are a StatsFilter and specify the provider and objects
to return statistics about.
.SS Arguments
.INDENT 0.0
.TP
.B The members of \fBStatsFilter\fP
.UNINDENT
.SS Returns
.sp
a list of StatsResult, one for each provider and object
(e.g., for each vCPU).
.SS Since
.sp
7.1
.SS \fBStatsSchemaValue\fP (Object)
.sp
Schema for a single statistic.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
name of the statistic; each element of the schema is uniquely
identified by a target, a provider (both available in \fBStatsSchema\fP)
and the name.
.TP
.B \fBtype\fP: \fBStatsType\fP
kind of statistic.
.TP
.B \fBunit\fP: \fBStatsUnit\fP (optional)
basic unit of measure for the statistic; if missing, the statistic
is a simple number or counter.
.TP
.B \fBbase\fP: \fBint\fP (optional)
base for the multiple of \fBunit\fP in which the statistic is measured.
Only present if \fBexponent\fP is non\-zero; \fBbase\fP and \fBexponent\fP together
form a SI prefix (e.g., _nano\-_ for \fBbase=10\fP and \fBexponent=\-9\fP)
or IEC binary prefix (e.g. _kibi\-_ for \fBbase=2\fP and \fBexponent=10\fP)
.TP
.B \fBexponent\fP: \fBint\fP
exponent for the multiple of \fBunit\fP in which the statistic is
expressed, or 0 for the basic unit
.TP
.B \fBbucket\-size\fP: \fBint\fP (optional)
Present when \fBtype\fP is "linear\-histogram", contains the width
of each bucket of the histogram.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBStatsSchema\fP (Object)
.sp
Schema for all available statistics for a provider and target.
.SS Members
.INDENT 0.0
.TP
.B \fBprovider\fP: \fBStatsProvider\fP
provider for this set of statistics.
.TP
.B \fBtarget\fP: \fBStatsTarget\fP
the kind of object that can be queried through the provider.
.TP
.B \fBstats\fP: \fBarray of StatsSchemaValue\fP
list of statistics.
.UNINDENT
.SS Since
.sp
7.1
.SS \fBquery\-stats\-schemas\fP (Command)
.sp
Return the schema for all available runtime\-collected statistics.
.SS Arguments
.INDENT 0.0
.TP
.B \fBprovider\fP: \fBStatsProvider\fP (optional)
Not documented
.UNINDENT
.SS Note
.sp
runtime\-collected statistics and their names fall outside QEMU\(aqs usual
deprecation policies.  QEMU will try to keep the set of available data
stable, together with their names, but will not guarantee stability
at all costs; the same is true of providers that source statistics
externally, e.g. from Linux.  For example, if the same value is being
tracked with different names on different architectures or by different
providers, one of them might be renamed.  A statistic might go away if
an algorithm is changed or some code is removed; changing a default
might cause previously useful statistics to always report 0.  Such
changes, however, are expected to be rare.
.SS Since
.sp
7.1
.SH VIRTIO DEVICES
.SS \fBVirtioInfo\fP (Object)
.sp
Basic information about a given VirtIODevice
.SS Members
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
The VirtIODevice\(aqs canonical QOM path
.TP
.B \fBname\fP: \fBstring\fP
Name of the VirtIODevice
.UNINDENT
.SS Since
.sp
7.2
.SS \fBx\-query\-virtio\fP (Command)
.sp
Returns a list of all realized VirtIODevices
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
List of gathered VirtIODevices
.SS Since
.sp
7.2
.SS Example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-> { "execute": "x\-query\-virtio" }
<\- { "return": [
         {
             "name": "virtio\-input",
             "path": "/machine/peripheral\-anon/device[4]/virtio\-backend"
         },
         {
             "name": "virtio\-crypto",
             "path": "/machine/peripheral/crypto0/virtio\-backend"
         },
         {
             "name": "virtio\-scsi",
             "path": "/machine/peripheral\-anon/device[2]/virtio\-backend"
         },
         {
             "name": "virtio\-net",
             "path": "/machine/peripheral\-anon/device[1]/virtio\-backend"
         },
         {
             "name": "virtio\-serial",
             "path": "/machine/peripheral\-anon/device[0]/virtio\-backend"
         }
     ]
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBVhostStatus\fP (Object)
.sp
Information about a vhost device. This information will only be
displayed if the vhost device is active.
.SS Members
.INDENT 0.0
.TP
.B \fBn\-mem\-sections\fP: \fBint\fP
vhost_dev n_mem_sections
.TP
.B \fBn\-tmp\-sections\fP: \fBint\fP
vhost_dev n_tmp_sections
.TP
.B \fBnvqs\fP: \fBint\fP
vhost_dev nvqs (number of virtqueues being used)
.TP
.B \fBvq\-index\fP: \fBint\fP
vhost_dev vq_index
.TP
.B \fBfeatures\fP: \fBVirtioDeviceFeatures\fP
vhost_dev features
.TP
.B \fBacked\-features\fP: \fBVirtioDeviceFeatures\fP
vhost_dev acked_features
.TP
.B \fBbackend\-features\fP: \fBVirtioDeviceFeatures\fP
vhost_dev backend_features
.TP
.B \fBprotocol\-features\fP: \fBVhostDeviceProtocols\fP
vhost_dev protocol_features
.TP
.B \fBmax\-queues\fP: \fBint\fP
vhost_dev max_queues
.TP
.B \fBbackend\-cap\fP: \fBint\fP
vhost_dev backend_cap
.TP
.B \fBlog\-enabled\fP: \fBboolean\fP
vhost_dev log_enabled flag
.TP
.B \fBlog\-size\fP: \fBint\fP
vhost_dev log_size
.UNINDENT
.SS Since
.sp
7.2
.SS \fBVirtioStatus\fP (Object)
.sp
Full status of the virtio device with most VirtIODevice members.
Also includes the full status of the corresponding vhost device
if the vhost device is active.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
VirtIODevice name
.TP
.B \fBdevice\-id\fP: \fBint\fP
VirtIODevice ID
.TP
.B \fBvhost\-started\fP: \fBboolean\fP
VirtIODevice vhost_started flag
.TP
.B \fBguest\-features\fP: \fBVirtioDeviceFeatures\fP
VirtIODevice guest_features
.TP
.B \fBhost\-features\fP: \fBVirtioDeviceFeatures\fP
VirtIODevice host_features
.TP
.B \fBbackend\-features\fP: \fBVirtioDeviceFeatures\fP
VirtIODevice backend_features
.TP
.B \fBdevice\-endian\fP: \fBstring\fP
VirtIODevice device_endian
.TP
.B \fBnum\-vqs\fP: \fBint\fP
VirtIODevice virtqueue count. This is the number of active
virtqueues being used by the VirtIODevice.
.TP
.B \fBstatus\fP: \fBVirtioDeviceStatus\fP
VirtIODevice configuration status (VirtioDeviceStatus)
.TP
.B \fBisr\fP: \fBint\fP
VirtIODevice ISR
.TP
.B \fBqueue\-sel\fP: \fBint\fP
VirtIODevice queue_sel
.TP
.B \fBvm\-running\fP: \fBboolean\fP
VirtIODevice vm_running flag
.TP
.B \fBbroken\fP: \fBboolean\fP
VirtIODevice broken flag
.TP
.B \fBdisabled\fP: \fBboolean\fP
VirtIODevice disabled flag
.TP
.B \fBuse\-started\fP: \fBboolean\fP
VirtIODevice use_started flag
.TP
.B \fBstarted\fP: \fBboolean\fP
VirtIODevice started flag
.TP
.B \fBstart\-on\-kick\fP: \fBboolean\fP
VirtIODevice start_on_kick flag
.TP
.B \fBdisable\-legacy\-check\fP: \fBboolean\fP
VirtIODevice disabled_legacy_check flag
.TP
.B \fBbus\-name\fP: \fBstring\fP
VirtIODevice bus_name
.TP
.B \fBuse\-guest\-notifier\-mask\fP: \fBboolean\fP
VirtIODevice use_guest_notifier_mask flag
.TP
.B \fBvhost\-dev\fP: \fBVhostStatus\fP (optional)
Corresponding vhost device info for a given VirtIODevice.
Present if the given VirtIODevice has an active vhost
device.
.UNINDENT
.SS Since
.sp
7.2
.SS \fBx\-query\-virtio\-status\fP (Command)
.sp
Poll for a comprehensive status of a given virtio device
.SS Arguments
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
Canonical QOM path of the VirtIODevice
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
VirtioStatus of the virtio device
.SS Since
.sp
7.2
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Poll for the status of virtio\-crypto (no vhost\-crypto active)

\-> { "execute": "x\-query\-virtio\-status",
     "arguments": { "path": "/machine/peripheral/crypto0/virtio\-backend" }
   }
<\- { "return": {
         "device\-endian": "little",
         "bus\-name": "",
         "disable\-legacy\-check": false,
         "name": "virtio\-crypto",
         "started": true,
         "device\-id": 20,
         "backend\-features": {
             "transports": [],
             "dev\-features": []
         },
         "start\-on\-kick": false,
         "isr": 1,
         "broken": false,
         "status": {
             "statuses": [
                 "VIRTIO_CONFIG_S_ACKNOWLEDGE: Valid virtio device found",
                 "VIRTIO_CONFIG_S_DRIVER: Guest OS compatible with device",
                 "VIRTIO_CONFIG_S_FEATURES_OK: Feature negotiation complete",
                 "VIRTIO_CONFIG_S_DRIVER_OK: Driver setup and ready"
             ]
         },
         "num\-vqs": 2,
         "guest\-features": {
             "dev\-features": [],
             "transports": [
                 "VIRTIO_RING_F_EVENT_IDX: Used & avail. event fields enabled",
                 "VIRTIO_RING_F_INDIRECT_DESC: Indirect descriptors supported",
                 "VIRTIO_F_VERSION_1: Device compliant for v1 spec (legacy)"
             ]
         },
         "host\-features": {
             "unknown\-dev\-features": 1073741824,
             "dev\-features": [],
             "transports": [
                 "VIRTIO_RING_F_EVENT_IDX: Used & avail. event fields enabled",
                 "VIRTIO_RING_F_INDIRECT_DESC: Indirect descriptors supported",
                 "VIRTIO_F_VERSION_1: Device compliant for v1 spec (legacy)",
                 "VIRTIO_F_ANY_LAYOUT: Device accepts arbitrary desc. layouts",
                 "VIRTIO_F_NOTIFY_ON_EMPTY: Notify when device runs out of avail. descs. on VQ"
             ]
         },
         "use\-guest\-notifier\-mask": true,
         "vm\-running": true,
         "queue\-sel": 1,
         "disabled": false,
         "vhost\-started": false,
         "use\-started": true
     }
   }

2. Poll for the status of virtio\-net (vhost\-net is active)

\-> { "execute": "x\-query\-virtio\-status",
     "arguments": { "path": "/machine/peripheral\-anon/device[1]/virtio\-backend" }
   }
<\- { "return": {
         "device\-endian": "little",
         "bus\-name": "",
         "disabled\-legacy\-check": false,
         "name": "virtio\-net",
         "started": true,
         "device\-id": 1,
         "vhost\-dev": {
             "n\-tmp\-sections": 4,
             "n\-mem\-sections": 4,
             "max\-queues": 1,
             "backend\-cap": 2,
             "log\-size": 0,
             "backend\-features": {
                 "dev\-features": [],
                 "transports": []
             },
             "nvqs": 2,
             "protocol\-features": {
                 "protocols": []
             },
             "vq\-index": 0,
             "log\-enabled": false,
             "acked\-features": {
                 "dev\-features": [
                     "VIRTIO_NET_F_MRG_RXBUF: Driver can merge receive buffers"
                 ],
                 "transports": [
                     "VIRTIO_RING_F_EVENT_IDX: Used & avail. event fields enabled",
                     "VIRTIO_RING_F_INDIRECT_DESC: Indirect descriptors supported",
                     "VIRTIO_F_VERSION_1: Device compliant for v1 spec (legacy)"
                 ]
             },
             "features": {
                 "dev\-features": [
                     "VHOST_F_LOG_ALL: Logging write descriptors supported",
                     "VIRTIO_NET_F_MRG_RXBUF: Driver can merge receive buffers"
                 ],
                 "transports": [
                     "VIRTIO_RING_F_EVENT_IDX: Used & avail. event fields enabled",
                     "VIRTIO_RING_F_INDIRECT_DESC: Indirect descriptors supported",
                     "VIRTIO_F_IOMMU_PLATFORM: Device can be used on IOMMU platform",
                     "VIRTIO_F_VERSION_1: Device compliant for v1 spec (legacy)",
                     "VIRTIO_F_ANY_LAYOUT: Device accepts arbitrary desc. layouts",
                     "VIRTIO_F_NOTIFY_ON_EMPTY: Notify when device runs out of avail. descs. on VQ"
                 ]
             }
         },
         "backend\-features": {
             "dev\-features": [
                 "VHOST_USER_F_PROTOCOL_FEATURES: Vhost\-user protocol features negotiation supported",
                 "VIRTIO_NET_F_GSO: Handling GSO\-type packets supported",
                 "VIRTIO_NET_F_CTRL_MAC_ADDR: MAC address set through control channel",
                 "VIRTIO_NET_F_GUEST_ANNOUNCE: Driver sending gratuitous packets supported",
                 "VIRTIO_NET_F_CTRL_RX_EXTRA: Extra RX mode control supported",
                 "VIRTIO_NET_F_CTRL_VLAN: Control channel VLAN filtering supported",
                 "VIRTIO_NET_F_CTRL_RX: Control channel RX mode supported",
                 "VIRTIO_NET_F_CTRL_VQ: Control channel available",
                 "VIRTIO_NET_F_STATUS: Configuration status field available",
                 "VIRTIO_NET_F_MRG_RXBUF: Driver can merge receive buffers",
                 "VIRTIO_NET_F_HOST_UFO: Device can receive UFO",
                 "VIRTIO_NET_F_HOST_ECN: Device can receive TSO with ECN",
                 "VIRTIO_NET_F_HOST_TSO6: Device can receive TSOv6",
                 "VIRTIO_NET_F_HOST_TSO4: Device can receive TSOv4",
                 "VIRTIO_NET_F_GUEST_UFO: Driver can receive UFO",
                 "VIRTIO_NET_F_GUEST_ECN: Driver can receive TSO with ECN",
                 "VIRTIO_NET_F_GUEST_TSO6: Driver can receive TSOv6",
                 "VIRTIO_NET_F_GUEST_TSO4: Driver can receive TSOv4",
                 "VIRTIO_NET_F_MAC: Device has given MAC address",
                 "VIRTIO_NET_F_CTRL_GUEST_OFFLOADS: Control channel offloading reconfig. supported",
                 "VIRTIO_NET_F_GUEST_CSUM: Driver handling packets with partial checksum supported",
                 "VIRTIO_NET_F_CSUM: Device handling packets with partial checksum supported"
             ],
             "transports": [
                 "VIRTIO_RING_F_EVENT_IDX: Used & avail. event fields enabled",
                 "VIRTIO_RING_F_INDIRECT_DESC: Indirect descriptors supported",
                 "VIRTIO_F_VERSION_1: Device compliant for v1 spec (legacy)",
                 "VIRTIO_F_ANY_LAYOUT: Device accepts arbitrary desc. layouts",
                 "VIRTIO_F_NOTIFY_ON_EMPTY: Notify when device runs out of avail. descs. on VQ"
             ]
         },
         "start\-on\-kick": false,
         "isr": 1,
         "broken": false,
         "status": {
             "statuses": [
                 "VIRTIO_CONFIG_S_ACKNOWLEDGE: Valid virtio device found",
                 "VIRTIO_CONFIG_S_DRIVER: Guest OS compatible with device",
                 "VIRTIO_CONFIG_S_FEATURES_OK: Feature negotiation complete",
                 "VIRTIO_CONFIG_S_DRIVER_OK: Driver setup and ready"
             ]
         },
         "num\-vqs": 3,
         "guest\-features": {
             "dev\-features": [
                 "VIRTIO_NET_F_CTRL_MAC_ADDR: MAC address set through control channel",
                 "VIRTIO_NET_F_GUEST_ANNOUNCE: Driver sending gratuitous packets supported",
                 "VIRTIO_NET_F_CTRL_VLAN: Control channel VLAN filtering supported",
                 "VIRTIO_NET_F_CTRL_RX: Control channel RX mode supported",
                 "VIRTIO_NET_F_CTRL_VQ: Control channel available",
                 "VIRTIO_NET_F_STATUS: Configuration status field available",
                 "VIRTIO_NET_F_MRG_RXBUF: Driver can merge receive buffers",
                 "VIRTIO_NET_F_HOST_UFO: Device can receive UFO",
                 "VIRTIO_NET_F_HOST_ECN: Device can receive TSO with ECN",
                 "VIRTIO_NET_F_HOST_TSO6: Device can receive TSOv6",
                 "VIRTIO_NET_F_HOST_TSO4: Device can receive TSOv4",
                 "VIRTIO_NET_F_GUEST_UFO: Driver can receive UFO",
                 "VIRTIO_NET_F_GUEST_ECN: Driver can receive TSO with ECN",
                 "VIRTIO_NET_F_GUEST_TSO6: Driver can receive TSOv6",
                 "VIRTIO_NET_F_GUEST_TSO4: Driver can receive TSOv4",
                 "VIRTIO_NET_F_MAC: Device has given MAC address",
                 "VIRTIO_NET_F_CTRL_GUEST_OFFLOADS: Control channel offloading reconfig. supported",
                 "VIRTIO_NET_F_GUEST_CSUM: Driver handling packets with partial checksum supported",
                 "VIRTIO_NET_F_CSUM: Device handling packets with partial checksum supported"
             ],
             "transports": [
                 "VIRTIO_RING_F_EVENT_IDX: Used & avail. event fields enabled",
                 "VIRTIO_RING_F_INDIRECT_DESC: Indirect descriptors supported",
                 "VIRTIO_F_VERSION_1: Device compliant for v1 spec (legacy)"
            ]
         },
         "host\-features": {
             "dev\-features": [
                 "VHOST_USER_F_PROTOCOL_FEATURES: Vhost\-user protocol features negotiation supported",
                 "VIRTIO_NET_F_GSO: Handling GSO\-type packets supported",
                 "VIRTIO_NET_F_CTRL_MAC_ADDR: MAC address set through control channel",
                 "VIRTIO_NET_F_GUEST_ANNOUNCE: Driver sending gratuitous packets supported",
                 "VIRTIO_NET_F_CTRL_RX_EXTRA: Extra RX mode control supported",
                 "VIRTIO_NET_F_CTRL_VLAN: Control channel VLAN filtering supported",
                 "VIRTIO_NET_F_CTRL_RX: Control channel RX mode supported",
                 "VIRTIO_NET_F_CTRL_VQ: Control channel available",
                 "VIRTIO_NET_F_STATUS: Configuration status field available",
                 "VIRTIO_NET_F_MRG_RXBUF: Driver can merge receive buffers",
                 "VIRTIO_NET_F_HOST_UFO: Device can receive UFO",
                 "VIRTIO_NET_F_HOST_ECN: Device can receive TSO with ECN",
                 "VIRTIO_NET_F_HOST_TSO6: Device can receive TSOv6",
                 "VIRTIO_NET_F_HOST_TSO4: Device can receive TSOv4",
                 "VIRTIO_NET_F_GUEST_UFO: Driver can receive UFO",
                 "VIRTIO_NET_F_GUEST_ECN: Driver can receive TSO with ECN",
                 "VIRTIO_NET_F_GUEST_TSO6: Driver can receive TSOv6",
                 "VIRTIO_NET_F_GUEST_TSO4: Driver can receive TSOv4",
                 "VIRTIO_NET_F_MAC: Device has given MAC address",
                 "VIRTIO_NET_F_CTRL_GUEST_OFFLOADS: Control channel offloading reconfig. supported",
                 "VIRTIO_NET_F_GUEST_CSUM: Driver handling packets with partial checksum supported",
                 "VIRTIO_NET_F_CSUM: Device handling packets with partial checksum supported"
             ],
             "transports": [
                 "VIRTIO_RING_F_EVENT_IDX: Used & avail. event fields enabled",
                 "VIRTIO_RING_F_INDIRECT_DESC: Indirect descriptors supported",
                 "VIRTIO_F_VERSION_1: Device compliant for v1 spec (legacy)",
                 "VIRTIO_F_ANY_LAYOUT: Device accepts arbitrary desc. layouts",
                 "VIRTIO_F_NOTIFY_ON_EMPTY: Notify when device runs out of avail. descs. on VQ"
            ]
         },
         "use\-guest\-notifier\-mask": true,
         "vm\-running": true,
         "queue\-sel": 2,
         "disabled": false,
         "vhost\-started": true,
         "use\-started": true
     }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBVirtioDeviceStatus\fP (Object)
.sp
A structure defined to list the configuration statuses of a virtio
device
.SS Members
.INDENT 0.0
.TP
.B \fBstatuses\fP: \fBarray of string\fP
List of decoded configuration statuses of the virtio
device
.TP
.B \fBunknown\-statuses\fP: \fBint\fP (optional)
Virtio device statuses bitmap that have not been decoded
.UNINDENT
.SS Since
.sp
7.2
.SS \fBVhostDeviceProtocols\fP (Object)
.sp
A structure defined to list the vhost user protocol features of a
Vhost User device
.SS Members
.INDENT 0.0
.TP
.B \fBprotocols\fP: \fBarray of string\fP
List of decoded vhost user protocol features of a vhost
user device
.TP
.B \fBunknown\-protocols\fP: \fBint\fP (optional)
Vhost user device protocol features bitmap that
have not been decoded
.UNINDENT
.SS Since
.sp
7.2
.SS \fBVirtioDeviceFeatures\fP (Object)
.sp
The common fields that apply to most Virtio devices. Some devices
may not have their own device\-specific features (e.g. virtio\-rng).
.SS Members
.INDENT 0.0
.TP
.B \fBtransports\fP: \fBarray of string\fP
List of transport features of the virtio device
.TP
.B \fBdev\-features\fP: \fBarray of string\fP (optional)
List of device\-specific features (if the device has
unique features)
.TP
.B \fBunknown\-dev\-features\fP: \fBint\fP (optional)
Virtio device features bitmap that have not
been decoded
.UNINDENT
.SS Since
.sp
7.2
.SS \fBVirtQueueStatus\fP (Object)
.sp
Information of a VirtIODevice VirtQueue, including most members of
the VirtQueue data structure.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
Name of the VirtIODevice that uses this VirtQueue
.TP
.B \fBqueue\-index\fP: \fBint\fP
VirtQueue queue_index
.TP
.B \fBinuse\fP: \fBint\fP
VirtQueue inuse
.TP
.B \fBvring\-num\fP: \fBint\fP
VirtQueue vring.num
.TP
.B \fBvring\-num\-default\fP: \fBint\fP
VirtQueue vring.num_default
.TP
.B \fBvring\-align\fP: \fBint\fP
VirtQueue vring.align
.TP
.B \fBvring\-desc\fP: \fBint\fP
VirtQueue vring.desc (descriptor area)
.TP
.B \fBvring\-avail\fP: \fBint\fP
VirtQueue vring.avail (driver area)
.TP
.B \fBvring\-used\fP: \fBint\fP
VirtQueue vring.used (device area)
.TP
.B \fBlast\-avail\-idx\fP: \fBint\fP (optional)
VirtQueue last_avail_idx or return of vhost_dev
vhost_get_vring_base (if vhost active)
.TP
.B \fBshadow\-avail\-idx\fP: \fBint\fP (optional)
VirtQueue shadow_avail_idx
.TP
.B \fBused\-idx\fP: \fBint\fP
VirtQueue used_idx
.TP
.B \fBsignalled\-used\fP: \fBint\fP
VirtQueue signalled_used
.TP
.B \fBsignalled\-used\-valid\fP: \fBboolean\fP
VirtQueue signalled_used_valid flag
.UNINDENT
.SS Since
.sp
7.2
.SS \fBx\-query\-virtio\-queue\-status\fP (Command)
.sp
Return the status of a given VirtIODevice\(aqs VirtQueue
.SS Arguments
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
VirtIODevice canonical QOM path
.TP
.B \fBqueue\fP: \fBint\fP
VirtQueue index to examine
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
VirtQueueStatus of the VirtQueue
.SS Notes
.sp
last_avail_idx will not be displayed in the case where
the selected VirtIODevice has a running vhost device and
the VirtIODevice VirtQueue index (queue) does not exist for
the corresponding vhost device vhost_virtqueue. Also,
shadow_avail_idx will not be displayed in the case where
the selected VirtIODevice has a running vhost device.
.SS Since
.sp
7.2
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Get VirtQueueStatus for virtio\-vsock (vhost\-vsock running)

\-> { "execute": "x\-query\-virtio\-queue\-status",
     "arguments": { "path": "/machine/peripheral/vsock0/virtio\-backend",
                    "queue": 1 }
   }
<\- { "return": {
         "signalled\-used": 0,
         "inuse": 0,
         "name": "vhost\-vsock",
         "vring\-align": 4096,
         "vring\-desc": 5217370112,
         "signalled\-used\-valid": false,
         "vring\-num\-default": 128,
         "vring\-avail": 5217372160,
         "queue\-index": 1,
         "last\-avail\-idx": 0,
         "vring\-used": 5217372480,
         "used\-idx": 0,
         "vring\-num": 128
     }
   }

2. Get VirtQueueStatus for virtio\-serial (no vhost)

\-> { "execute": "x\-query\-virtio\-queue\-status",
     "arguments": { "path": "/machine/peripheral\-anon/device[0]/virtio\-backend",
                    "queue": 20 }
   }
<\- { "return": {
         "signalled\-used": 0,
         "inuse": 0,
         "name": "virtio\-serial",
         "vring\-align": 4096,
         "vring\-desc": 5182074880,
         "signalled\-used\-valid": false,
         "vring\-num\-default": 128,
         "vring\-avail": 5182076928,
         "queue\-index": 20,
         "last\-avail\-idx": 0,
         "vring\-used": 5182077248,
         "used\-idx": 0,
         "shadow\-avail\-idx": 0,
         "vring\-num": 128
     }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBVirtVhostQueueStatus\fP (Object)
.sp
Information of a vhost device\(aqs vhost_virtqueue, including most
members of the vhost_dev vhost_virtqueue data structure.
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
Name of the VirtIODevice that uses this vhost_virtqueue
.TP
.B \fBkick\fP: \fBint\fP
vhost_virtqueue kick
.TP
.B \fBcall\fP: \fBint\fP
vhost_virtqueue call
.TP
.B \fBdesc\fP: \fBint\fP
vhost_virtqueue desc
.TP
.B \fBavail\fP: \fBint\fP
vhost_virtqueue avail
.TP
.B \fBused\fP: \fBint\fP
vhost_virtqueue used
.TP
.B \fBnum\fP: \fBint\fP
vhost_virtqueue num
.TP
.B \fBdesc\-phys\fP: \fBint\fP
vhost_virtqueue desc_phys (descriptor area phys. addr.)
.TP
.B \fBdesc\-size\fP: \fBint\fP
vhost_virtqueue desc_size
.TP
.B \fBavail\-phys\fP: \fBint\fP
vhost_virtqueue avail_phys (driver area phys. addr.)
.TP
.B \fBavail\-size\fP: \fBint\fP
vhost_virtqueue avail_size
.TP
.B \fBused\-phys\fP: \fBint\fP
vhost_virtqueue used_phys (device area phys. addr.)
.TP
.B \fBused\-size\fP: \fBint\fP
vhost_virtqueue used_size
.UNINDENT
.SS Since
.sp
7.2
.SS \fBx\-query\-virtio\-vhost\-queue\-status\fP (Command)
.sp
Return information of a given vhost device\(aqs vhost_virtqueue
.SS Arguments
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
VirtIODevice canonical QOM path
.TP
.B \fBqueue\fP: \fBint\fP
vhost_virtqueue index to examine
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
VirtVhostQueueStatus of the vhost_virtqueue
.SS Since
.sp
7.2
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Get vhost_virtqueue status for vhost\-crypto

\-> { "execute": "x\-query\-virtio\-vhost\-queue\-status",
     "arguments": { "path": "/machine/peripheral/crypto0/virtio\-backend",
                    "queue": 0 }
   }
<\- { "return": {
         "avail\-phys": 5216124928,
         "name": "virtio\-crypto",
         "used\-phys": 5216127040,
         "avail\-size": 2054,
         "desc\-size": 16384,
         "used\-size": 8198,
         "desc": 140141447430144,
         "num": 1024,
         "call": 0,
         "avail": 140141447446528,
         "desc\-phys": 5216108544,
         "used": 140141447448640,
         "kick": 0
     }
   }

2. Get vhost_virtqueue status for vhost\-vsock

\-> { "execute": "x\-query\-virtio\-vhost\-queue\-status",
     "arguments": { "path": "/machine/peripheral/vsock0/virtio\-backend",
                    "queue": 0 }
   }
<\- { "return": {
         "avail\-phys": 5182261248,
         "name": "vhost\-vsock",
         "used\-phys": 5182261568,
         "avail\-size": 262,
         "desc\-size": 2048,
         "used\-size": 1030,
         "desc": 140141413580800,
         "num": 128,
         "call": 0,
         "avail": 140141413582848,
         "desc\-phys": 5182259200,
         "used": 140141413583168,
         "kick": 0
     }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SS \fBVirtioRingDesc\fP (Object)
.sp
Information regarding the vring descriptor area
.SS Members
.INDENT 0.0
.TP
.B \fBaddr\fP: \fBint\fP
Guest physical address of the descriptor area
.TP
.B \fBlen\fP: \fBint\fP
Length of the descriptor area
.TP
.B \fBflags\fP: \fBarray of string\fP
List of descriptor flags
.UNINDENT
.SS Since
.sp
7.2
.SS \fBVirtioRingAvail\fP (Object)
.sp
Information regarding the avail vring (a.k.a. driver area)
.SS Members
.INDENT 0.0
.TP
.B \fBflags\fP: \fBint\fP
VRingAvail flags
.TP
.B \fBidx\fP: \fBint\fP
VRingAvail index
.TP
.B \fBring\fP: \fBint\fP
VRingAvail ring[] entry at provided index
.UNINDENT
.SS Since
.sp
7.2
.SS \fBVirtioRingUsed\fP (Object)
.sp
Information regarding the used vring (a.k.a. device area)
.SS Members
.INDENT 0.0
.TP
.B \fBflags\fP: \fBint\fP
VRingUsed flags
.TP
.B \fBidx\fP: \fBint\fP
VRingUsed index
.UNINDENT
.SS Since
.sp
7.2
.SS \fBVirtioQueueElement\fP (Object)
.sp
Information regarding a VirtQueue\(aqs VirtQueueElement including
descriptor, driver, and device areas
.SS Members
.INDENT 0.0
.TP
.B \fBname\fP: \fBstring\fP
Name of the VirtIODevice that uses this VirtQueue
.TP
.B \fBindex\fP: \fBint\fP
Index of the element in the queue
.TP
.B \fBdescs\fP: \fBarray of VirtioRingDesc\fP
List of descriptors (VirtioRingDesc)
.TP
.B \fBavail\fP: \fBVirtioRingAvail\fP
VRingAvail info
.TP
.B \fBused\fP: \fBVirtioRingUsed\fP
VRingUsed info
.UNINDENT
.SS Since
.sp
7.2
.SS \fBx\-query\-virtio\-queue\-element\fP (Command)
.sp
Return the information about a VirtQueue\(aqs VirtQueueElement
.SS Arguments
.INDENT 0.0
.TP
.B \fBpath\fP: \fBstring\fP
VirtIODevice canonical QOM path
.TP
.B \fBqueue\fP: \fBint\fP
VirtQueue index to examine
.TP
.B \fBindex\fP: \fBint\fP (optional)
Index of the element in the queue
(default: head of the queue)
.UNINDENT
.SS Features
.INDENT 0.0
.TP
.B \fBunstable\fP
This command is meant for debugging.
.UNINDENT
.SS Returns
.sp
VirtioQueueElement information
.SS Since
.sp
7.2
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
1. Introspect on virtio\-net\(aqs VirtQueue 0 at index 5

\-> { "execute": "x\-query\-virtio\-queue\-element",
     "arguments": { "path": "/machine/peripheral\-anon/device[1]/virtio\-backend",
                    "queue": 0,
                    "index": 5 }
   }
<\- { "return": {
         "index": 5,
         "name": "virtio\-net",
         "descs": [
             {
                 "flags": ["write"],
                 "len": 1536,
                 "addr": 5257305600
             }
         ],
         "avail": {
             "idx": 256,
             "flags": 0,
             "ring": 5
         },
         "used": {
             "idx": 13,
             "flags": 0
         }
     }
   }

2. Introspect on virtio\-crypto\(aqs VirtQueue 1 at head

\-> { "execute": "x\-query\-virtio\-queue\-element",
     "arguments": { "path": "/machine/peripheral/crypto0/virtio\-backend",
                    "queue": 1 }
   }
<\- { "return": {
         "index": 0,
         "name": "virtio\-crypto",
         "descs": [
             {
                 "flags": [],
                 "len": 0,
                 "addr": 8080268923184214134
             }
         ],
         "avail": {
             "idx": 280,
             "flags": 0,
             "ring": 0
         },
         "used": {
             "idx": 280,
             "flags": 0
         }
     }
   }

3. Introspect on virtio\-scsi\(aqs VirtQueue 2 at head

\-> { "execute": "x\-query\-virtio\-queue\-element",
     "arguments": { "path": "/machine/peripheral\-anon/device[2]/virtio\-backend",
                    "queue": 2 }
   }
<\- { "return": {
         "index": 19,
         "name": "virtio\-scsi",
         "descs": [
             {
                 "flags": ["used", "indirect", "write"],
                 "len": 4099327944,
                 "addr": 12055409292258155293
             }
         ],
         "avail": {
             "idx": 1147,
             "flags": 0,
             "ring": 19
         },
         "used": {
             "idx": 280,
             "flags": 0
         }
     }
   }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2022, The QEMU Project Developers
.\" Generated by docutils manpage writer.
.
